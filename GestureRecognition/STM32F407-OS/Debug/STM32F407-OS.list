
STM32F407-OS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007be4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08007d74  08007d74  00008d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007de4  08007de4  000090cc  2**0
                  CONTENTS
  4 .ARM          00000008  08007de4  08007de4  00008de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007dec  08007dec  000090cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dec  08007dec  00008dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007df0  08007df0  00008df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  08007df4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000090cc  2**0
                  CONTENTS
 10 .bss          00000bc8  200000cc  200000cc  000090cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000c94  20000c94  000090cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000090cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c1d6  00000000  00000000  000090fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a55  00000000  00000000  000252d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001878  00000000  00000000  00029d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012a1  00000000  00000000  0002b5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006889  00000000  00000000  0002c841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002195d  00000000  00000000  000330ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7fd0  00000000  00000000  00054a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012c9f7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a30  00000000  00000000  0012ca3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  0013346c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000cc 	.word	0x200000cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007d5c 	.word	0x08007d5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d0 	.word	0x200000d0
 80001cc:	08007d5c 	.word	0x08007d5c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08c      	sub	sp, #48	@ 0x30
 8000564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 031c 	add.w	r3, r7, #28
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	61bb      	str	r3, [r7, #24]
 800057a:	4b72      	ldr	r3, [pc, #456]	@ (8000744 <MX_GPIO_Init+0x1e4>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057e:	4a71      	ldr	r2, [pc, #452]	@ (8000744 <MX_GPIO_Init+0x1e4>)
 8000580:	f043 0310 	orr.w	r3, r3, #16
 8000584:	6313      	str	r3, [r2, #48]	@ 0x30
 8000586:	4b6f      	ldr	r3, [pc, #444]	@ (8000744 <MX_GPIO_Init+0x1e4>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	f003 0310 	and.w	r3, r3, #16
 800058e:	61bb      	str	r3, [r7, #24]
 8000590:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
 8000596:	4b6b      	ldr	r3, [pc, #428]	@ (8000744 <MX_GPIO_Init+0x1e4>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	4a6a      	ldr	r2, [pc, #424]	@ (8000744 <MX_GPIO_Init+0x1e4>)
 800059c:	f043 0304 	orr.w	r3, r3, #4
 80005a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a2:	4b68      	ldr	r3, [pc, #416]	@ (8000744 <MX_GPIO_Init+0x1e4>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a6:	f003 0304 	and.w	r3, r3, #4
 80005aa:	617b      	str	r3, [r7, #20]
 80005ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	613b      	str	r3, [r7, #16]
 80005b2:	4b64      	ldr	r3, [pc, #400]	@ (8000744 <MX_GPIO_Init+0x1e4>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	4a63      	ldr	r2, [pc, #396]	@ (8000744 <MX_GPIO_Init+0x1e4>)
 80005b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005be:	4b61      	ldr	r3, [pc, #388]	@ (8000744 <MX_GPIO_Init+0x1e4>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005c6:	613b      	str	r3, [r7, #16]
 80005c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	4b5d      	ldr	r3, [pc, #372]	@ (8000744 <MX_GPIO_Init+0x1e4>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d2:	4a5c      	ldr	r2, [pc, #368]	@ (8000744 <MX_GPIO_Init+0x1e4>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005da:	4b5a      	ldr	r3, [pc, #360]	@ (8000744 <MX_GPIO_Init+0x1e4>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	60bb      	str	r3, [r7, #8]
 80005ea:	4b56      	ldr	r3, [pc, #344]	@ (8000744 <MX_GPIO_Init+0x1e4>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	4a55      	ldr	r2, [pc, #340]	@ (8000744 <MX_GPIO_Init+0x1e4>)
 80005f0:	f043 0302 	orr.w	r3, r3, #2
 80005f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f6:	4b53      	ldr	r3, [pc, #332]	@ (8000744 <MX_GPIO_Init+0x1e4>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	f003 0302 	and.w	r3, r3, #2
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	4b4f      	ldr	r3, [pc, #316]	@ (8000744 <MX_GPIO_Init+0x1e4>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	4a4e      	ldr	r2, [pc, #312]	@ (8000744 <MX_GPIO_Init+0x1e4>)
 800060c:	f043 0308 	orr.w	r3, r3, #8
 8000610:	6313      	str	r3, [r2, #48]	@ 0x30
 8000612:	4b4c      	ldr	r3, [pc, #304]	@ (8000744 <MX_GPIO_Init+0x1e4>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	f003 0308 	and.w	r3, r3, #8
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	2108      	movs	r1, #8
 8000622:	4849      	ldr	r0, [pc, #292]	@ (8000748 <MX_GPIO_Init+0x1e8>)
 8000624:	f001 fd7a 	bl	800211c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000628:	2201      	movs	r2, #1
 800062a:	2101      	movs	r1, #1
 800062c:	4847      	ldr	r0, [pc, #284]	@ (800074c <MX_GPIO_Init+0x1ec>)
 800062e:	f001 fd75 	bl	800211c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000632:	2200      	movs	r2, #0
 8000634:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000638:	4845      	ldr	r0, [pc, #276]	@ (8000750 <MX_GPIO_Init+0x1f0>)
 800063a:	f001 fd6f 	bl	800211c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800063e:	2308      	movs	r3, #8
 8000640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000642:	2301      	movs	r3, #1
 8000644:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064a:	2300      	movs	r3, #0
 800064c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800064e:	f107 031c 	add.w	r3, r7, #28
 8000652:	4619      	mov	r1, r3
 8000654:	483c      	ldr	r0, [pc, #240]	@ (8000748 <MX_GPIO_Init+0x1e8>)
 8000656:	f001 fab1 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800065a:	2301      	movs	r3, #1
 800065c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065e:	2301      	movs	r3, #1
 8000660:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000666:	2300      	movs	r3, #0
 8000668:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	4619      	mov	r1, r3
 8000670:	4836      	ldr	r0, [pc, #216]	@ (800074c <MX_GPIO_Init+0x1ec>)
 8000672:	f001 faa3 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000676:	2308      	movs	r3, #8
 8000678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067a:	2302      	movs	r3, #2
 800067c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	2300      	movs	r3, #0
 8000684:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000686:	2305      	movs	r3, #5
 8000688:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	4619      	mov	r1, r3
 8000690:	482e      	ldr	r0, [pc, #184]	@ (800074c <MX_GPIO_Init+0x1ec>)
 8000692:	f001 fa93 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000696:	2301      	movs	r3, #1
 8000698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800069a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800069e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006a4:	f107 031c 	add.w	r3, r7, #28
 80006a8:	4619      	mov	r1, r3
 80006aa:	482a      	ldr	r0, [pc, #168]	@ (8000754 <MX_GPIO_Init+0x1f4>)
 80006ac:	f001 fa86 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80006b0:	2304      	movs	r3, #4
 80006b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b4:	2300      	movs	r3, #0
 80006b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80006bc:	f107 031c 	add.w	r3, r7, #28
 80006c0:	4619      	mov	r1, r3
 80006c2:	4825      	ldr	r0, [pc, #148]	@ (8000758 <MX_GPIO_Init+0x1f8>)
 80006c4:	f001 fa7a 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80006c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ce:	2302      	movs	r3, #2
 80006d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d6:	2300      	movs	r3, #0
 80006d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006da:	2305      	movs	r3, #5
 80006dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	4619      	mov	r1, r3
 80006e4:	481c      	ldr	r0, [pc, #112]	@ (8000758 <MX_GPIO_Init+0x1f8>)
 80006e6:	f001 fa69 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80006ea:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80006ee:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f0:	2301      	movs	r3, #1
 80006f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f8:	2300      	movs	r3, #0
 80006fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006fc:	f107 031c 	add.w	r3, r7, #28
 8000700:	4619      	mov	r1, r3
 8000702:	4813      	ldr	r0, [pc, #76]	@ (8000750 <MX_GPIO_Init+0x1f0>)
 8000704:	f001 fa5a 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000708:	2320      	movs	r3, #32
 800070a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070c:	2300      	movs	r3, #0
 800070e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	4619      	mov	r1, r3
 800071a:	480d      	ldr	r0, [pc, #52]	@ (8000750 <MX_GPIO_Init+0x1f0>)
 800071c:	f001 fa4e 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000720:	2302      	movs	r3, #2
 8000722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000724:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000728:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	4619      	mov	r1, r3
 8000734:	4804      	ldr	r0, [pc, #16]	@ (8000748 <MX_GPIO_Init+0x1e8>)
 8000736:	f001 fa41 	bl	8001bbc <HAL_GPIO_Init>

}
 800073a:	bf00      	nop
 800073c:	3730      	adds	r7, #48	@ 0x30
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800
 8000748:	40021000 	.word	0x40021000
 800074c:	40020800 	.word	0x40020800
 8000750:	40020c00 	.word	0x40020c00
 8000754:	40020000 	.word	0x40020000
 8000758:	40020400 	.word	0x40020400

0800075c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000760:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <MX_I2C1_Init+0x50>)
 8000762:	4a13      	ldr	r2, [pc, #76]	@ (80007b0 <MX_I2C1_Init+0x54>)
 8000764:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000766:	4b11      	ldr	r3, [pc, #68]	@ (80007ac <MX_I2C1_Init+0x50>)
 8000768:	4a12      	ldr	r2, [pc, #72]	@ (80007b4 <MX_I2C1_Init+0x58>)
 800076a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800076c:	4b0f      	ldr	r3, [pc, #60]	@ (80007ac <MX_I2C1_Init+0x50>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000772:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <MX_I2C1_Init+0x50>)
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000778:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <MX_I2C1_Init+0x50>)
 800077a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800077e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000780:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <MX_I2C1_Init+0x50>)
 8000782:	2200      	movs	r2, #0
 8000784:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000786:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <MX_I2C1_Init+0x50>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800078c:	4b07      	ldr	r3, [pc, #28]	@ (80007ac <MX_I2C1_Init+0x50>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000792:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <MX_I2C1_Init+0x50>)
 8000794:	2200      	movs	r2, #0
 8000796:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000798:	4804      	ldr	r0, [pc, #16]	@ (80007ac <MX_I2C1_Init+0x50>)
 800079a:	f003 fa7f 	bl	8003c9c <HAL_I2C_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007a4:	f000 fcd0 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200000e8 	.word	0x200000e8
 80007b0:	40005400 	.word	0x40005400
 80007b4:	000186a0 	.word	0x000186a0

080007b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	@ 0x28
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a19      	ldr	r2, [pc, #100]	@ (800083c <HAL_I2C_MspInit+0x84>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d12c      	bne.n	8000834 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b18      	ldr	r3, [pc, #96]	@ (8000840 <HAL_I2C_MspInit+0x88>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a17      	ldr	r2, [pc, #92]	@ (8000840 <HAL_I2C_MspInit+0x88>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b15      	ldr	r3, [pc, #84]	@ (8000840 <HAL_I2C_MspInit+0x88>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80007f6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80007fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007fc:	2312      	movs	r3, #18
 80007fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000800:	2301      	movs	r3, #1
 8000802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	2300      	movs	r3, #0
 8000806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000808:	2304      	movs	r3, #4
 800080a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4619      	mov	r1, r3
 8000812:	480c      	ldr	r0, [pc, #48]	@ (8000844 <HAL_I2C_MspInit+0x8c>)
 8000814:	f001 f9d2 	bl	8001bbc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <HAL_I2C_MspInit+0x88>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000820:	4a07      	ldr	r2, [pc, #28]	@ (8000840 <HAL_I2C_MspInit+0x88>)
 8000822:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000826:	6413      	str	r3, [r2, #64]	@ 0x40
 8000828:	4b05      	ldr	r3, [pc, #20]	@ (8000840 <HAL_I2C_MspInit+0x88>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000834:	bf00      	nop
 8000836:	3728      	adds	r7, #40	@ 0x28
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40005400 	.word	0x40005400
 8000840:	40023800 	.word	0x40023800
 8000844:	40020400 	.word	0x40020400

08000848 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800084c:	4b13      	ldr	r3, [pc, #76]	@ (800089c <MX_I2S3_Init+0x54>)
 800084e:	4a14      	ldr	r2, [pc, #80]	@ (80008a0 <MX_I2S3_Init+0x58>)
 8000850:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000852:	4b12      	ldr	r3, [pc, #72]	@ (800089c <MX_I2S3_Init+0x54>)
 8000854:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000858:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800085a:	4b10      	ldr	r3, [pc, #64]	@ (800089c <MX_I2S3_Init+0x54>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000860:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <MX_I2S3_Init+0x54>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000866:	4b0d      	ldr	r3, [pc, #52]	@ (800089c <MX_I2S3_Init+0x54>)
 8000868:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800086c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800086e:	4b0b      	ldr	r3, [pc, #44]	@ (800089c <MX_I2S3_Init+0x54>)
 8000870:	4a0c      	ldr	r2, [pc, #48]	@ (80008a4 <MX_I2S3_Init+0x5c>)
 8000872:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000874:	4b09      	ldr	r3, [pc, #36]	@ (800089c <MX_I2S3_Init+0x54>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800087a:	4b08      	ldr	r3, [pc, #32]	@ (800089c <MX_I2S3_Init+0x54>)
 800087c:	2200      	movs	r2, #0
 800087e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <MX_I2S3_Init+0x54>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	@ (800089c <MX_I2S3_Init+0x54>)
 8000888:	f003 fb4c 	bl	8003f24 <HAL_I2S_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000892:	f000 fc59 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	2000013c 	.word	0x2000013c
 80008a0:	40003c00 	.word	0x40003c00
 80008a4:	00017700 	.word	0x00017700

080008a8 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08e      	sub	sp, #56	@ 0x38
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a31      	ldr	r2, [pc, #196]	@ (8000998 <HAL_I2S_MspInit+0xf0>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d15a      	bne.n	800098e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80008d8:	2301      	movs	r3, #1
 80008da:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80008dc:	23c0      	movs	r3, #192	@ 0xc0
 80008de:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80008e0:	2302      	movs	r3, #2
 80008e2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4618      	mov	r0, r3
 80008ea:	f004 fc3f 	bl	800516c <HAL_RCCEx_PeriphCLKConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80008f4:	f000 fc28 	bl	8001148 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80008f8:	2300      	movs	r3, #0
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	4b27      	ldr	r3, [pc, #156]	@ (800099c <HAL_I2S_MspInit+0xf4>)
 80008fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000900:	4a26      	ldr	r2, [pc, #152]	@ (800099c <HAL_I2S_MspInit+0xf4>)
 8000902:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000906:	6413      	str	r3, [r2, #64]	@ 0x40
 8000908:	4b24      	ldr	r3, [pc, #144]	@ (800099c <HAL_I2S_MspInit+0xf4>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	4b20      	ldr	r3, [pc, #128]	@ (800099c <HAL_I2S_MspInit+0xf4>)
 800091a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091c:	4a1f      	ldr	r2, [pc, #124]	@ (800099c <HAL_I2S_MspInit+0xf4>)
 800091e:	f043 0301 	orr.w	r3, r3, #1
 8000922:	6313      	str	r3, [r2, #48]	@ 0x30
 8000924:	4b1d      	ldr	r3, [pc, #116]	@ (800099c <HAL_I2S_MspInit+0xf4>)
 8000926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000928:	f003 0301 	and.w	r3, r3, #1
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	4b19      	ldr	r3, [pc, #100]	@ (800099c <HAL_I2S_MspInit+0xf4>)
 8000936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000938:	4a18      	ldr	r2, [pc, #96]	@ (800099c <HAL_I2S_MspInit+0xf4>)
 800093a:	f043 0304 	orr.w	r3, r3, #4
 800093e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000940:	4b16      	ldr	r3, [pc, #88]	@ (800099c <HAL_I2S_MspInit+0xf4>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000944:	f003 0304 	and.w	r3, r3, #4
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800094c:	2310      	movs	r3, #16
 800094e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000950:	2302      	movs	r3, #2
 8000952:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800095c:	2306      	movs	r3, #6
 800095e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000964:	4619      	mov	r1, r3
 8000966:	480e      	ldr	r0, [pc, #56]	@ (80009a0 <HAL_I2S_MspInit+0xf8>)
 8000968:	f001 f928 	bl	8001bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800096c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000970:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800097e:	2306      	movs	r3, #6
 8000980:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000982:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000986:	4619      	mov	r1, r3
 8000988:	4806      	ldr	r0, [pc, #24]	@ (80009a4 <HAL_I2S_MspInit+0xfc>)
 800098a:	f001 f917 	bl	8001bbc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800098e:	bf00      	nop
 8000990:	3738      	adds	r7, #56	@ 0x38
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40003c00 	.word	0x40003c00
 800099c:	40023800 	.word	0x40023800
 80009a0:	40020000 	.word	0x40020000
 80009a4:	40020800 	.word	0x40020800

080009a8 <LIS302DL_Init>:
  * @brief  Set LIS302DL Initialization.
  * @param  InitStruct: contains mask of different init parameters
  * @retval None
  */
void LIS302DL_Init(uint16_t InitStruct)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80009b2:	2300      	movs	r3, #0
 80009b4:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  ACCELERO_IO_Init();
 80009b6:	f000 fd07 	bl	80013c8 <ACCELERO_IO_Init>

  ctrl = (uint8_t) InitStruct;
 80009ba:	88fb      	ldrh	r3, [r7, #6]
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 80009c0:	f107 030f 	add.w	r3, r7, #15
 80009c4:	2201      	movs	r2, #1
 80009c6:	2120      	movs	r1, #32
 80009c8:	4618      	mov	r0, r3
 80009ca:	f000 fd5b 	bl	8001484 <ACCELERO_IO_Write>
}
 80009ce:	bf00      	nop
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <LIS302DL_DeInit>:
  * @brief  LIS302DL De-Initialization.
  * @param  None
  * @retval None.
  */
void LIS302DL_DeInit(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <LIS302DL_ReadID>:
  * @brief  Read LIS302DL device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint8_t LIS302DL_ReadID(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
  uint8_t tmp = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	71fb      	strb	r3, [r7, #7]

  /* Configure the low level interface */
  ACCELERO_IO_Init();
 80009ee:	f000 fceb 	bl	80013c8 <ACCELERO_IO_Init>

  /* Read WHO_AM_I register */
  ACCELERO_IO_Read(&tmp, LIS302DL_WHO_AM_I_ADDR, 1);
 80009f2:	1dfb      	adds	r3, r7, #7
 80009f4:	2201      	movs	r2, #1
 80009f6:	210f      	movs	r1, #15
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 fd75 	bl	80014e8 <ACCELERO_IO_Read>
  
  /* Return the ID */
  return (uint16_t)tmp;
 80009fe:	79fb      	ldrb	r3, [r7, #7]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <LIS302DL_FilterConfig>:
  * @brief  Set LIS302DL Internal High Pass Filter configuration.
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LIS302DL_FilterConfig(uint8_t FilterStruct)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
  uint8_t ctrl = 0x00;
 8000a12:	2300      	movs	r3, #0
 8000a14:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  ACCELERO_IO_Read(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8000a16:	f107 030f 	add.w	r3, r7, #15
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2121      	movs	r1, #33	@ 0x21
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 fd62 	bl	80014e8 <ACCELERO_IO_Read>

  /* Clear high pass filter cut-off level, interrupt and data selection bits */
  ctrl &= (uint8_t)~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER | \
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
 8000a26:	f023 032f 	bic.w	r3, r3, #47	@ 0x2f
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	73fb      	strb	r3, [r7, #15]
                     LIS302DL_HIGHPASSFILTER_LEVEL_3 | \
                     LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);

  ctrl |= FilterStruct;
 8000a2e:	7bfa      	ldrb	r2, [r7, #15]
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8000a38:	f107 030f 	add.w	r3, r7, #15
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2121      	movs	r1, #33	@ 0x21
 8000a40:	4618      	mov	r0, r3
 8000a42:	f000 fd1f 	bl	8001484 <ACCELERO_IO_Write>
}
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <LIS302DL_InterruptConfig>:
  * @param  LIS302DL_InterruptConfig_TypeDef: pointer to a LIS302DL_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the LIS302DL Interrupt.
  * @retval None
  */
void LIS302DL_InterruptConfig(LIS302DL_InterruptConfigTypeDef *LIS302DL_IntConfigStruct)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b084      	sub	sp, #16
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 8000a56:	2300      	movs	r3, #0
 8000a58:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFG register */
  ACCELERO_IO_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 8000a5a:	f107 030f 	add.w	r3, r7, #15
 8000a5e:	2201      	movs	r2, #1
 8000a60:	2138      	movs	r1, #56	@ 0x38
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 fd40 	bl	80014e8 <ACCELERO_IO_Read>
  
  /* Configure latch Interrupt request, click interrupts and double click interrupts */                   
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	781a      	ldrb	r2, [r3, #0]
                   LIS302DL_IntConfigStruct->SingleClick_Axes | \
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	785b      	ldrb	r3, [r3, #1]
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 8000a70:	4313      	orrs	r3, r2
 8000a72:	b2da      	uxtb	r2, r3
                   LIS302DL_IntConfigStruct->DoubleClick_Axes);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	789b      	ldrb	r3, [r3, #2]
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK_CFG register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 8000a7e:	f107 030f 	add.w	r3, r7, #15
 8000a82:	2201      	movs	r2, #1
 8000a84:	2138      	movs	r1, #56	@ 0x38
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 fcfc 	bl	8001484 <ACCELERO_IO_Write>
}
 8000a8c:	bf00      	nop
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <LIS302DL_Click_IntConfig>:
  * @brief  Set LIS302DL Interrupt configuration
  * @param  None
  * @retval None
  */
void LIS302DL_Click_IntConfig(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	71fb      	strb	r3, [r7, #7]
  LIS302DL_InterruptConfigTypeDef   LIS302DL_InterruptStruct;
  
  ACCELERO_IO_ITConfig();
 8000a9e:	f000 fcc1 	bl	8001424 <ACCELERO_IO_ITConfig>
  
  /* Set configuration of Internal High Pass Filter of LIS302DL */
  LIS302DL_InterruptStruct.Latch_Request = LIS302DL_INTERRUPTREQUEST_LATCHED;
 8000aa2:	2340      	movs	r3, #64	@ 0x40
 8000aa4:	713b      	strb	r3, [r7, #4]
  LIS302DL_InterruptStruct.SingleClick_Axes = LIS302DL_CLICKINTERRUPT_Z_ENABLE;
 8000aa6:	2310      	movs	r3, #16
 8000aa8:	717b      	strb	r3, [r7, #5]
  LIS302DL_InterruptStruct.DoubleClick_Axes = LIS302DL_DOUBLECLICKINTERRUPT_Z_ENABLE;
 8000aaa:	2320      	movs	r3, #32
 8000aac:	71bb      	strb	r3, [r7, #6]
  LIS302DL_InterruptConfig(&LIS302DL_InterruptStruct);
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ffcc 	bl	8000a4e <LIS302DL_InterruptConfig>
  
  /* Configure Interrupt control register: enable Click interrupt on INT1 and
  INT2 on Z axis high event */
  ctrl = 0x3F;
 8000ab6:	233f      	movs	r3, #63	@ 0x3f
 8000ab8:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG3_ADDR, 1);
 8000aba:	1dfb      	adds	r3, r7, #7
 8000abc:	2201      	movs	r2, #1
 8000abe:	2122      	movs	r1, #34	@ 0x22
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f000 fcdf 	bl	8001484 <ACCELERO_IO_Write>
  
  /* Enable Interrupt generation on click on Z axis */
  ctrl = 0x50;
 8000ac6:	2350      	movs	r3, #80	@ 0x50
 8000ac8:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 8000aca:	1dfb      	adds	r3, r7, #7
 8000acc:	2201      	movs	r2, #1
 8000ace:	2138      	movs	r1, #56	@ 0x38
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f000 fcd7 	bl	8001484 <ACCELERO_IO_Write>
  
  /* Configure Click Threshold on X/Y axis (10 x 0.5g) */
  ctrl = 0xAA;
 8000ad6:	23aa      	movs	r3, #170	@ 0xaa
 8000ad8:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSY_X_REG_ADDR, 1);
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	2201      	movs	r2, #1
 8000ade:	213b      	movs	r1, #59	@ 0x3b
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f000 fccf 	bl	8001484 <ACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis (10 x 0.5g) */
  ctrl = 0x0A;
 8000ae6:	230a      	movs	r3, #10
 8000ae8:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSZ_REG_ADDR, 1);
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	2201      	movs	r2, #1
 8000aee:	213c      	movs	r1, #60	@ 0x3c
 8000af0:	4618      	mov	r0, r3
 8000af2:	f000 fcc7 	bl	8001484 <ACCELERO_IO_Write>
  
  /* Enable interrupt on Y axis high event */
  ctrl = 0x4C;
 8000af6:	234c      	movs	r3, #76	@ 0x4c
 8000af8:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_FF_WU_CFG1_REG_ADDR, 1);
 8000afa:	1dfb      	adds	r3, r7, #7
 8000afc:	2201      	movs	r2, #1
 8000afe:	2130      	movs	r1, #48	@ 0x30
 8000b00:	4618      	mov	r0, r3
 8000b02:	f000 fcbf 	bl	8001484 <ACCELERO_IO_Write>
  
  /* Configure Time Limit */
  ctrl = 0x03;
 8000b06:	2303      	movs	r3, #3
 8000b08:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_TIMELIMIT_REG_ADDR, 1);
 8000b0a:	1dfb      	adds	r3, r7, #7
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	213d      	movs	r1, #61	@ 0x3d
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 fcb7 	bl	8001484 <ACCELERO_IO_Write>
  
  /* Configure Latency */
  ctrl = 0x7F;
 8000b16:	237f      	movs	r3, #127	@ 0x7f
 8000b18:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_LATENCY_REG_ADDR, 1);
 8000b1a:	1dfb      	adds	r3, r7, #7
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	213e      	movs	r1, #62	@ 0x3e
 8000b20:	4618      	mov	r0, r3
 8000b22:	f000 fcaf 	bl	8001484 <ACCELERO_IO_Write>
  
  /* Configure Click Window */
  ctrl = 0x7F;
 8000b26:	237f      	movs	r3, #127	@ 0x7f
 8000b28:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_WINDOW_REG_ADDR, 1);
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	213f      	movs	r1, #63	@ 0x3f
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 fca7 	bl	8001484 <ACCELERO_IO_Write>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <LIS302DL_Click_IntClear>:
  * @brief  Clear LIS302DL click Interrupt 
  * @param  None
  * @retval None
  */
void LIS302DL_Click_IntClear(void)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b084      	sub	sp, #16
 8000b42:	af00      	add	r7, sp, #0
  uint8_t buffer[6], clickreg = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	71fb      	strb	r3, [r7, #7]

  /* Read click and status registers if the available MEMS Accelerometer is LIS302DL */
  ACCELERO_IO_Read(&clickreg, LIS302DL_CLICK_SRC_REG_ADDR, 1); 
 8000b48:	1dfb      	adds	r3, r7, #7
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	2139      	movs	r1, #57	@ 0x39
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 fcca 	bl	80014e8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read(buffer, LIS302DL_STATUS_REG_ADDR, 6);
 8000b54:	f107 0308 	add.w	r3, r7, #8
 8000b58:	2206      	movs	r2, #6
 8000b5a:	2127      	movs	r1, #39	@ 0x27
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f000 fcc3 	bl	80014e8 <ACCELERO_IO_Read>
}
 8000b62:	bf00      	nop
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <LIS302DL_RebootCmd>:
  * @brief  Reboot memory content of LIS302DL.
  * @param  None
  * @retval None
  */
void LIS302DL_RebootCmd(void)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  /* Read CTRL_REG2 register */
  ACCELERO_IO_Read(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 8000b70:	1dfb      	adds	r3, r7, #7
 8000b72:	2201      	movs	r2, #1
 8000b74:	2121      	movs	r1, #33	@ 0x21
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 fcb6 	bl	80014e8 <ACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LIS302DL_BOOT_REBOOTMEMORY;
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 8000b86:	1dfb      	adds	r3, r7, #7
 8000b88:	2201      	movs	r2, #1
 8000b8a:	2121      	movs	r1, #33	@ 0x21
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f000 fc79 	bl	8001484 <ACCELERO_IO_Write>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <LIS302DL_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit rappresentation)
  * @param  pfData: Data out pointer
  * @retval None
  */
void LIS302DL_ReadACC(int16_t *pData)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b088      	sub	sp, #32
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
  int8_t buffer[6];
  int16_t pnRawData[3];
  uint8_t sensitivity = LIS302DL_SENSITIVITY_2_3G;
 8000ba2:	2312      	movs	r3, #18
 8000ba4:	77fb      	strb	r3, [r7, #31]
  uint8_t crtl, i = 0x00;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	77bb      	strb	r3, [r7, #30]
  
  ACCELERO_IO_Read(&crtl, LIS302DL_CTRL_REG1_ADDR, 1);
 8000baa:	f107 030f 	add.w	r3, r7, #15
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2120      	movs	r1, #32
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 fc98 	bl	80014e8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)buffer, LIS302DL_OUT_X_ADDR, 6);
 8000bb8:	f107 0318 	add.w	r3, r7, #24
 8000bbc:	2206      	movs	r2, #6
 8000bbe:	2129      	movs	r1, #41	@ 0x29
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f000 fc91 	bl	80014e8 <ACCELERO_IO_Read>
  
  for(i=0; i<3; i++)
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	77bb      	strb	r3, [r7, #30]
 8000bca:	e00e      	b.n	8000bea <LIS302DL_ReadACC+0x50>
  {
    pnRawData[i] = buffer[2*i];
 8000bcc:	7fbb      	ldrb	r3, [r7, #30]
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	3320      	adds	r3, #32
 8000bd2:	443b      	add	r3, r7
 8000bd4:	f913 2c08 	ldrsb.w	r2, [r3, #-8]
 8000bd8:	7fbb      	ldrb	r3, [r7, #30]
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	3320      	adds	r3, #32
 8000bde:	443b      	add	r3, r7
 8000be0:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8000be4:	7fbb      	ldrb	r3, [r7, #30]
 8000be6:	3301      	adds	r3, #1
 8000be8:	77bb      	strb	r3, [r7, #30]
 8000bea:	7fbb      	ldrb	r3, [r7, #30]
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d9ed      	bls.n	8000bcc <LIS302DL_ReadACC+0x32>
  }
  
  switch(crtl & LIS302DL_FULLSCALE_9_2) 
 8000bf0:	7bfb      	ldrb	r3, [r7, #15]
 8000bf2:	f003 0320 	and.w	r3, r3, #32
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d002      	beq.n	8000c00 <LIS302DL_ReadACC+0x66>
 8000bfa:	2b20      	cmp	r3, #32
 8000bfc:	d003      	beq.n	8000c06 <LIS302DL_ReadACC+0x6c>
  case LIS302DL_FULLSCALE_9_2:
    sensitivity = LIS302DL_SENSITIVITY_9_2G;
    break;
    
  default:
    break;
 8000bfe:	e005      	b.n	8000c0c <LIS302DL_ReadACC+0x72>
    sensitivity = LIS302DL_SENSITIVITY_2_3G;
 8000c00:	2312      	movs	r3, #18
 8000c02:	77fb      	strb	r3, [r7, #31]
    break;
 8000c04:	e002      	b.n	8000c0c <LIS302DL_ReadACC+0x72>
    sensitivity = LIS302DL_SENSITIVITY_9_2G;
 8000c06:	2348      	movs	r3, #72	@ 0x48
 8000c08:	77fb      	strb	r3, [r7, #31]
    break;
 8000c0a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	77bb      	strb	r3, [r7, #30]
 8000c10:	e014      	b.n	8000c3c <LIS302DL_ReadACC+0xa2>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8000c12:	7fbb      	ldrb	r3, [r7, #30]
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	3320      	adds	r3, #32
 8000c18:	443b      	add	r3, r7
 8000c1a:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	7ffb      	ldrb	r3, [r7, #31]
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	fb12 f303 	smulbb	r3, r2, r3
 8000c28:	b299      	uxth	r1, r3
 8000c2a:	7fbb      	ldrb	r3, [r7, #30]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	b20a      	sxth	r2, r1
 8000c34:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000c36:	7fbb      	ldrb	r3, [r7, #30]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	77bb      	strb	r3, [r7, #30]
 8000c3c:	7fbb      	ldrb	r3, [r7, #30]
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d9e7      	bls.n	8000c12 <LIS302DL_ReadACC+0x78>
  }
}
 8000c42:	bf00      	nop
 8000c44:	bf00      	nop
 8000c46:	3720      	adds	r7, #32
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <LIS3DSH_Init>:
  * @brief  Set LIS3DSH Initialization.
  * @param  InitStruct: contains mask of different init parameters
  * @retval None
  */
void LIS3DSH_Init(uint16_t InitStruct)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000c56:	2300      	movs	r3, #0
 8000c58:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  ACCELERO_IO_Init();
 8000c5a:	f000 fbb5 	bl	80013c8 <ACCELERO_IO_Init>

  /* Configure MEMS: power mode(ODR) and axes enable */
  ctrl = (uint8_t) (InitStruct);
 8000c5e:	88fb      	ldrh	r3, [r7, #6]
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG4 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG4_ADDR, 1);
 8000c64:	f107 030f 	add.w	r3, r7, #15
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2120      	movs	r1, #32
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f000 fc09 	bl	8001484 <ACCELERO_IO_Write>
  
  /* Configure MEMS: full scale and self test */
  ctrl = (uint8_t) (InitStruct >> 8);
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	0a1b      	lsrs	r3, r3, #8
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG5_ADDR, 1);
 8000c7c:	f107 030f 	add.w	r3, r7, #15
 8000c80:	2201      	movs	r2, #1
 8000c82:	2124      	movs	r1, #36	@ 0x24
 8000c84:	4618      	mov	r0, r3
 8000c86:	f000 fbfd 	bl	8001484 <ACCELERO_IO_Write>
}
 8000c8a:	bf00      	nop
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <LIS3DSH_DeInit>:
  * @brief  LIS3DSH De-Initialization.
  * @param  None
  * @retval None.
  */
void LIS3DSH_DeInit(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <LIS3DSH_ReadID>:
  * @brief  Read LIS3DSH device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint8_t LIS3DSH_ReadID(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
  uint8_t tmp = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	71fb      	strb	r3, [r7, #7]

  /* Configure the low level interface */
  ACCELERO_IO_Init();
 8000caa:	f000 fb8d 	bl	80013c8 <ACCELERO_IO_Init>

  /* Read WHO_AM_I register */
  ACCELERO_IO_Read(&tmp, LIS3DSH_WHO_AM_I_ADDR, 1);
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	210f      	movs	r1, #15
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 fc17 	bl	80014e8 <ACCELERO_IO_Read>
  
  /* Return the ID */
  return (uint16_t)tmp;
 8000cba:	79fb      	ldrb	r3, [r7, #7]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <LIS3DSH_InterruptConfig>:
  * @param  LIS3DSH_InterruptConfig_TypeDef: pointer to a LIS3DSH_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the LIS3DSH Interrupt.
  * @retval None
  */
void LIS3DSH_InterruptConfig(LIS3DSH_InterruptConfigTypeDef *LIS3DSH_IntConfigStruct)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	73fb      	strb	r3, [r7, #15]
  
  /* Configure Interrupt Selection , Request and Signal */                   
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	785a      	ldrb	r2, [r3, #1]
                   LIS3DSH_IntConfigStruct->Interrupt_Request | \
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	781b      	ldrb	r3, [r3, #0]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	b2da      	uxtb	r2, r3
                   LIS3DSH_IntConfigStruct->Interrupt_Signal);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	789b      	ldrb	r3, [r3, #2]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG3_ADDR, 1);
 8000ce6:	f107 030f 	add.w	r3, r7, #15
 8000cea:	2201      	movs	r2, #1
 8000cec:	2123      	movs	r1, #35	@ 0x23
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 fbc8 	bl	8001484 <ACCELERO_IO_Write>
  
  /* Configure State Machine 1 */                   
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	78da      	ldrb	r2, [r3, #3]
                   LIS3DSH_IntConfigStruct->State_Machine1_Interrupt);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	791b      	ldrb	r3, [r3, #4]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG1 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG1_ADDR, 1);
 8000d02:	f107 030f 	add.w	r3, r7, #15
 8000d06:	2201      	movs	r2, #1
 8000d08:	2121      	movs	r1, #33	@ 0x21
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 fbba 	bl	8001484 <ACCELERO_IO_Write>
  
  /* Configure State Machine 2 */                   
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	795a      	ldrb	r2, [r3, #5]
                   LIS3DSH_IntConfigStruct->State_Machine2_Interrupt);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	799b      	ldrb	r3, [r3, #6]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG2_ADDR, 1);
 8000d1e:	f107 030f 	add.w	r3, r7, #15
 8000d22:	2201      	movs	r2, #1
 8000d24:	2122      	movs	r1, #34	@ 0x22
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 fbac 	bl	8001484 <ACCELERO_IO_Write>
}
 8000d2c:	bf00      	nop
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <LIS3DSH_Click_IntConfig>:
  * @brief  Set LIS3DSH for click detection
  * @param  None
  * @retval None
  */
void LIS3DSH_Click_IntConfig(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	71fb      	strb	r3, [r7, #7]
  LIS3DSH_InterruptConfigTypeDef   LIS3DSH_InterruptStruct; 

  ACCELERO_IO_ITConfig();
 8000d3e:	f000 fb71 	bl	8001424 <ACCELERO_IO_ITConfig>

  /* Set LIS3DSH Interrupt configuration */
  LIS3DSH_InterruptStruct.Interrupt_Selection_Enable = LIS3DSH_INTERRUPT_2_ENABLE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	707b      	strb	r3, [r7, #1]
  LIS3DSH_InterruptStruct.Interrupt_Request = LIS3DSH_INTERRUPT_REQUEST_LATCHED;
 8000d46:	2300      	movs	r3, #0
 8000d48:	703b      	strb	r3, [r7, #0]
  LIS3DSH_InterruptStruct.Interrupt_Signal = LIS3DSH_INTERRUPT_SIGNAL_HIGH;
 8000d4a:	2340      	movs	r3, #64	@ 0x40
 8000d4c:	70bb      	strb	r3, [r7, #2]
  LIS3DSH_InterruptStruct.State_Machine1_Enable = LIS3DSH_SM_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	70fb      	strb	r3, [r7, #3]
  LIS3DSH_InterruptStruct.State_Machine2_Enable = LIS3DSH_SM_ENABLE;
 8000d52:	2301      	movs	r3, #1
 8000d54:	717b      	strb	r3, [r7, #5]
  LIS3DSH_InterruptStruct.State_Machine2_Interrupt = LIS3DSH_SM_INT1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	71bb      	strb	r3, [r7, #6]
  LIS3DSH_InterruptConfig(&LIS3DSH_InterruptStruct);
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ffb1 	bl	8000cc4 <LIS3DSH_InterruptConfig>
    
  /* Set LIS3DSH State Machines configuration */
  ctrl=0x03; 
 8000d62:	2303      	movs	r3, #3
 8000d64:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM2_1_L_ADDR,1);
 8000d66:	1dfb      	adds	r3, r7, #7
 8000d68:	2201      	movs	r2, #1
 8000d6a:	2152      	movs	r1, #82	@ 0x52
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 fb89 	bl	8001484 <ACCELERO_IO_Write>
  ctrl=0xC8; 
 8000d72:	23c8      	movs	r3, #200	@ 0xc8
 8000d74:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM1_1_L_ADDR,1);
 8000d76:	1dfb      	adds	r3, r7, #7
 8000d78:	2201      	movs	r2, #1
 8000d7a:	2154      	movs	r1, #84	@ 0x54
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 fb81 	bl	8001484 <ACCELERO_IO_Write>
  ctrl=0x45; 
 8000d82:	2345      	movs	r3, #69	@ 0x45
 8000d84:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_THRS2_1_ADDR,1);
 8000d86:	1dfb      	adds	r3, r7, #7
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2156      	movs	r1, #86	@ 0x56
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f000 fb79 	bl	8001484 <ACCELERO_IO_Write>
  ctrl=0xFC; 
 8000d92:	23fc      	movs	r3, #252	@ 0xfc
 8000d94:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_MASK1_A_ADDR,1);
 8000d96:	1dfb      	adds	r3, r7, #7
 8000d98:	2201      	movs	r2, #1
 8000d9a:	215a      	movs	r1, #90	@ 0x5a
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 fb71 	bl	8001484 <ACCELERO_IO_Write>
  ctrl=0xA1; 
 8000da2:	23a1      	movs	r3, #161	@ 0xa1
 8000da4:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT1_ADDR,1);
 8000da6:	1dfb      	adds	r3, r7, #7
 8000da8:	2201      	movs	r2, #1
 8000daa:	215b      	movs	r1, #91	@ 0x5b
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 fb69 	bl	8001484 <ACCELERO_IO_Write>
  ctrl=0x01; 
 8000db2:	2301      	movs	r3, #1
 8000db4:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_PR1_ADDR,1);
 8000db6:	1dfb      	adds	r3, r7, #7
 8000db8:	2201      	movs	r2, #1
 8000dba:	215c      	movs	r1, #92	@ 0x5c
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 fb61 	bl	8001484 <ACCELERO_IO_Write>

  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT2_ADDR,1);
 8000dc2:	1dfb      	adds	r3, r7, #7
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	217b      	movs	r1, #123	@ 0x7b
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f000 fb5b 	bl	8001484 <ACCELERO_IO_Write>
  
  /* Configure State Machine 2 to detect single click */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_1_ADDR,1);
 8000dce:	1dfb      	adds	r3, r7, #7
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	2160      	movs	r1, #96	@ 0x60
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 fb55 	bl	8001484 <ACCELERO_IO_Write>
  ctrl=0x06; 
 8000dda:	2306      	movs	r3, #6
 8000ddc:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_2_ADDR,1);
 8000dde:	1dfb      	adds	r3, r7, #7
 8000de0:	2201      	movs	r2, #1
 8000de2:	2161      	movs	r1, #97	@ 0x61
 8000de4:	4618      	mov	r0, r3
 8000de6:	f000 fb4d 	bl	8001484 <ACCELERO_IO_Write>
  ctrl=0x28; 
 8000dea:	2328      	movs	r3, #40	@ 0x28
 8000dec:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_3_ADDR,1);
 8000dee:	1dfb      	adds	r3, r7, #7
 8000df0:	2201      	movs	r2, #1
 8000df2:	2162      	movs	r1, #98	@ 0x62
 8000df4:	4618      	mov	r0, r3
 8000df6:	f000 fb45 	bl	8001484 <ACCELERO_IO_Write>
  ctrl=0x11; 
 8000dfa:	2311      	movs	r3, #17
 8000dfc:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_4_ADDR,1);
 8000dfe:	1dfb      	adds	r3, r7, #7
 8000e00:	2201      	movs	r2, #1
 8000e02:	2163      	movs	r1, #99	@ 0x63
 8000e04:	4618      	mov	r0, r3
 8000e06:	f000 fb3d 	bl	8001484 <ACCELERO_IO_Write>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <LIS3DSH_RebootCmd>:
  * @brief  Reboot memory content of LIS3DSH.
  * @param  None
  * @retval None
  */
void LIS3DSH_RebootCmd(void)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  /* Read CTRL_REG6 register */
  ACCELERO_IO_Read(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 8000e18:	1dfb      	adds	r3, r7, #7
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	2125      	movs	r1, #37	@ 0x25
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 fb62 	bl	80014e8 <ACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LIS3DSH_BOOT_FORCED;
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG6 register */
  ACCELERO_IO_Write(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 8000e2e:	1dfb      	adds	r3, r7, #7
 8000e30:	2201      	movs	r2, #1
 8000e32:	2125      	movs	r1, #37	@ 0x25
 8000e34:	4618      	mov	r0, r3
 8000e36:	f000 fb25 	bl	8001484 <ACCELERO_IO_Write>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <LIS3DSH_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit representation).
  * @param  pointer on floating buffer.
  * @retval None
  */
void LIS3DSH_ReadACC(int16_t *pData)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b088      	sub	sp, #32
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  int8_t buffer[6];
  uint8_t crtl, i = 0x00;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8000e50:	4b64      	ldr	r3, [pc, #400]	@ (8000fe4 <LIS3DSH_ReadACC+0x1a0>)
 8000e52:	61bb      	str	r3, [r7, #24]
  float valueinfloat = 0;
 8000e54:	f04f 0300 	mov.w	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  
  ACCELERO_IO_Read(&crtl, LIS3DSH_CTRL_REG5_ADDR, 1);  
 8000e5a:	f107 030b 	add.w	r3, r7, #11
 8000e5e:	2201      	movs	r2, #1
 8000e60:	2124      	movs	r1, #36	@ 0x24
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 fb40 	bl	80014e8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[0], LIS3DSH_OUT_X_L_ADDR, 1);
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	2128      	movs	r1, #40	@ 0x28
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 fb39 	bl	80014e8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[1], LIS3DSH_OUT_X_H_ADDR, 1);
 8000e76:	f107 030c 	add.w	r3, r7, #12
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	2129      	movs	r1, #41	@ 0x29
 8000e80:	4618      	mov	r0, r3
 8000e82:	f000 fb31 	bl	80014e8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[2], LIS3DSH_OUT_Y_L_ADDR, 1);
 8000e86:	f107 030c 	add.w	r3, r7, #12
 8000e8a:	3302      	adds	r3, #2
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	212a      	movs	r1, #42	@ 0x2a
 8000e90:	4618      	mov	r0, r3
 8000e92:	f000 fb29 	bl	80014e8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[3], LIS3DSH_OUT_Y_H_ADDR, 1);
 8000e96:	f107 030c 	add.w	r3, r7, #12
 8000e9a:	3303      	adds	r3, #3
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	212b      	movs	r1, #43	@ 0x2b
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 fb21 	bl	80014e8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[4], LIS3DSH_OUT_Z_L_ADDR, 1);
 8000ea6:	f107 030c 	add.w	r3, r7, #12
 8000eaa:	3304      	adds	r3, #4
 8000eac:	2201      	movs	r2, #1
 8000eae:	212c      	movs	r1, #44	@ 0x2c
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f000 fb19 	bl	80014e8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[5], LIS3DSH_OUT_Z_H_ADDR, 1);
 8000eb6:	f107 030c 	add.w	r3, r7, #12
 8000eba:	3305      	adds	r3, #5
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	212d      	movs	r1, #45	@ 0x2d
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f000 fb11 	bl	80014e8 <ACCELERO_IO_Read>
  
  switch(crtl & LIS3DSH__FULLSCALE_SELECTION) 
 8000ec6:	7afb      	ldrb	r3, [r7, #11]
 8000ec8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000ecc:	2b20      	cmp	r3, #32
 8000ece:	d854      	bhi.n	8000f7a <LIS3DSH_ReadACC+0x136>
 8000ed0:	a201      	add	r2, pc, #4	@ (adr r2, 8000ed8 <LIS3DSH_ReadACC+0x94>)
 8000ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed6:	bf00      	nop
 8000ed8:	08000f5d 	.word	0x08000f5d
 8000edc:	08000f7b 	.word	0x08000f7b
 8000ee0:	08000f7b 	.word	0x08000f7b
 8000ee4:	08000f7b 	.word	0x08000f7b
 8000ee8:	08000f7b 	.word	0x08000f7b
 8000eec:	08000f7b 	.word	0x08000f7b
 8000ef0:	08000f7b 	.word	0x08000f7b
 8000ef4:	08000f7b 	.word	0x08000f7b
 8000ef8:	08000f63 	.word	0x08000f63
 8000efc:	08000f7b 	.word	0x08000f7b
 8000f00:	08000f7b 	.word	0x08000f7b
 8000f04:	08000f7b 	.word	0x08000f7b
 8000f08:	08000f7b 	.word	0x08000f7b
 8000f0c:	08000f7b 	.word	0x08000f7b
 8000f10:	08000f7b 	.word	0x08000f7b
 8000f14:	08000f7b 	.word	0x08000f7b
 8000f18:	08000f69 	.word	0x08000f69
 8000f1c:	08000f7b 	.word	0x08000f7b
 8000f20:	08000f7b 	.word	0x08000f7b
 8000f24:	08000f7b 	.word	0x08000f7b
 8000f28:	08000f7b 	.word	0x08000f7b
 8000f2c:	08000f7b 	.word	0x08000f7b
 8000f30:	08000f7b 	.word	0x08000f7b
 8000f34:	08000f7b 	.word	0x08000f7b
 8000f38:	08000f6f 	.word	0x08000f6f
 8000f3c:	08000f7b 	.word	0x08000f7b
 8000f40:	08000f7b 	.word	0x08000f7b
 8000f44:	08000f7b 	.word	0x08000f7b
 8000f48:	08000f7b 	.word	0x08000f7b
 8000f4c:	08000f7b 	.word	0x08000f7b
 8000f50:	08000f7b 	.word	0x08000f7b
 8000f54:	08000f7b 	.word	0x08000f7b
 8000f58:	08000f75 	.word	0x08000f75
  {
    /* FS bit = 000 ==> Sensitivity typical value = 0.06milligals/digit */ 
  case LIS3DSH_FULLSCALE_2:
    sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8000f5c:	4b21      	ldr	r3, [pc, #132]	@ (8000fe4 <LIS3DSH_ReadACC+0x1a0>)
 8000f5e:	61bb      	str	r3, [r7, #24]
    break;
 8000f60:	e00c      	b.n	8000f7c <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 001 ==> Sensitivity typical value = 0.12milligals/digit */ 
  case LIS3DSH_FULLSCALE_4:
    sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8000f62:	4b21      	ldr	r3, [pc, #132]	@ (8000fe8 <LIS3DSH_ReadACC+0x1a4>)
 8000f64:	61bb      	str	r3, [r7, #24]
    break;
 8000f66:	e009      	b.n	8000f7c <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 010 ==> Sensitivity typical value = 0.18milligals/digit */ 
  case LIS3DSH_FULLSCALE_6:
    sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 8000f68:	4b20      	ldr	r3, [pc, #128]	@ (8000fec <LIS3DSH_ReadACC+0x1a8>)
 8000f6a:	61bb      	str	r3, [r7, #24]
    break;
 8000f6c:	e006      	b.n	8000f7c <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 011 ==> Sensitivity typical value = 0.24milligals/digit */ 
  case LIS3DSH_FULLSCALE_8:
    sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8000f6e:	4b20      	ldr	r3, [pc, #128]	@ (8000ff0 <LIS3DSH_ReadACC+0x1ac>)
 8000f70:	61bb      	str	r3, [r7, #24]
    break;
 8000f72:	e003      	b.n	8000f7c <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 100 ==> Sensitivity typical value = 0.73milligals/digit */ 
  case LIS3DSH_FULLSCALE_16:
    sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 8000f74:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff4 <LIS3DSH_ReadACC+0x1b0>)
 8000f76:	61bb      	str	r3, [r7, #24]
    break;
 8000f78:	e000      	b.n	8000f7c <LIS3DSH_ReadACC+0x138>
    
  default:
    break;
 8000f7a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	77fb      	strb	r3, [r7, #31]
 8000f80:	e027      	b.n	8000fd2 <LIS3DSH_ReadACC+0x18e>
  {
    valueinfloat = ((buffer[2*i+1] << 8) + buffer[2*i]) * sensitivity;
 8000f82:	7ffb      	ldrb	r3, [r7, #31]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	3301      	adds	r3, #1
 8000f88:	3320      	adds	r3, #32
 8000f8a:	443b      	add	r3, r7
 8000f8c:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000f90:	021b      	lsls	r3, r3, #8
 8000f92:	7ffa      	ldrb	r2, [r7, #31]
 8000f94:	0052      	lsls	r2, r2, #1
 8000f96:	3220      	adds	r2, #32
 8000f98:	443a      	add	r2, r7
 8000f9a:	f912 2c14 	ldrsb.w	r2, [r2, #-20]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	ee07 3a90 	vmov	s15, r3
 8000fa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fa8:	ed97 7a06 	vldr	s14, [r7, #24]
 8000fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fb0:	edc7 7a05 	vstr	s15, [r7, #20]
    pData[i] = (int16_t)valueinfloat;
 8000fb4:	7ffb      	ldrb	r3, [r7, #31]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	4413      	add	r3, r2
 8000fbc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fc4:	ee17 2a90 	vmov	r2, s15
 8000fc8:	b212      	sxth	r2, r2
 8000fca:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000fcc:	7ffb      	ldrb	r3, [r7, #31]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	77fb      	strb	r3, [r7, #31]
 8000fd2:	7ffb      	ldrb	r3, [r7, #31]
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d9d4      	bls.n	8000f82 <LIS3DSH_ReadACC+0x13e>
  }
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	3720      	adds	r7, #32
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	3d75c28f 	.word	0x3d75c28f
 8000fe8:	3df5c28f 	.word	0x3df5c28f
 8000fec:	3e3851ec 	.word	0x3e3851ec
 8000ff0:	3e75c28f 	.word	0x3e75c28f
 8000ff4:	3f3ae148 	.word	0x3f3ae148

08000ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ffe:	f000 fc35 	bl	800186c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001002:	f000 f837 	bl	8001074 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001006:	f7ff faab 	bl	8000560 <MX_GPIO_Init>
  MX_I2C1_Init();
 800100a:	f7ff fba7 	bl	800075c <MX_I2C1_Init>
  MX_I2S3_Init();
 800100e:	f7ff fc1b 	bl	8000848 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001012:	f000 f89f 	bl	8001154 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  if(BSP_ACCELERO_Init() != ACCELERO_OK){
 8001016:	f000 faa1 	bl	800155c <BSP_ACCELERO_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d009      	beq.n	8001034 <main+0x3c>
	while(1){
		HAL_GPIO_ReadPin(LD4_GPIO_Port, LD4_Pin);
 8001020:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001024:	480f      	ldr	r0, [pc, #60]	@ (8001064 <main+0x6c>)
 8001026:	f001 f861 	bl	80020ec <HAL_GPIO_ReadPin>
		HAL_Delay(100);
 800102a:	2064      	movs	r0, #100	@ 0x64
 800102c:	f000 fc90 	bl	8001950 <HAL_Delay>
		HAL_GPIO_ReadPin(LD4_GPIO_Port, LD4_Pin);
 8001030:	bf00      	nop
 8001032:	e7f5      	b.n	8001020 <main+0x28>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BSP_ACCELERO_GetXYZ(accData);
 8001034:	480c      	ldr	r0, [pc, #48]	@ (8001068 <main+0x70>)
 8001036:	f000 fb1d 	bl	8001674 <BSP_ACCELERO_GetXYZ>

	  sprintf(strTemp, "ACC X:%d, ACC Y: %d, ACC Z: %d\r\n",accData[0],accData[1],accData[2]);
 800103a:	4b0b      	ldr	r3, [pc, #44]	@ (8001068 <main+0x70>)
 800103c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001040:	461a      	mov	r2, r3
 8001042:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <main+0x70>)
 8001044:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001048:	4619      	mov	r1, r3
 800104a:	4b07      	ldr	r3, [pc, #28]	@ (8001068 <main+0x70>)
 800104c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	460b      	mov	r3, r1
 8001054:	4905      	ldr	r1, [pc, #20]	@ (800106c <main+0x74>)
 8001056:	4806      	ldr	r0, [pc, #24]	@ (8001070 <main+0x78>)
 8001058:	f006 fa8e 	bl	8007578 <siprintf>
		  HAL_Delay(10);
		  while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){};
		  HAL_Delay(10);
	  }
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);*/
	  HAL_Delay(100);
 800105c:	2064      	movs	r0, #100	@ 0x64
 800105e:	f000 fc77 	bl	8001950 <HAL_Delay>
	  BSP_ACCELERO_GetXYZ(accData);
 8001062:	e7e7      	b.n	8001034 <main+0x3c>
 8001064:	40020c00 	.word	0x40020c00
 8001068:	20000184 	.word	0x20000184
 800106c:	08007d74 	.word	0x08007d74
 8001070:	2000018c 	.word	0x2000018c

08001074 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b094      	sub	sp, #80	@ 0x50
 8001078:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107a:	f107 0320 	add.w	r3, r7, #32
 800107e:	2230      	movs	r2, #48	@ 0x30
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f006 fa98 	bl	80075b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001098:	2300      	movs	r3, #0
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	4b28      	ldr	r3, [pc, #160]	@ (8001140 <SystemClock_Config+0xcc>)
 800109e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a0:	4a27      	ldr	r2, [pc, #156]	@ (8001140 <SystemClock_Config+0xcc>)
 80010a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80010a8:	4b25      	ldr	r3, [pc, #148]	@ (8001140 <SystemClock_Config+0xcc>)
 80010aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b4:	2300      	movs	r3, #0
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	4b22      	ldr	r3, [pc, #136]	@ (8001144 <SystemClock_Config+0xd0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a21      	ldr	r2, [pc, #132]	@ (8001144 <SystemClock_Config+0xd0>)
 80010be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001144 <SystemClock_Config+0xd0>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010d0:	2301      	movs	r3, #1
 80010d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010da:	2302      	movs	r3, #2
 80010dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010e4:	2308      	movs	r3, #8
 80010e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010e8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80010ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ee:	2302      	movs	r3, #2
 80010f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010f2:	2307      	movs	r3, #7
 80010f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f6:	f107 0320 	add.w	r3, r7, #32
 80010fa:	4618      	mov	r0, r3
 80010fc:	f003 fbb2 	bl	8004864 <HAL_RCC_OscConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001106:	f000 f81f 	bl	8001148 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110a:	230f      	movs	r3, #15
 800110c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800110e:	2302      	movs	r3, #2
 8001110:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001116:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800111a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800111c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001120:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	2105      	movs	r1, #5
 8001128:	4618      	mov	r0, r3
 800112a:	f003 fe13 	bl	8004d54 <HAL_RCC_ClockConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001134:	f000 f808 	bl	8001148 <Error_Handler>
  }
}
 8001138:	bf00      	nop
 800113a:	3750      	adds	r7, #80	@ 0x50
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40023800 	.word	0x40023800
 8001144:	40007000 	.word	0x40007000

08001148 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800114c:	b672      	cpsid	i
}
 800114e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <Error_Handler+0x8>

08001154 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001158:	4b17      	ldr	r3, [pc, #92]	@ (80011b8 <MX_SPI1_Init+0x64>)
 800115a:	4a18      	ldr	r2, [pc, #96]	@ (80011bc <MX_SPI1_Init+0x68>)
 800115c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800115e:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <MX_SPI1_Init+0x64>)
 8001160:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001164:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001166:	4b14      	ldr	r3, [pc, #80]	@ (80011b8 <MX_SPI1_Init+0x64>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800116c:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <MX_SPI1_Init+0x64>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001172:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <MX_SPI1_Init+0x64>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001178:	4b0f      	ldr	r3, [pc, #60]	@ (80011b8 <MX_SPI1_Init+0x64>)
 800117a:	2200      	movs	r2, #0
 800117c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800117e:	4b0e      	ldr	r3, [pc, #56]	@ (80011b8 <MX_SPI1_Init+0x64>)
 8001180:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001184:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001186:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <MX_SPI1_Init+0x64>)
 8001188:	2200      	movs	r2, #0
 800118a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800118c:	4b0a      	ldr	r3, [pc, #40]	@ (80011b8 <MX_SPI1_Init+0x64>)
 800118e:	2200      	movs	r2, #0
 8001190:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001192:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <MX_SPI1_Init+0x64>)
 8001194:	2200      	movs	r2, #0
 8001196:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001198:	4b07      	ldr	r3, [pc, #28]	@ (80011b8 <MX_SPI1_Init+0x64>)
 800119a:	2200      	movs	r2, #0
 800119c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800119e:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <MX_SPI1_Init+0x64>)
 80011a0:	220a      	movs	r2, #10
 80011a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011a4:	4804      	ldr	r0, [pc, #16]	@ (80011b8 <MX_SPI1_Init+0x64>)
 80011a6:	f004 f923 	bl	80053f0 <HAL_SPI_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011b0:	f7ff ffca 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	200001f0 	.word	0x200001f0
 80011bc:	40013000 	.word	0x40013000

080011c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	@ 0x28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a19      	ldr	r2, [pc, #100]	@ (8001244 <HAL_SPI_MspInit+0x84>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d12b      	bne.n	800123a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	4b18      	ldr	r3, [pc, #96]	@ (8001248 <HAL_SPI_MspInit+0x88>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ea:	4a17      	ldr	r2, [pc, #92]	@ (8001248 <HAL_SPI_MspInit+0x88>)
 80011ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011f2:	4b15      	ldr	r3, [pc, #84]	@ (8001248 <HAL_SPI_MspInit+0x88>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <HAL_SPI_MspInit+0x88>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	4a10      	ldr	r2, [pc, #64]	@ (8001248 <HAL_SPI_MspInit+0x88>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6313      	str	r3, [r2, #48]	@ 0x30
 800120e:	4b0e      	ldr	r3, [pc, #56]	@ (8001248 <HAL_SPI_MspInit+0x88>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800121a:	23e0      	movs	r3, #224	@ 0xe0
 800121c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800122a:	2305      	movs	r3, #5
 800122c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	4805      	ldr	r0, [pc, #20]	@ (800124c <HAL_SPI_MspInit+0x8c>)
 8001236:	f000 fcc1 	bl	8001bbc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800123a:	bf00      	nop
 800123c:	3728      	adds	r7, #40	@ 0x28
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40013000 	.word	0x40013000
 8001248:	40023800 	.word	0x40023800
 800124c:	40020000 	.word	0x40020000

08001250 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a08      	ldr	r2, [pc, #32]	@ (8001280 <HAL_SPI_MspDeInit+0x30>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d109      	bne.n	8001276 <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001262:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <HAL_SPI_MspDeInit+0x34>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001266:	4a07      	ldr	r2, [pc, #28]	@ (8001284 <HAL_SPI_MspDeInit+0x34>)
 8001268:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800126c:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin);
 800126e:	21e0      	movs	r1, #224	@ 0xe0
 8001270:	4805      	ldr	r0, [pc, #20]	@ (8001288 <HAL_SPI_MspDeInit+0x38>)
 8001272:	f000 fe3f 	bl	8001ef4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40013000 	.word	0x40013000
 8001284:	40023800 	.word	0x40023800
 8001288:	40020000 	.word	0x40020000

0800128c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001290:	4819      	ldr	r0, [pc, #100]	@ (80012f8 <SPIx_Init+0x6c>)
 8001292:	f004 fb07 	bl	80058a4 <HAL_SPI_GetState>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d12a      	bne.n	80012f2 <SPIx_Init+0x66>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 800129c:	4b16      	ldr	r3, [pc, #88]	@ (80012f8 <SPIx_Init+0x6c>)
 800129e:	4a17      	ldr	r2, [pc, #92]	@ (80012fc <SPIx_Init+0x70>)
 80012a0:	601a      	str	r2, [r3, #0]
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012a2:	4b15      	ldr	r3, [pc, #84]	@ (80012f8 <SPIx_Init+0x6c>)
 80012a4:	2218      	movs	r2, #24
 80012a6:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 80012a8:	4b13      	ldr	r3, [pc, #76]	@ (80012f8 <SPIx_Init+0x6c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012ae:	4b12      	ldr	r3, [pc, #72]	@ (80012f8 <SPIx_Init+0x6c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012b4:	4b10      	ldr	r3, [pc, #64]	@ (80012f8 <SPIx_Init+0x6c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80012ba:	4b0f      	ldr	r3, [pc, #60]	@ (80012f8 <SPIx_Init+0x6c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 80012c0:	4b0d      	ldr	r3, [pc, #52]	@ (80012f8 <SPIx_Init+0x6c>)
 80012c2:	2207      	movs	r2, #7
 80012c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 80012c6:	4b0c      	ldr	r3, [pc, #48]	@ (80012f8 <SPIx_Init+0x6c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012cc:	4b0a      	ldr	r3, [pc, #40]	@ (80012f8 <SPIx_Init+0x6c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 80012d2:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <SPIx_Init+0x6c>)
 80012d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012d8:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 80012da:	4b07      	ldr	r3, [pc, #28]	@ (80012f8 <SPIx_Init+0x6c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 80012e0:	4b05      	ldr	r3, [pc, #20]	@ (80012f8 <SPIx_Init+0x6c>)
 80012e2:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012e6:	605a      	str	r2, [r3, #4]

    SPIx_MspInit();
 80012e8:	f000 f836 	bl	8001358 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80012ec:	4802      	ldr	r0, [pc, #8]	@ (80012f8 <SPIx_Init+0x6c>)
 80012ee:	f004 f87f 	bl	80053f0 <HAL_SPI_Init>
  }
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000248 	.word	0x20000248
 80012fc:	40013000 	.word	0x40013000

08001300 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af02      	add	r7, sp, #8
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800130e:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <SPIx_WriteRead+0x38>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f107 020f 	add.w	r2, r7, #15
 8001316:	1df9      	adds	r1, r7, #7
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2301      	movs	r3, #1
 800131c:	4807      	ldr	r0, [pc, #28]	@ (800133c <SPIx_WriteRead+0x3c>)
 800131e:	f004 f918 	bl	8005552 <HAL_SPI_TransmitReceive>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8001328:	f000 f80a 	bl	8001340 <SPIx_Error>
  }
  
  return receivedbyte;
 800132c:	7bfb      	ldrb	r3, [r7, #15]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000068 	.word	0x20000068
 800133c:	20000248 	.word	0x20000248

08001340 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication bus */
  HAL_SPI_DeInit(&SpiHandle);
 8001344:	4803      	ldr	r0, [pc, #12]	@ (8001354 <SPIx_Error+0x14>)
 8001346:	f004 f8dc 	bl	8005502 <HAL_SPI_DeInit>
  
  /* Re-Initialize the SPI communication bus */
  SPIx_Init();
 800134a:	f7ff ff9f 	bl	800128c <SPIx_Init>
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000248 	.word	0x20000248

08001358 <SPIx_MspInit>:

/**
  * @brief  SPI MSP Init.
  */
static void SPIx_MspInit(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable the SPI peripheral */
  DISCOVERY_SPIx_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	4b17      	ldr	r3, [pc, #92]	@ (80013c0 <SPIx_MspInit+0x68>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001366:	4a16      	ldr	r2, [pc, #88]	@ (80013c0 <SPIx_MspInit+0x68>)
 8001368:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800136c:	6453      	str	r3, [r2, #68]	@ 0x44
 800136e:	4b14      	ldr	r3, [pc, #80]	@ (80013c0 <SPIx_MspInit+0x68>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001372:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
  
  /* Enable SCK, MOSI and MISO GPIO clocks */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <SPIx_MspInit+0x68>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	4a0f      	ldr	r2, [pc, #60]	@ (80013c0 <SPIx_MspInit+0x68>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6313      	str	r3, [r2, #48]	@ 0x30
 800138a:	4b0d      	ldr	r3, [pc, #52]	@ (80013c0 <SPIx_MspInit+0x68>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
  
  /* SPI SCK, MOSI, MISO pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MISO_PIN | DISCOVERY_SPIx_MOSI_PIN);
 8001396:	23e0      	movs	r3, #224	@ 0xe0
 8001398:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
 800139e:	2302      	movs	r3, #2
 80013a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 80013a2:	2301      	movs	r3, #1
 80013a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80013a6:	2305      	movs	r3, #5
 80013a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 80013aa:	f107 030c 	add.w	r3, r7, #12
 80013ae:	4619      	mov	r1, r3
 80013b0:	4804      	ldr	r0, [pc, #16]	@ (80013c4 <SPIx_MspInit+0x6c>)
 80013b2:	f000 fc03 	bl	8001bbc <HAL_GPIO_Init>
}
 80013b6:	bf00      	nop
 80013b8:	3720      	adds	r7, #32
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020000 	.word	0x40020000

080013c8 <ACCELERO_IO_Init>:

/**
  * @brief  Configures the Accelerometer SPI interface.
  */
void ACCELERO_IO_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Accelerometer Control pins --------------------------------*/
  /* Enable CS GPIO clock and configure GPIO pin for Accelerometer Chip select */  
  ACCELERO_CS_GPIO_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	603b      	str	r3, [r7, #0]
 80013d2:	4b12      	ldr	r3, [pc, #72]	@ (800141c <ACCELERO_IO_Init+0x54>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	4a11      	ldr	r2, [pc, #68]	@ (800141c <ACCELERO_IO_Init+0x54>)
 80013d8:	f043 0310 	orr.w	r3, r3, #16
 80013dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013de:	4b0f      	ldr	r3, [pc, #60]	@ (800141c <ACCELERO_IO_Init+0x54>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	f003 0310 	and.w	r3, r3, #16
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PIN for LIS Chip select */
  GPIO_InitStructure.Pin = ACCELERO_CS_PIN;
 80013ea:	2308      	movs	r3, #8
 80013ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80013ee:	2301      	movs	r3, #1
 80013f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 80013f6:	2301      	movs	r3, #1
 80013f8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	4619      	mov	r1, r3
 80013fe:	4808      	ldr	r0, [pc, #32]	@ (8001420 <ACCELERO_IO_Init+0x58>)
 8001400:	f000 fbdc 	bl	8001bbc <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  ACCELERO_CS_HIGH();
 8001404:	2201      	movs	r2, #1
 8001406:	2108      	movs	r1, #8
 8001408:	4805      	ldr	r0, [pc, #20]	@ (8001420 <ACCELERO_IO_Init+0x58>)
 800140a:	f000 fe87 	bl	800211c <HAL_GPIO_WritePin>
  
  SPIx_Init();
 800140e:	f7ff ff3d 	bl	800128c <SPIx_Init>
}
 8001412:	bf00      	nop
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800
 8001420:	40021000 	.word	0x40021000

08001424 <ACCELERO_IO_ITConfig>:
/**
  * @brief  Configures the Accelerometer INT2.
  *         EXTI0 is already used by user button so INT1 is not configured here.
  */
void ACCELERO_IO_ITConfig(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT2 GPIO clock and configure GPIO PINs to detect Interrupts */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	603b      	str	r3, [r7, #0]
 800142e:	4b13      	ldr	r3, [pc, #76]	@ (800147c <ACCELERO_IO_ITConfig+0x58>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	4a12      	ldr	r2, [pc, #72]	@ (800147c <ACCELERO_IO_ITConfig+0x58>)
 8001434:	f043 0310 	orr.w	r3, r3, #16
 8001438:	6313      	str	r3, [r2, #48]	@ 0x30
 800143a:	4b10      	ldr	r3, [pc, #64]	@ (800147c <ACCELERO_IO_ITConfig+0x58>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	f003 0310 	and.w	r3, r3, #16
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT2_PIN;
 8001446:	2302      	movs	r3, #2
 8001448:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800144a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800144e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001450:	2302      	movs	r3, #2
 8001452:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	4619      	mov	r1, r3
 800145c:	4808      	ldr	r0, [pc, #32]	@ (8001480 <ACCELERO_IO_ITConfig+0x5c>)
 800145e:	f000 fbad 	bl	8001bbc <HAL_GPIO_Init>
  
  /* Enable and set Accelerometer INT2 to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)ACCELERO_INT2_EXTI_IRQn, 0x0F, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	210f      	movs	r1, #15
 8001466:	2007      	movs	r0, #7
 8001468:	f000 fb71 	bl	8001b4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)ACCELERO_INT2_EXTI_IRQn);
 800146c:	2007      	movs	r0, #7
 800146e:	f000 fb8a 	bl	8001b86 <HAL_NVIC_EnableIRQ>
}
 8001472:	bf00      	nop
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800
 8001480:	40021000 	.word	0x40021000

08001484 <ACCELERO_IO_Write>:
  * @param  pBuffer: pointer to the buffer containing the data to be written to the Accelerometer.
  * @param  WriteAddr: Accelerometer's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void ACCELERO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	70fb      	strb	r3, [r7, #3]
 8001490:	4613      	mov	r3, r2
 8001492:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
     - When 0, the address will remain unchanged in multiple read/write commands.
     - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8001494:	883b      	ldrh	r3, [r7, #0]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d903      	bls.n	80014a2 <ACCELERO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800149a:	78fb      	ldrb	r3, [r7, #3]
 800149c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014a0:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  ACCELERO_CS_LOW();
 80014a2:	2200      	movs	r2, #0
 80014a4:	2108      	movs	r1, #8
 80014a6:	480f      	ldr	r0, [pc, #60]	@ (80014e4 <ACCELERO_IO_Write+0x60>)
 80014a8:	f000 fe38 	bl	800211c <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 80014ac:	78fb      	ldrb	r3, [r7, #3]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ff26 	bl	8001300 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 80014b4:	e00a      	b.n	80014cc <ACCELERO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ff20 	bl	8001300 <SPIx_WriteRead>
    NumByteToWrite--;
 80014c0:	883b      	ldrh	r3, [r7, #0]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3301      	adds	r3, #1
 80014ca:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 80014cc:	883b      	ldrh	r3, [r7, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f1      	bne.n	80014b6 <ACCELERO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  ACCELERO_CS_HIGH();
 80014d2:	2201      	movs	r2, #1
 80014d4:	2108      	movs	r1, #8
 80014d6:	4803      	ldr	r0, [pc, #12]	@ (80014e4 <ACCELERO_IO_Write+0x60>)
 80014d8:	f000 fe20 	bl	800211c <HAL_GPIO_WritePin>
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40021000 	.word	0x40021000

080014e8 <ACCELERO_IO_Read>:
  * @param  pBuffer: pointer to the buffer that receives the data read from the Accelerometer.
  * @param  ReadAddr: Accelerometer's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the Accelerometer.
  */
void ACCELERO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	70fb      	strb	r3, [r7, #3]
 80014f4:	4613      	mov	r3, r2
 80014f6:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 80014f8:	883b      	ldrh	r3, [r7, #0]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d904      	bls.n	8001508 <ACCELERO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 80014fe:	78fb      	ldrb	r3, [r7, #3]
 8001500:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8001504:	70fb      	strb	r3, [r7, #3]
 8001506:	e003      	b.n	8001510 <ACCELERO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800150e:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  ACCELERO_CS_LOW();
 8001510:	2200      	movs	r2, #0
 8001512:	2108      	movs	r1, #8
 8001514:	4810      	ldr	r0, [pc, #64]	@ (8001558 <ACCELERO_IO_Read+0x70>)
 8001516:	f000 fe01 	bl	800211c <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 800151a:	78fb      	ldrb	r3, [r7, #3]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff feef 	bl	8001300 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8001522:	e00c      	b.n	800153e <ACCELERO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to ACCELEROMETER (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8001524:	2000      	movs	r0, #0
 8001526:	f7ff feeb 	bl	8001300 <SPIx_WriteRead>
 800152a:	4603      	mov	r3, r0
 800152c:	461a      	mov	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8001532:	883b      	ldrh	r3, [r7, #0]
 8001534:	3b01      	subs	r3, #1
 8001536:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3301      	adds	r3, #1
 800153c:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 800153e:	883b      	ldrh	r3, [r7, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1ef      	bne.n	8001524 <ACCELERO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  ACCELERO_CS_HIGH();
 8001544:	2201      	movs	r2, #1
 8001546:	2108      	movs	r1, #8
 8001548:	4803      	ldr	r0, [pc, #12]	@ (8001558 <ACCELERO_IO_Read+0x70>)
 800154a:	f000 fde7 	bl	800211c <HAL_GPIO_WritePin>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000

0800155c <BSP_ACCELERO_Init>:
/**
  * @brief  Setx Accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{ 
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 8001566:	2300      	movs	r3, #0
 8001568:	82bb      	strh	r3, [r7, #20]
  LIS302DL_InitTypeDef         lis302dl_initstruct;
  LIS302DL_FilterConfigTypeDef lis302dl_filter = {0,0,0};
 800156a:	2300      	movs	r3, #0
 800156c:	723b      	strb	r3, [r7, #8]
 800156e:	2300      	movs	r3, #0
 8001570:	727b      	strb	r3, [r7, #9]
 8001572:	2300      	movs	r3, #0
 8001574:	72bb      	strb	r3, [r7, #10]
  LIS3DSH_InitTypeDef          l1s3dsh_InitStruct;

  if(Lis302dlDrv.ReadID() == I_AM_LIS302DL)
 8001576:	4b3c      	ldr	r3, [pc, #240]	@ (8001668 <BSP_ACCELERO_Init+0x10c>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	4798      	blx	r3
 800157c:	4603      	mov	r3, r0
 800157e:	2b3b      	cmp	r3, #59	@ 0x3b
 8001580:	d138      	bne.n	80015f4 <BSP_ACCELERO_Init+0x98>
  {
    /* Initialize the accelerometer driver structure */
    AcceleroDrv = &Lis302dlDrv;
 8001582:	4b3a      	ldr	r3, [pc, #232]	@ (800166c <BSP_ACCELERO_Init+0x110>)
 8001584:	4a38      	ldr	r2, [pc, #224]	@ (8001668 <BSP_ACCELERO_Init+0x10c>)
 8001586:	601a      	str	r2, [r3, #0]

    /* Set configuration of LIS302DL MEMS Accelerometer *********************/
    lis302dl_initstruct.Power_Mode = LIS302DL_LOWPOWERMODE_ACTIVE;
 8001588:	2340      	movs	r3, #64	@ 0x40
 800158a:	733b      	strb	r3, [r7, #12]
    lis302dl_initstruct.Output_DataRate = LIS302DL_DATARATE_100;
 800158c:	2300      	movs	r3, #0
 800158e:	737b      	strb	r3, [r7, #13]
    lis302dl_initstruct.Axes_Enable = LIS302DL_XYZ_ENABLE;
 8001590:	2307      	movs	r3, #7
 8001592:	73bb      	strb	r3, [r7, #14]
    lis302dl_initstruct.Full_Scale = LIS302DL_FULLSCALE_2_3;
 8001594:	2300      	movs	r3, #0
 8001596:	73fb      	strb	r3, [r7, #15]
    lis302dl_initstruct.Self_Test = LIS302DL_SELFTEST_NORMAL;
 8001598:	2300      	movs	r3, #0
 800159a:	743b      	strb	r3, [r7, #16]
    
    /* Configure MEMS: data rate, power mode, full scale, self test and axes */
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 800159c:	7b7a      	ldrb	r2, [r7, #13]
 800159e:	7b3b      	ldrb	r3, [r7, #12]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	b2da      	uxtb	r2, r3
                       lis302dl_initstruct.Full_Scale | lis302dl_initstruct.Self_Test | \
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 80015a6:	4313      	orrs	r3, r2
 80015a8:	b2da      	uxtb	r2, r3
                       lis302dl_initstruct.Full_Scale | lis302dl_initstruct.Self_Test | \
 80015aa:	7c3b      	ldrb	r3, [r7, #16]
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 80015ac:	4313      	orrs	r3, r2
 80015ae:	b2da      	uxtb	r2, r3
                       lis302dl_initstruct.Axes_Enable);
 80015b0:	7bbb      	ldrb	r3, [r7, #14]
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 80015b2:	4313      	orrs	r3, r2
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	82bb      	strh	r3, [r7, #20]
    
    /* Configure the accelerometer main parameters */
    AcceleroDrv->Init(ctrl);
 80015b8:	4b2c      	ldr	r3, [pc, #176]	@ (800166c <BSP_ACCELERO_Init+0x110>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	8aba      	ldrh	r2, [r7, #20]
 80015c0:	4610      	mov	r0, r2
 80015c2:	4798      	blx	r3
    
    /* MEMS High Pass Filter configuration */
    lis302dl_filter.HighPassFilter_Data_Selection = LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER;
 80015c4:	2320      	movs	r3, #32
 80015c6:	723b      	strb	r3, [r7, #8]
    lis302dl_filter.HighPassFilter_CutOff_Frequency = LIS302DL_HIGHPASSFILTER_LEVEL_1;
 80015c8:	2301      	movs	r3, #1
 80015ca:	727b      	strb	r3, [r7, #9]
    lis302dl_filter.HighPassFilter_Interrupt = LIS302DL_HIGHPASSFILTERINTERRUPT_1_2;
 80015cc:	230c      	movs	r3, #12
 80015ce:	72bb      	strb	r3, [r7, #10]
    
    /* Configure MEMS high pass filter cut-off level, interrupt and data selection bits */                     
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
 80015d0:	7a3a      	ldrb	r2, [r7, #8]
                     lis302dl_filter.HighPassFilter_CutOff_Frequency | \
 80015d2:	7a7b      	ldrb	r3, [r7, #9]
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
 80015d4:	4313      	orrs	r3, r2
 80015d6:	b2da      	uxtb	r2, r3
                     lis302dl_filter.HighPassFilter_Interrupt);
 80015d8:	7abb      	ldrb	r3, [r7, #10]
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
 80015da:	4313      	orrs	r3, r2
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AcceleroDrv->FilterConfig(ctrl);
 80015e0:	4b22      	ldr	r3, [pc, #136]	@ (800166c <BSP_ACCELERO_Init+0x110>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015e6:	8aba      	ldrh	r2, [r7, #20]
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	4610      	mov	r0, r2
 80015ec:	4798      	blx	r3

    ret = ACCELERO_OK;
 80015ee:	2300      	movs	r3, #0
 80015f0:	75fb      	strb	r3, [r7, #23]
 80015f2:	e033      	b.n	800165c <BSP_ACCELERO_Init+0x100>
  }
  else if(Lis3dshDrv.ReadID() == I_AM_LIS3DSH)
 80015f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001670 <BSP_ACCELERO_Init+0x114>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	4798      	blx	r3
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80015fe:	d12b      	bne.n	8001658 <BSP_ACCELERO_Init+0xfc>
  {
    /* Initialize the accelerometer driver structure */
    AcceleroDrv = &Lis3dshDrv;
 8001600:	4b1a      	ldr	r3, [pc, #104]	@ (800166c <BSP_ACCELERO_Init+0x110>)
 8001602:	4a1b      	ldr	r2, [pc, #108]	@ (8001670 <BSP_ACCELERO_Init+0x114>)
 8001604:	601a      	str	r2, [r3, #0]

    /* Set configuration of LIS3DSH MEMS Accelerometer **********************/
    l1s3dsh_InitStruct.Output_DataRate = LIS3DSH_DATARATE_100;
 8001606:	2360      	movs	r3, #96	@ 0x60
 8001608:	703b      	strb	r3, [r7, #0]
    l1s3dsh_InitStruct.Axes_Enable = LIS3DSH_XYZ_ENABLE;
 800160a:	2307      	movs	r3, #7
 800160c:	707b      	strb	r3, [r7, #1]
    l1s3dsh_InitStruct.SPI_Wire = LIS3DSH_SERIALINTERFACE_4WIRE;
 800160e:	2300      	movs	r3, #0
 8001610:	70bb      	strb	r3, [r7, #2]
    l1s3dsh_InitStruct.Self_Test = LIS3DSH_SELFTEST_NORMAL;
 8001612:	2300      	movs	r3, #0
 8001614:	70fb      	strb	r3, [r7, #3]
    l1s3dsh_InitStruct.Full_Scale = LIS3DSH_FULLSCALE_2;
 8001616:	2300      	movs	r3, #0
 8001618:	713b      	strb	r3, [r7, #4]
    l1s3dsh_InitStruct.Filter_BW = LIS3DSH_FILTER_BW_800;
 800161a:	2300      	movs	r3, #0
 800161c:	717b      	strb	r3, [r7, #5]
    
    /* Configure MEMS: power mode(ODR) and axes enable */
    ctrl = (uint16_t) (l1s3dsh_InitStruct.Output_DataRate | \
 800161e:	783a      	ldrb	r2, [r7, #0]
                       l1s3dsh_InitStruct.Axes_Enable);
 8001620:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint16_t) (l1s3dsh_InitStruct.Output_DataRate | \
 8001622:	4313      	orrs	r3, r2
 8001624:	b2db      	uxtb	r3, r3
 8001626:	82bb      	strh	r3, [r7, #20]
    
    /* Configure MEMS: full scale and self test */
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 8001628:	78ba      	ldrb	r2, [r7, #2]
                         l1s3dsh_InitStruct.Self_Test   | \
 800162a:	78fb      	ldrb	r3, [r7, #3]
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 800162c:	4313      	orrs	r3, r2
 800162e:	b2da      	uxtb	r2, r3
                         l1s3dsh_InitStruct.Full_Scale  | \
 8001630:	793b      	ldrb	r3, [r7, #4]
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 8001632:	4313      	orrs	r3, r2
 8001634:	b2da      	uxtb	r2, r3
                         l1s3dsh_InitStruct.Filter_BW) << 8);
 8001636:	797b      	ldrb	r3, [r7, #5]
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 8001638:	4313      	orrs	r3, r2
 800163a:	b2db      	uxtb	r3, r3
 800163c:	021b      	lsls	r3, r3, #8
 800163e:	b29a      	uxth	r2, r3
 8001640:	8abb      	ldrh	r3, [r7, #20]
 8001642:	4313      	orrs	r3, r2
 8001644:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AcceleroDrv->Init(ctrl);
 8001646:	4b09      	ldr	r3, [pc, #36]	@ (800166c <BSP_ACCELERO_Init+0x110>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	8aba      	ldrh	r2, [r7, #20]
 800164e:	4610      	mov	r0, r2
 8001650:	4798      	blx	r3
    
    ret = ACCELERO_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	75fb      	strb	r3, [r7, #23]
 8001656:	e001      	b.n	800165c <BSP_ACCELERO_Init+0x100>
  }

  else
  {
    ret = ACCELERO_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 800165c:	7dfb      	ldrb	r3, [r7, #23]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000000 	.word	0x20000000
 800166c:	200002a0 	.word	0x200002a0
 8001670:	20000034 	.word	0x20000034

08001674 <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.  
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	81fb      	strh	r3, [r7, #14]
  
  if(AcceleroDrv->GetXYZ != NULL)
 8001680:	4b10      	ldr	r3, [pc, #64]	@ (80016c4 <BSP_ACCELERO_GetXYZ+0x50>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	2b00      	cmp	r3, #0
 8001688:	d018      	beq.n	80016bc <BSP_ACCELERO_GetXYZ+0x48>
  {   
    AcceleroDrv->GetXYZ(pDataXYZ);
 800168a:	4b0e      	ldr	r3, [pc, #56]	@ (80016c4 <BSP_ACCELERO_GetXYZ+0x50>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	4798      	blx	r3
    
    /* Switch X and Y Axes in case of LIS302DL MEMS */
    if(AcceleroDrv == &Lis302dlDrv)
 8001694:	4b0b      	ldr	r3, [pc, #44]	@ (80016c4 <BSP_ACCELERO_GetXYZ+0x50>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a0b      	ldr	r2, [pc, #44]	@ (80016c8 <BSP_ACCELERO_GetXYZ+0x54>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d10e      	bne.n	80016bc <BSP_ACCELERO_GetXYZ+0x48>
    { 
      SwitchXY  = pDataXYZ[0];
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	801a      	strh	r2, [r3, #0]
      /* Invert Y Axis to be compliant with LIS3DSH MEMS */
      pDataXYZ[1] = -SwitchXY;
 80016ae:	89fb      	ldrh	r3, [r7, #14]
 80016b0:	425b      	negs	r3, r3
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3302      	adds	r3, #2
 80016b8:	b212      	sxth	r2, r2
 80016ba:	801a      	strh	r2, [r3, #0]
    } 
  }
}
 80016bc:	bf00      	nop
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	200002a0 	.word	0x200002a0
 80016c8:	20000000 	.word	0x20000000

080016cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	4b12      	ldr	r3, [pc, #72]	@ (8001720 <HAL_MspInit+0x54>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016da:	4a11      	ldr	r2, [pc, #68]	@ (8001720 <HAL_MspInit+0x54>)
 80016dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80016e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001720 <HAL_MspInit+0x54>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	603b      	str	r3, [r7, #0]
 80016f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001720 <HAL_MspInit+0x54>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001720 <HAL_MspInit+0x54>)
 80016f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80016fe:	4b08      	ldr	r3, [pc, #32]	@ (8001720 <HAL_MspInit+0x54>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	210f      	movs	r1, #15
 800170e:	f06f 0001 	mvn.w	r0, #1
 8001712:	f000 fa1c 	bl	8001b4e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800

08001724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <NMI_Handler+0x4>

0800172c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <HardFault_Handler+0x4>

08001734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <MemManage_Handler+0x4>

0800173c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <BusFault_Handler+0x4>

08001744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <UsageFault_Handler+0x4>

0800174c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800175e:	f000 f8d7 	bl	8001910 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001762:	f005 fbfd 	bl	8006f60 <xTaskGetSchedulerState>
 8001766:	4603      	mov	r3, r0
 8001768:	2b01      	cmp	r3, #1
 800176a:	d001      	beq.n	8001770 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800176c:	f004 fe2c 	bl	80063c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}

08001774 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001778:	4802      	ldr	r0, [pc, #8]	@ (8001784 <OTG_FS_IRQHandler+0x10>)
 800177a:	f000 fce8 	bl	800214e <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	2000076c 	.word	0x2000076c

08001788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001790:	4a14      	ldr	r2, [pc, #80]	@ (80017e4 <_sbrk+0x5c>)
 8001792:	4b15      	ldr	r3, [pc, #84]	@ (80017e8 <_sbrk+0x60>)
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800179c:	4b13      	ldr	r3, [pc, #76]	@ (80017ec <_sbrk+0x64>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d102      	bne.n	80017aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a4:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <_sbrk+0x64>)
 80017a6:	4a12      	ldr	r2, [pc, #72]	@ (80017f0 <_sbrk+0x68>)
 80017a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017aa:	4b10      	ldr	r3, [pc, #64]	@ (80017ec <_sbrk+0x64>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d207      	bcs.n	80017c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b8:	f005 ff16 	bl	80075e8 <__errno>
 80017bc:	4603      	mov	r3, r0
 80017be:	220c      	movs	r2, #12
 80017c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295
 80017c6:	e009      	b.n	80017dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c8:	4b08      	ldr	r3, [pc, #32]	@ (80017ec <_sbrk+0x64>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ce:	4b07      	ldr	r3, [pc, #28]	@ (80017ec <_sbrk+0x64>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	4a05      	ldr	r2, [pc, #20]	@ (80017ec <_sbrk+0x64>)
 80017d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017da:	68fb      	ldr	r3, [r7, #12]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20020000 	.word	0x20020000
 80017e8:	00000400 	.word	0x00000400
 80017ec:	200002a4 	.word	0x200002a4
 80017f0:	20000c98 	.word	0x20000c98

080017f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f8:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <SystemInit+0x20>)
 80017fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017fe:	4a05      	ldr	r2, [pc, #20]	@ (8001814 <SystemInit+0x20>)
 8001800:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001804:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001818:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001850 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800181c:	f7ff ffea 	bl	80017f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001820:	480c      	ldr	r0, [pc, #48]	@ (8001854 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001822:	490d      	ldr	r1, [pc, #52]	@ (8001858 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001824:	4a0d      	ldr	r2, [pc, #52]	@ (800185c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001828:	e002      	b.n	8001830 <LoopCopyDataInit>

0800182a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800182a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800182c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182e:	3304      	adds	r3, #4

08001830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001834:	d3f9      	bcc.n	800182a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001836:	4a0a      	ldr	r2, [pc, #40]	@ (8001860 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001838:	4c0a      	ldr	r4, [pc, #40]	@ (8001864 <LoopFillZerobss+0x22>)
  movs r3, #0
 800183a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800183c:	e001      	b.n	8001842 <LoopFillZerobss>

0800183e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800183e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001840:	3204      	adds	r2, #4

08001842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001844:	d3fb      	bcc.n	800183e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001846:	f005 fed5 	bl	80075f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800184a:	f7ff fbd5 	bl	8000ff8 <main>
  bx  lr    
 800184e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001850:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001858:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 800185c:	08007df4 	.word	0x08007df4
  ldr r2, =_sbss
 8001860:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8001864:	20000c94 	.word	0x20000c94

08001868 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001868:	e7fe      	b.n	8001868 <ADC_IRQHandler>
	...

0800186c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001870:	4b0e      	ldr	r3, [pc, #56]	@ (80018ac <HAL_Init+0x40>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0d      	ldr	r2, [pc, #52]	@ (80018ac <HAL_Init+0x40>)
 8001876:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800187a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800187c:	4b0b      	ldr	r3, [pc, #44]	@ (80018ac <HAL_Init+0x40>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a0a      	ldr	r2, [pc, #40]	@ (80018ac <HAL_Init+0x40>)
 8001882:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001886:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001888:	4b08      	ldr	r3, [pc, #32]	@ (80018ac <HAL_Init+0x40>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a07      	ldr	r2, [pc, #28]	@ (80018ac <HAL_Init+0x40>)
 800188e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001892:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001894:	2003      	movs	r0, #3
 8001896:	f000 f94f 	bl	8001b38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800189a:	200f      	movs	r0, #15
 800189c:	f000 f808 	bl	80018b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a0:	f7ff ff14 	bl	80016cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40023c00 	.word	0x40023c00

080018b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b8:	4b12      	ldr	r3, [pc, #72]	@ (8001904 <HAL_InitTick+0x54>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b12      	ldr	r3, [pc, #72]	@ (8001908 <HAL_InitTick+0x58>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 f967 	bl	8001ba2 <HAL_SYSTICK_Config>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e00e      	b.n	80018fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b0f      	cmp	r3, #15
 80018e2:	d80a      	bhi.n	80018fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e4:	2200      	movs	r2, #0
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ec:	f000 f92f 	bl	8001b4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018f0:	4a06      	ldr	r2, [pc, #24]	@ (800190c <HAL_InitTick+0x5c>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e000      	b.n	80018fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	2000006c 	.word	0x2000006c
 8001908:	20000074 	.word	0x20000074
 800190c:	20000070 	.word	0x20000070

08001910 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001914:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <HAL_IncTick+0x20>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <HAL_IncTick+0x24>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4413      	add	r3, r2
 8001920:	4a04      	ldr	r2, [pc, #16]	@ (8001934 <HAL_IncTick+0x24>)
 8001922:	6013      	str	r3, [r2, #0]
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20000074 	.word	0x20000074
 8001934:	200002a8 	.word	0x200002a8

08001938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return uwTick;
 800193c:	4b03      	ldr	r3, [pc, #12]	@ (800194c <HAL_GetTick+0x14>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	200002a8 	.word	0x200002a8

08001950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001958:	f7ff ffee 	bl	8001938 <HAL_GetTick>
 800195c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001968:	d005      	beq.n	8001976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800196a:	4b0a      	ldr	r3, [pc, #40]	@ (8001994 <HAL_Delay+0x44>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4413      	add	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001976:	bf00      	nop
 8001978:	f7ff ffde 	bl	8001938 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	429a      	cmp	r2, r3
 8001986:	d8f7      	bhi.n	8001978 <HAL_Delay+0x28>
  {
  }
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000074 	.word	0x20000074

08001998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a8:	4b0c      	ldr	r3, [pc, #48]	@ (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019b4:	4013      	ands	r3, r2
 80019b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ca:	4a04      	ldr	r2, [pc, #16]	@ (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	60d3      	str	r3, [r2, #12]
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e4:	4b04      	ldr	r3, [pc, #16]	@ (80019f8 <__NVIC_GetPriorityGrouping+0x18>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	0a1b      	lsrs	r3, r3, #8
 80019ea:	f003 0307 	and.w	r3, r3, #7
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	db0b      	blt.n	8001a26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	f003 021f 	and.w	r2, r3, #31
 8001a14:	4907      	ldr	r1, [pc, #28]	@ (8001a34 <__NVIC_EnableIRQ+0x38>)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	095b      	lsrs	r3, r3, #5
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000e100 	.word	0xe000e100

08001a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	6039      	str	r1, [r7, #0]
 8001a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	db0a      	blt.n	8001a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	490c      	ldr	r1, [pc, #48]	@ (8001a84 <__NVIC_SetPriority+0x4c>)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	0112      	lsls	r2, r2, #4
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a60:	e00a      	b.n	8001a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4908      	ldr	r1, [pc, #32]	@ (8001a88 <__NVIC_SetPriority+0x50>)
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	3b04      	subs	r3, #4
 8001a70:	0112      	lsls	r2, r2, #4
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	440b      	add	r3, r1
 8001a76:	761a      	strb	r2, [r3, #24]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000e100 	.word	0xe000e100
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	@ 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f1c3 0307 	rsb	r3, r3, #7
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	bf28      	it	cs
 8001aaa:	2304      	movcs	r3, #4
 8001aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	2b06      	cmp	r3, #6
 8001ab4:	d902      	bls.n	8001abc <NVIC_EncodePriority+0x30>
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3b03      	subs	r3, #3
 8001aba:	e000      	b.n	8001abe <NVIC_EncodePriority+0x32>
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43da      	mvns	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	401a      	ands	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	43d9      	mvns	r1, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	4313      	orrs	r3, r2
         );
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3724      	adds	r7, #36	@ 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
	...

08001af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b04:	d301      	bcc.n	8001b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b06:	2301      	movs	r3, #1
 8001b08:	e00f      	b.n	8001b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b34 <SysTick_Config+0x40>)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b12:	210f      	movs	r1, #15
 8001b14:	f04f 30ff 	mov.w	r0, #4294967295
 8001b18:	f7ff ff8e 	bl	8001a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b1c:	4b05      	ldr	r3, [pc, #20]	@ (8001b34 <SysTick_Config+0x40>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b22:	4b04      	ldr	r3, [pc, #16]	@ (8001b34 <SysTick_Config+0x40>)
 8001b24:	2207      	movs	r2, #7
 8001b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	e000e010 	.word	0xe000e010

08001b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff ff29 	bl	8001998 <__NVIC_SetPriorityGrouping>
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b086      	sub	sp, #24
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4603      	mov	r3, r0
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b60:	f7ff ff3e 	bl	80019e0 <__NVIC_GetPriorityGrouping>
 8001b64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	6978      	ldr	r0, [r7, #20]
 8001b6c:	f7ff ff8e 	bl	8001a8c <NVIC_EncodePriority>
 8001b70:	4602      	mov	r2, r0
 8001b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b76:	4611      	mov	r1, r2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff5d 	bl	8001a38 <__NVIC_SetPriority>
}
 8001b7e:	bf00      	nop
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff31 	bl	80019fc <__NVIC_EnableIRQ>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff ffa2 	bl	8001af4 <SysTick_Config>
 8001bb0:	4603      	mov	r3, r0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b089      	sub	sp, #36	@ 0x24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
 8001bd6:	e16b      	b.n	8001eb0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bd8:	2201      	movs	r2, #1
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	4013      	ands	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	f040 815a 	bne.w	8001eaa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d005      	beq.n	8001c0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d130      	bne.n	8001c70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	2203      	movs	r2, #3
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4013      	ands	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	68da      	ldr	r2, [r3, #12]
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c44:	2201      	movs	r2, #1
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	091b      	lsrs	r3, r3, #4
 8001c5a:	f003 0201 	and.w	r2, r3, #1
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	2b03      	cmp	r3, #3
 8001c7a:	d017      	beq.n	8001cac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	2203      	movs	r2, #3
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d123      	bne.n	8001d00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	08da      	lsrs	r2, r3, #3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3208      	adds	r2, #8
 8001cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	220f      	movs	r2, #15
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	691a      	ldr	r2, [r3, #16]
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	08da      	lsrs	r2, r3, #3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3208      	adds	r2, #8
 8001cfa:	69b9      	ldr	r1, [r7, #24]
 8001cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0203 	and.w	r2, r3, #3
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 80b4 	beq.w	8001eaa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	4b60      	ldr	r3, [pc, #384]	@ (8001ec8 <HAL_GPIO_Init+0x30c>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d4a:	4a5f      	ldr	r2, [pc, #380]	@ (8001ec8 <HAL_GPIO_Init+0x30c>)
 8001d4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d52:	4b5d      	ldr	r3, [pc, #372]	@ (8001ec8 <HAL_GPIO_Init+0x30c>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d5e:	4a5b      	ldr	r2, [pc, #364]	@ (8001ecc <HAL_GPIO_Init+0x310>)
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	089b      	lsrs	r3, r3, #2
 8001d64:	3302      	adds	r3, #2
 8001d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	220f      	movs	r2, #15
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a52      	ldr	r2, [pc, #328]	@ (8001ed0 <HAL_GPIO_Init+0x314>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d02b      	beq.n	8001de2 <HAL_GPIO_Init+0x226>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a51      	ldr	r2, [pc, #324]	@ (8001ed4 <HAL_GPIO_Init+0x318>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d025      	beq.n	8001dde <HAL_GPIO_Init+0x222>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a50      	ldr	r2, [pc, #320]	@ (8001ed8 <HAL_GPIO_Init+0x31c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d01f      	beq.n	8001dda <HAL_GPIO_Init+0x21e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a4f      	ldr	r2, [pc, #316]	@ (8001edc <HAL_GPIO_Init+0x320>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d019      	beq.n	8001dd6 <HAL_GPIO_Init+0x21a>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a4e      	ldr	r2, [pc, #312]	@ (8001ee0 <HAL_GPIO_Init+0x324>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d013      	beq.n	8001dd2 <HAL_GPIO_Init+0x216>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a4d      	ldr	r2, [pc, #308]	@ (8001ee4 <HAL_GPIO_Init+0x328>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d00d      	beq.n	8001dce <HAL_GPIO_Init+0x212>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a4c      	ldr	r2, [pc, #304]	@ (8001ee8 <HAL_GPIO_Init+0x32c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d007      	beq.n	8001dca <HAL_GPIO_Init+0x20e>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a4b      	ldr	r2, [pc, #300]	@ (8001eec <HAL_GPIO_Init+0x330>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d101      	bne.n	8001dc6 <HAL_GPIO_Init+0x20a>
 8001dc2:	2307      	movs	r3, #7
 8001dc4:	e00e      	b.n	8001de4 <HAL_GPIO_Init+0x228>
 8001dc6:	2308      	movs	r3, #8
 8001dc8:	e00c      	b.n	8001de4 <HAL_GPIO_Init+0x228>
 8001dca:	2306      	movs	r3, #6
 8001dcc:	e00a      	b.n	8001de4 <HAL_GPIO_Init+0x228>
 8001dce:	2305      	movs	r3, #5
 8001dd0:	e008      	b.n	8001de4 <HAL_GPIO_Init+0x228>
 8001dd2:	2304      	movs	r3, #4
 8001dd4:	e006      	b.n	8001de4 <HAL_GPIO_Init+0x228>
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e004      	b.n	8001de4 <HAL_GPIO_Init+0x228>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e002      	b.n	8001de4 <HAL_GPIO_Init+0x228>
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <HAL_GPIO_Init+0x228>
 8001de2:	2300      	movs	r3, #0
 8001de4:	69fa      	ldr	r2, [r7, #28]
 8001de6:	f002 0203 	and.w	r2, r2, #3
 8001dea:	0092      	lsls	r2, r2, #2
 8001dec:	4093      	lsls	r3, r2
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001df4:	4935      	ldr	r1, [pc, #212]	@ (8001ecc <HAL_GPIO_Init+0x310>)
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	089b      	lsrs	r3, r3, #2
 8001dfa:	3302      	adds	r3, #2
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e02:	4b3b      	ldr	r3, [pc, #236]	@ (8001ef0 <HAL_GPIO_Init+0x334>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e26:	4a32      	ldr	r2, [pc, #200]	@ (8001ef0 <HAL_GPIO_Init+0x334>)
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e2c:	4b30      	ldr	r3, [pc, #192]	@ (8001ef0 <HAL_GPIO_Init+0x334>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e50:	4a27      	ldr	r2, [pc, #156]	@ (8001ef0 <HAL_GPIO_Init+0x334>)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e56:	4b26      	ldr	r3, [pc, #152]	@ (8001ef0 <HAL_GPIO_Init+0x334>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4013      	ands	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e7a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ef0 <HAL_GPIO_Init+0x334>)
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e80:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef0 <HAL_GPIO_Init+0x334>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ea4:	4a12      	ldr	r2, [pc, #72]	@ (8001ef0 <HAL_GPIO_Init+0x334>)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3301      	adds	r3, #1
 8001eae:	61fb      	str	r3, [r7, #28]
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	2b0f      	cmp	r3, #15
 8001eb4:	f67f ae90 	bls.w	8001bd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	3724      	adds	r7, #36	@ 0x24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40013800 	.word	0x40013800
 8001ed0:	40020000 	.word	0x40020000
 8001ed4:	40020400 	.word	0x40020400
 8001ed8:	40020800 	.word	0x40020800
 8001edc:	40020c00 	.word	0x40020c00
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40021400 	.word	0x40021400
 8001ee8:	40021800 	.word	0x40021800
 8001eec:	40021c00 	.word	0x40021c00
 8001ef0:	40013c00 	.word	0x40013c00

08001ef4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b087      	sub	sp, #28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	e0cd      	b.n	80020ac <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f10:	2201      	movs	r2, #1
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	f040 80bd 	bne.w	80020a6 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001f2c:	4a65      	ldr	r2, [pc, #404]	@ (80020c4 <HAL_GPIO_DeInit+0x1d0>)
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	089b      	lsrs	r3, r3, #2
 8001f32:	3302      	adds	r3, #2
 8001f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f38:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	220f      	movs	r2, #15
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a5d      	ldr	r2, [pc, #372]	@ (80020c8 <HAL_GPIO_DeInit+0x1d4>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d02b      	beq.n	8001fae <HAL_GPIO_DeInit+0xba>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a5c      	ldr	r2, [pc, #368]	@ (80020cc <HAL_GPIO_DeInit+0x1d8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d025      	beq.n	8001faa <HAL_GPIO_DeInit+0xb6>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a5b      	ldr	r2, [pc, #364]	@ (80020d0 <HAL_GPIO_DeInit+0x1dc>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d01f      	beq.n	8001fa6 <HAL_GPIO_DeInit+0xb2>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a5a      	ldr	r2, [pc, #360]	@ (80020d4 <HAL_GPIO_DeInit+0x1e0>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d019      	beq.n	8001fa2 <HAL_GPIO_DeInit+0xae>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a59      	ldr	r2, [pc, #356]	@ (80020d8 <HAL_GPIO_DeInit+0x1e4>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d013      	beq.n	8001f9e <HAL_GPIO_DeInit+0xaa>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a58      	ldr	r2, [pc, #352]	@ (80020dc <HAL_GPIO_DeInit+0x1e8>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d00d      	beq.n	8001f9a <HAL_GPIO_DeInit+0xa6>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a57      	ldr	r2, [pc, #348]	@ (80020e0 <HAL_GPIO_DeInit+0x1ec>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d007      	beq.n	8001f96 <HAL_GPIO_DeInit+0xa2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a56      	ldr	r2, [pc, #344]	@ (80020e4 <HAL_GPIO_DeInit+0x1f0>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d101      	bne.n	8001f92 <HAL_GPIO_DeInit+0x9e>
 8001f8e:	2307      	movs	r3, #7
 8001f90:	e00e      	b.n	8001fb0 <HAL_GPIO_DeInit+0xbc>
 8001f92:	2308      	movs	r3, #8
 8001f94:	e00c      	b.n	8001fb0 <HAL_GPIO_DeInit+0xbc>
 8001f96:	2306      	movs	r3, #6
 8001f98:	e00a      	b.n	8001fb0 <HAL_GPIO_DeInit+0xbc>
 8001f9a:	2305      	movs	r3, #5
 8001f9c:	e008      	b.n	8001fb0 <HAL_GPIO_DeInit+0xbc>
 8001f9e:	2304      	movs	r3, #4
 8001fa0:	e006      	b.n	8001fb0 <HAL_GPIO_DeInit+0xbc>
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e004      	b.n	8001fb0 <HAL_GPIO_DeInit+0xbc>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e002      	b.n	8001fb0 <HAL_GPIO_DeInit+0xbc>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <HAL_GPIO_DeInit+0xbc>
 8001fae:	2300      	movs	r3, #0
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	f002 0203 	and.w	r2, r2, #3
 8001fb6:	0092      	lsls	r2, r2, #2
 8001fb8:	4093      	lsls	r3, r2
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d132      	bne.n	8002026 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001fc0:	4b49      	ldr	r3, [pc, #292]	@ (80020e8 <HAL_GPIO_DeInit+0x1f4>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	4947      	ldr	r1, [pc, #284]	@ (80020e8 <HAL_GPIO_DeInit+0x1f4>)
 8001fca:	4013      	ands	r3, r2
 8001fcc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001fce:	4b46      	ldr	r3, [pc, #280]	@ (80020e8 <HAL_GPIO_DeInit+0x1f4>)
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	4944      	ldr	r1, [pc, #272]	@ (80020e8 <HAL_GPIO_DeInit+0x1f4>)
 8001fd8:	4013      	ands	r3, r2
 8001fda:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001fdc:	4b42      	ldr	r3, [pc, #264]	@ (80020e8 <HAL_GPIO_DeInit+0x1f4>)
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	4940      	ldr	r1, [pc, #256]	@ (80020e8 <HAL_GPIO_DeInit+0x1f4>)
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001fea:	4b3f      	ldr	r3, [pc, #252]	@ (80020e8 <HAL_GPIO_DeInit+0x1f4>)
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	493d      	ldr	r1, [pc, #244]	@ (80020e8 <HAL_GPIO_DeInit+0x1f4>)
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	220f      	movs	r2, #15
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002008:	4a2e      	ldr	r2, [pc, #184]	@ (80020c4 <HAL_GPIO_DeInit+0x1d0>)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	089b      	lsrs	r3, r3, #2
 800200e:	3302      	adds	r3, #2
 8002010:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	43da      	mvns	r2, r3
 8002018:	482a      	ldr	r0, [pc, #168]	@ (80020c4 <HAL_GPIO_DeInit+0x1d0>)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	400a      	ands	r2, r1
 8002020:	3302      	adds	r3, #2
 8002022:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	2103      	movs	r1, #3
 8002030:	fa01 f303 	lsl.w	r3, r1, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	401a      	ands	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	08da      	lsrs	r2, r3, #3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3208      	adds	r2, #8
 8002044:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	220f      	movs	r2, #15
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	4019      	ands	r1, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3208      	adds	r2, #8
 8002062:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	2103      	movs	r1, #3
 8002070:	fa01 f303 	lsl.w	r3, r1, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	401a      	ands	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	2101      	movs	r1, #1
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	fa01 f303 	lsl.w	r3, r1, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	401a      	ands	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	2103      	movs	r1, #3
 800209a:	fa01 f303 	lsl.w	r3, r1, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	401a      	ands	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	3301      	adds	r3, #1
 80020aa:	617b      	str	r3, [r7, #20]
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	2b0f      	cmp	r3, #15
 80020b0:	f67f af2e 	bls.w	8001f10 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80020b4:	bf00      	nop
 80020b6:	bf00      	nop
 80020b8:	371c      	adds	r7, #28
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40013800 	.word	0x40013800
 80020c8:	40020000 	.word	0x40020000
 80020cc:	40020400 	.word	0x40020400
 80020d0:	40020800 	.word	0x40020800
 80020d4:	40020c00 	.word	0x40020c00
 80020d8:	40021000 	.word	0x40021000
 80020dc:	40021400 	.word	0x40021400
 80020e0:	40021800 	.word	0x40021800
 80020e4:	40021c00 	.word	0x40021c00
 80020e8:	40013c00 	.word	0x40013c00

080020ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	460b      	mov	r3, r1
 80020f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691a      	ldr	r2, [r3, #16]
 80020fc:	887b      	ldrh	r3, [r7, #2]
 80020fe:	4013      	ands	r3, r2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d002      	beq.n	800210a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002104:	2301      	movs	r3, #1
 8002106:	73fb      	strb	r3, [r7, #15]
 8002108:	e001      	b.n	800210e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800210a:	2300      	movs	r3, #0
 800210c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800210e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	807b      	strh	r3, [r7, #2]
 8002128:	4613      	mov	r3, r2
 800212a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800212c:	787b      	ldrb	r3, [r7, #1]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002132:	887a      	ldrh	r2, [r7, #2]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002138:	e003      	b.n	8002142 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800213a:	887b      	ldrh	r3, [r7, #2]
 800213c:	041a      	lsls	r2, r3, #16
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	619a      	str	r2, [r3, #24]
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b086      	sub	sp, #24
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f003 fd95 	bl	8005c94 <USB_GetMode>
 800216a:	4603      	mov	r3, r0
 800216c:	2b01      	cmp	r3, #1
 800216e:	f040 80fb 	bne.w	8002368 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f003 fd58 	bl	8005c2c <USB_ReadInterrupts>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 80f1 	beq.w	8002366 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f003 fd4f 	bl	8005c2c <USB_ReadInterrupts>
 800218e:	4603      	mov	r3, r0
 8002190:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002194:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002198:	d104      	bne.n	80021a4 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80021a2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f003 fd3f 	bl	8005c2c <USB_ReadInterrupts>
 80021ae:	4603      	mov	r3, r0
 80021b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80021b8:	d104      	bne.n	80021c4 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80021c2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f003 fd2f 	bl	8005c2c <USB_ReadInterrupts>
 80021ce:	4603      	mov	r3, r0
 80021d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80021d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80021d8:	d104      	bne.n	80021e4 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80021e2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f003 fd1f 	bl	8005c2c <USB_ReadInterrupts>
 80021ee:	4603      	mov	r3, r0
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d103      	bne.n	8002200 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2202      	movs	r2, #2
 80021fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f003 fd11 	bl	8005c2c <USB_ReadInterrupts>
 800220a:	4603      	mov	r3, r0
 800220c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002210:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002214:	d120      	bne.n	8002258 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800221e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	d113      	bne.n	8002258 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002230:	2110      	movs	r1, #16
 8002232:	6938      	ldr	r0, [r7, #16]
 8002234:	f003 fc42 	bl	8005abc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002238:	6938      	ldr	r0, [r7, #16]
 800223a:	f003 fc71 	bl	8005b20 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	7a5b      	ldrb	r3, [r3, #9]
 8002242:	2b02      	cmp	r3, #2
 8002244:	d105      	bne.n	8002252 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2101      	movs	r1, #1
 800224c:	4618      	mov	r0, r3
 800224e:	f003 fd2f 	bl	8005cb0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f005 f85e 	bl	8007314 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f003 fce5 	bl	8005c2c <USB_ReadInterrupts>
 8002262:	4603      	mov	r3, r0
 8002264:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002268:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800226c:	d102      	bne.n	8002274 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f001 fca1 	bl	8003bb6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f003 fcd7 	bl	8005c2c <USB_ReadInterrupts>
 800227e:	4603      	mov	r3, r0
 8002280:	f003 0308 	and.w	r3, r3, #8
 8002284:	2b08      	cmp	r3, #8
 8002286:	d106      	bne.n	8002296 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f005 f827 	bl	80072dc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2208      	movs	r2, #8
 8002294:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f003 fcc6 	bl	8005c2c <USB_ReadInterrupts>
 80022a0:	4603      	mov	r3, r0
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80022aa:	d139      	bne.n	8002320 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f003 fd3a 	bl	8005d2a <USB_HC_ReadInterrupt>
 80022b6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	e025      	b.n	800230a <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f003 030f 	and.w	r3, r3, #15
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d018      	beq.n	8002304 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	015a      	lsls	r2, r3, #5
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	4413      	add	r3, r2
 80022da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022e8:	d106      	bne.n	80022f8 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	4619      	mov	r1, r3
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f859 	bl	80023a8 <HCD_HC_IN_IRQHandler>
 80022f6:	e005      	b.n	8002304 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	4619      	mov	r1, r3
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 febb 	bl	800307a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	3301      	adds	r3, #1
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	795b      	ldrb	r3, [r3, #5]
 800230e:	461a      	mov	r2, r3
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	4293      	cmp	r3, r2
 8002314:	d3d3      	bcc.n	80022be <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800231e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f003 fc81 	bl	8005c2c <USB_ReadInterrupts>
 800232a:	4603      	mov	r3, r0
 800232c:	f003 0310 	and.w	r3, r3, #16
 8002330:	2b10      	cmp	r3, #16
 8002332:	d101      	bne.n	8002338 <HAL_HCD_IRQHandler+0x1ea>
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <HAL_HCD_IRQHandler+0x1ec>
 8002338:	2300      	movs	r3, #0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d014      	beq.n	8002368 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	699a      	ldr	r2, [r3, #24]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 0210 	bic.w	r2, r2, #16
 800234c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f001 fb52 	bl	80039f8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699a      	ldr	r2, [r3, #24]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0210 	orr.w	r2, r2, #16
 8002362:	619a      	str	r2, [r3, #24]
 8002364:	e000      	b.n	8002368 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002366:	bf00      	nop
    }
  }
}
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800237c:	2b01      	cmp	r3, #1
 800237e:	d101      	bne.n	8002384 <HAL_HCD_Stop+0x16>
 8002380:	2302      	movs	r3, #2
 8002382:	e00d      	b.n	80023a0 <HAL_HCD_Stop+0x32>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f003 fdfb 	bl	8005f8c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	78fa      	ldrb	r2, [r7, #3]
 80023c4:	4611      	mov	r1, r2
 80023c6:	4618      	mov	r0, r3
 80023c8:	f003 fc43 	bl	8005c52 <USB_ReadChInterrupts>
 80023cc:	4603      	mov	r3, r0
 80023ce:	f003 0304 	and.w	r3, r3, #4
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d11a      	bne.n	800240c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80023d6:	78fb      	ldrb	r3, [r7, #3]
 80023d8:	015a      	lsls	r2, r3, #5
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4413      	add	r3, r2
 80023de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023e2:	461a      	mov	r2, r3
 80023e4:	2304      	movs	r3, #4
 80023e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80023e8:	78fa      	ldrb	r2, [r7, #3]
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	1a9b      	subs	r3, r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	334d      	adds	r3, #77	@ 0x4d
 80023f8:	2207      	movs	r2, #7
 80023fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	78fa      	ldrb	r2, [r7, #3]
 8002402:	4611      	mov	r1, r2
 8002404:	4618      	mov	r0, r3
 8002406:	f003 fca1 	bl	8005d4c <USB_HC_Halt>
 800240a:	e09e      	b.n	800254a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	78fa      	ldrb	r2, [r7, #3]
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f003 fc1c 	bl	8005c52 <USB_ReadChInterrupts>
 800241a:	4603      	mov	r3, r0
 800241c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002420:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002424:	d11b      	bne.n	800245e <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002426:	78fb      	ldrb	r3, [r7, #3]
 8002428:	015a      	lsls	r2, r3, #5
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4413      	add	r3, r2
 800242e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002432:	461a      	mov	r2, r3
 8002434:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002438:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800243a:	78fa      	ldrb	r2, [r7, #3]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	1a9b      	subs	r3, r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	440b      	add	r3, r1
 8002448:	334d      	adds	r3, #77	@ 0x4d
 800244a:	2208      	movs	r2, #8
 800244c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	78fa      	ldrb	r2, [r7, #3]
 8002454:	4611      	mov	r1, r2
 8002456:	4618      	mov	r0, r3
 8002458:	f003 fc78 	bl	8005d4c <USB_HC_Halt>
 800245c:	e075      	b.n	800254a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	78fa      	ldrb	r2, [r7, #3]
 8002464:	4611      	mov	r1, r2
 8002466:	4618      	mov	r0, r3
 8002468:	f003 fbf3 	bl	8005c52 <USB_ReadChInterrupts>
 800246c:	4603      	mov	r3, r0
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b08      	cmp	r3, #8
 8002474:	d11a      	bne.n	80024ac <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002476:	78fb      	ldrb	r3, [r7, #3]
 8002478:	015a      	lsls	r2, r3, #5
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4413      	add	r3, r2
 800247e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002482:	461a      	mov	r2, r3
 8002484:	2308      	movs	r3, #8
 8002486:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002488:	78fa      	ldrb	r2, [r7, #3]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	1a9b      	subs	r3, r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	334d      	adds	r3, #77	@ 0x4d
 8002498:	2206      	movs	r2, #6
 800249a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	78fa      	ldrb	r2, [r7, #3]
 80024a2:	4611      	mov	r1, r2
 80024a4:	4618      	mov	r0, r3
 80024a6:	f003 fc51 	bl	8005d4c <USB_HC_Halt>
 80024aa:	e04e      	b.n	800254a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	78fa      	ldrb	r2, [r7, #3]
 80024b2:	4611      	mov	r1, r2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f003 fbcc 	bl	8005c52 <USB_ReadChInterrupts>
 80024ba:	4603      	mov	r3, r0
 80024bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024c4:	d11b      	bne.n	80024fe <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80024c6:	78fb      	ldrb	r3, [r7, #3]
 80024c8:	015a      	lsls	r2, r3, #5
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4413      	add	r3, r2
 80024ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024d2:	461a      	mov	r2, r3
 80024d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80024da:	78fa      	ldrb	r2, [r7, #3]
 80024dc:	6879      	ldr	r1, [r7, #4]
 80024de:	4613      	mov	r3, r2
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	1a9b      	subs	r3, r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	440b      	add	r3, r1
 80024e8:	334d      	adds	r3, #77	@ 0x4d
 80024ea:	2209      	movs	r2, #9
 80024ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	78fa      	ldrb	r2, [r7, #3]
 80024f4:	4611      	mov	r1, r2
 80024f6:	4618      	mov	r0, r3
 80024f8:	f003 fc28 	bl	8005d4c <USB_HC_Halt>
 80024fc:	e025      	b.n	800254a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	78fa      	ldrb	r2, [r7, #3]
 8002504:	4611      	mov	r1, r2
 8002506:	4618      	mov	r0, r3
 8002508:	f003 fba3 	bl	8005c52 <USB_ReadChInterrupts>
 800250c:	4603      	mov	r3, r0
 800250e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002512:	2b80      	cmp	r3, #128	@ 0x80
 8002514:	d119      	bne.n	800254a <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002516:	78fb      	ldrb	r3, [r7, #3]
 8002518:	015a      	lsls	r2, r3, #5
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	4413      	add	r3, r2
 800251e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002522:	461a      	mov	r2, r3
 8002524:	2380      	movs	r3, #128	@ 0x80
 8002526:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002528:	78fa      	ldrb	r2, [r7, #3]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	1a9b      	subs	r3, r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	334d      	adds	r3, #77	@ 0x4d
 8002538:	2207      	movs	r2, #7
 800253a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	78fa      	ldrb	r2, [r7, #3]
 8002542:	4611      	mov	r1, r2
 8002544:	4618      	mov	r0, r3
 8002546:	f003 fc01 	bl	8005d4c <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	78fa      	ldrb	r2, [r7, #3]
 8002550:	4611      	mov	r1, r2
 8002552:	4618      	mov	r0, r3
 8002554:	f003 fb7d 	bl	8005c52 <USB_ReadChInterrupts>
 8002558:	4603      	mov	r3, r0
 800255a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800255e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002562:	d112      	bne.n	800258a <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	4611      	mov	r1, r2
 800256c:	4618      	mov	r0, r3
 800256e:	f003 fbed 	bl	8005d4c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002572:	78fb      	ldrb	r3, [r7, #3]
 8002574:	015a      	lsls	r2, r3, #5
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	4413      	add	r3, r2
 800257a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800257e:	461a      	mov	r2, r3
 8002580:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002584:	6093      	str	r3, [r2, #8]
 8002586:	f000 bd75 	b.w	8003074 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	78fa      	ldrb	r2, [r7, #3]
 8002590:	4611      	mov	r1, r2
 8002592:	4618      	mov	r0, r3
 8002594:	f003 fb5d 	bl	8005c52 <USB_ReadChInterrupts>
 8002598:	4603      	mov	r3, r0
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b01      	cmp	r3, #1
 80025a0:	f040 8128 	bne.w	80027f4 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80025a4:	78fb      	ldrb	r3, [r7, #3]
 80025a6:	015a      	lsls	r2, r3, #5
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	4413      	add	r3, r2
 80025ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025b0:	461a      	mov	r2, r3
 80025b2:	2320      	movs	r3, #32
 80025b4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80025b6:	78fa      	ldrb	r2, [r7, #3]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	1a9b      	subs	r3, r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	331b      	adds	r3, #27
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d119      	bne.n	8002600 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80025cc:	78fa      	ldrb	r2, [r7, #3]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	331b      	adds	r3, #27
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80025e0:	78fb      	ldrb	r3, [r7, #3]
 80025e2:	015a      	lsls	r2, r3, #5
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4413      	add	r3, r2
 80025e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	78fa      	ldrb	r2, [r7, #3]
 80025f0:	0151      	lsls	r1, r2, #5
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	440a      	add	r2, r1
 80025f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80025fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025fe:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	799b      	ldrb	r3, [r3, #6]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d01b      	beq.n	8002640 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002608:	78fa      	ldrb	r2, [r7, #3]
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	3330      	adds	r3, #48	@ 0x30
 8002618:	6819      	ldr	r1, [r3, #0]
 800261a:	78fb      	ldrb	r3, [r7, #3]
 800261c:	015a      	lsls	r2, r3, #5
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	4413      	add	r3, r2
 8002622:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800262c:	78fa      	ldrb	r2, [r7, #3]
 800262e:	1ac9      	subs	r1, r1, r3
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	1a9b      	subs	r3, r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4403      	add	r3, r0
 800263c:	3338      	adds	r3, #56	@ 0x38
 800263e:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002640:	78fa      	ldrb	r2, [r7, #3]
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	1a9b      	subs	r3, r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	334d      	adds	r3, #77	@ 0x4d
 8002650:	2201      	movs	r2, #1
 8002652:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002654:	78fa      	ldrb	r2, [r7, #3]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	011b      	lsls	r3, r3, #4
 800265c:	1a9b      	subs	r3, r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	3344      	adds	r3, #68	@ 0x44
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002668:	78fb      	ldrb	r3, [r7, #3]
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4413      	add	r3, r2
 8002670:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002674:	461a      	mov	r2, r3
 8002676:	2301      	movs	r3, #1
 8002678:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800267a:	78fa      	ldrb	r2, [r7, #3]
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	4613      	mov	r3, r2
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	1a9b      	subs	r3, r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	440b      	add	r3, r1
 8002688:	3326      	adds	r3, #38	@ 0x26
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00a      	beq.n	80026a6 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002690:	78fa      	ldrb	r2, [r7, #3]
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	011b      	lsls	r3, r3, #4
 8002698:	1a9b      	subs	r3, r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	440b      	add	r3, r1
 800269e:	3326      	adds	r3, #38	@ 0x26
 80026a0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d110      	bne.n	80026c8 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	78fa      	ldrb	r2, [r7, #3]
 80026ac:	4611      	mov	r1, r2
 80026ae:	4618      	mov	r0, r3
 80026b0:	f003 fb4c 	bl	8005d4c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80026b4:	78fb      	ldrb	r3, [r7, #3]
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026c0:	461a      	mov	r2, r3
 80026c2:	2310      	movs	r3, #16
 80026c4:	6093      	str	r3, [r2, #8]
 80026c6:	e03d      	b.n	8002744 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80026c8:	78fa      	ldrb	r2, [r7, #3]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	3326      	adds	r3, #38	@ 0x26
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b03      	cmp	r3, #3
 80026dc:	d00a      	beq.n	80026f4 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80026de:	78fa      	ldrb	r2, [r7, #3]
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	1a9b      	subs	r3, r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	440b      	add	r3, r1
 80026ec:	3326      	adds	r3, #38	@ 0x26
 80026ee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d127      	bne.n	8002744 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80026f4:	78fb      	ldrb	r3, [r7, #3]
 80026f6:	015a      	lsls	r2, r3, #5
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	4413      	add	r3, r2
 80026fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	78fa      	ldrb	r2, [r7, #3]
 8002704:	0151      	lsls	r1, r2, #5
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	440a      	add	r2, r1
 800270a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800270e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002712:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002714:	78fa      	ldrb	r2, [r7, #3]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	334c      	adds	r3, #76	@ 0x4c
 8002724:	2201      	movs	r2, #1
 8002726:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002728:	78fa      	ldrb	r2, [r7, #3]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	1a9b      	subs	r3, r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	334c      	adds	r3, #76	@ 0x4c
 8002738:	781a      	ldrb	r2, [r3, #0]
 800273a:	78fb      	ldrb	r3, [r7, #3]
 800273c:	4619      	mov	r1, r3
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f004 fdf6 	bl	8007330 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	799b      	ldrb	r3, [r3, #6]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d13b      	bne.n	80027c4 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800274c:	78fa      	ldrb	r2, [r7, #3]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	1a9b      	subs	r3, r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	3338      	adds	r3, #56	@ 0x38
 800275c:	6819      	ldr	r1, [r3, #0]
 800275e:	78fa      	ldrb	r2, [r7, #3]
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	011b      	lsls	r3, r3, #4
 8002766:	1a9b      	subs	r3, r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4403      	add	r3, r0
 800276c:	3328      	adds	r3, #40	@ 0x28
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	440b      	add	r3, r1
 8002772:	1e59      	subs	r1, r3, #1
 8002774:	78fa      	ldrb	r2, [r7, #3]
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4403      	add	r3, r0
 8002782:	3328      	adds	r3, #40	@ 0x28
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	fbb1 f3f3 	udiv	r3, r1, r3
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	f000 8470 	beq.w	8003074 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002794:	78fa      	ldrb	r2, [r7, #3]
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	011b      	lsls	r3, r3, #4
 800279c:	1a9b      	subs	r3, r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	440b      	add	r3, r1
 80027a2:	333c      	adds	r3, #60	@ 0x3c
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	78fa      	ldrb	r2, [r7, #3]
 80027a8:	f083 0301 	eor.w	r3, r3, #1
 80027ac:	b2d8      	uxtb	r0, r3
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	1a9b      	subs	r3, r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	333c      	adds	r3, #60	@ 0x3c
 80027bc:	4602      	mov	r2, r0
 80027be:	701a      	strb	r2, [r3, #0]
 80027c0:	f000 bc58 	b.w	8003074 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80027c4:	78fa      	ldrb	r2, [r7, #3]
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	1a9b      	subs	r3, r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	333c      	adds	r3, #60	@ 0x3c
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	78fa      	ldrb	r2, [r7, #3]
 80027d8:	f083 0301 	eor.w	r3, r3, #1
 80027dc:	b2d8      	uxtb	r0, r3
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	011b      	lsls	r3, r3, #4
 80027e4:	1a9b      	subs	r3, r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	333c      	adds	r3, #60	@ 0x3c
 80027ec:	4602      	mov	r2, r0
 80027ee:	701a      	strb	r2, [r3, #0]
 80027f0:	f000 bc40 	b.w	8003074 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	78fa      	ldrb	r2, [r7, #3]
 80027fa:	4611      	mov	r1, r2
 80027fc:	4618      	mov	r0, r3
 80027fe:	f003 fa28 	bl	8005c52 <USB_ReadChInterrupts>
 8002802:	4603      	mov	r3, r0
 8002804:	f003 0320 	and.w	r3, r3, #32
 8002808:	2b20      	cmp	r3, #32
 800280a:	d131      	bne.n	8002870 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800280c:	78fb      	ldrb	r3, [r7, #3]
 800280e:	015a      	lsls	r2, r3, #5
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4413      	add	r3, r2
 8002814:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002818:	461a      	mov	r2, r3
 800281a:	2320      	movs	r3, #32
 800281c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800281e:	78fa      	ldrb	r2, [r7, #3]
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	4613      	mov	r3, r2
 8002824:	011b      	lsls	r3, r3, #4
 8002826:	1a9b      	subs	r3, r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	440b      	add	r3, r1
 800282c:	331a      	adds	r3, #26
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b01      	cmp	r3, #1
 8002832:	f040 841f 	bne.w	8003074 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002836:	78fa      	ldrb	r2, [r7, #3]
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	4613      	mov	r3, r2
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	1a9b      	subs	r3, r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	440b      	add	r3, r1
 8002844:	331b      	adds	r3, #27
 8002846:	2201      	movs	r2, #1
 8002848:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800284a:	78fa      	ldrb	r2, [r7, #3]
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	4613      	mov	r3, r2
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	1a9b      	subs	r3, r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	440b      	add	r3, r1
 8002858:	334d      	adds	r3, #77	@ 0x4d
 800285a:	2203      	movs	r2, #3
 800285c:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	78fa      	ldrb	r2, [r7, #3]
 8002864:	4611      	mov	r1, r2
 8002866:	4618      	mov	r0, r3
 8002868:	f003 fa70 	bl	8005d4c <USB_HC_Halt>
 800286c:	f000 bc02 	b.w	8003074 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	78fa      	ldrb	r2, [r7, #3]
 8002876:	4611      	mov	r1, r2
 8002878:	4618      	mov	r0, r3
 800287a:	f003 f9ea 	bl	8005c52 <USB_ReadChInterrupts>
 800287e:	4603      	mov	r3, r0
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b02      	cmp	r3, #2
 8002886:	f040 8305 	bne.w	8002e94 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800288a:	78fb      	ldrb	r3, [r7, #3]
 800288c:	015a      	lsls	r2, r3, #5
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	4413      	add	r3, r2
 8002892:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002896:	461a      	mov	r2, r3
 8002898:	2302      	movs	r3, #2
 800289a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800289c:	78fa      	ldrb	r2, [r7, #3]
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	1a9b      	subs	r3, r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	334d      	adds	r3, #77	@ 0x4d
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d114      	bne.n	80028dc <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028b2:	78fa      	ldrb	r2, [r7, #3]
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	4613      	mov	r3, r2
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	1a9b      	subs	r3, r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	440b      	add	r3, r1
 80028c0:	334d      	adds	r3, #77	@ 0x4d
 80028c2:	2202      	movs	r2, #2
 80028c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80028c6:	78fa      	ldrb	r2, [r7, #3]
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	1a9b      	subs	r3, r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	440b      	add	r3, r1
 80028d4:	334c      	adds	r3, #76	@ 0x4c
 80028d6:	2201      	movs	r2, #1
 80028d8:	701a      	strb	r2, [r3, #0]
 80028da:	e2cc      	b.n	8002e76 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80028dc:	78fa      	ldrb	r2, [r7, #3]
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	334d      	adds	r3, #77	@ 0x4d
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2b06      	cmp	r3, #6
 80028f0:	d114      	bne.n	800291c <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028f2:	78fa      	ldrb	r2, [r7, #3]
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	1a9b      	subs	r3, r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	440b      	add	r3, r1
 8002900:	334d      	adds	r3, #77	@ 0x4d
 8002902:	2202      	movs	r2, #2
 8002904:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002906:	78fa      	ldrb	r2, [r7, #3]
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	011b      	lsls	r3, r3, #4
 800290e:	1a9b      	subs	r3, r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	334c      	adds	r3, #76	@ 0x4c
 8002916:	2205      	movs	r2, #5
 8002918:	701a      	strb	r2, [r3, #0]
 800291a:	e2ac      	b.n	8002e76 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800291c:	78fa      	ldrb	r2, [r7, #3]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	1a9b      	subs	r3, r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	334d      	adds	r3, #77	@ 0x4d
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b07      	cmp	r3, #7
 8002930:	d00b      	beq.n	800294a <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002932:	78fa      	ldrb	r2, [r7, #3]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	1a9b      	subs	r3, r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	334d      	adds	r3, #77	@ 0x4d
 8002942:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002944:	2b09      	cmp	r3, #9
 8002946:	f040 80a6 	bne.w	8002a96 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800294a:	78fa      	ldrb	r2, [r7, #3]
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	1a9b      	subs	r3, r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	440b      	add	r3, r1
 8002958:	334d      	adds	r3, #77	@ 0x4d
 800295a:	2202      	movs	r2, #2
 800295c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800295e:	78fa      	ldrb	r2, [r7, #3]
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	4613      	mov	r3, r2
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	1a9b      	subs	r3, r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	440b      	add	r3, r1
 800296c:	3344      	adds	r3, #68	@ 0x44
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	1c59      	adds	r1, r3, #1
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	1a9b      	subs	r3, r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4403      	add	r3, r0
 800297e:	3344      	adds	r3, #68	@ 0x44
 8002980:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002982:	78fa      	ldrb	r2, [r7, #3]
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	011b      	lsls	r3, r3, #4
 800298a:	1a9b      	subs	r3, r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	3344      	adds	r3, #68	@ 0x44
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b02      	cmp	r3, #2
 8002996:	d943      	bls.n	8002a20 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002998:	78fa      	ldrb	r2, [r7, #3]
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	011b      	lsls	r3, r3, #4
 80029a0:	1a9b      	subs	r3, r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	3344      	adds	r3, #68	@ 0x44
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80029ac:	78fa      	ldrb	r2, [r7, #3]
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	011b      	lsls	r3, r3, #4
 80029b4:	1a9b      	subs	r3, r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	331a      	adds	r3, #26
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d123      	bne.n	8002a0a <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80029c2:	78fa      	ldrb	r2, [r7, #3]
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	4613      	mov	r3, r2
 80029c8:	011b      	lsls	r3, r3, #4
 80029ca:	1a9b      	subs	r3, r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	440b      	add	r3, r1
 80029d0:	331b      	adds	r3, #27
 80029d2:	2200      	movs	r2, #0
 80029d4:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80029d6:	78fa      	ldrb	r2, [r7, #3]
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	1a9b      	subs	r3, r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	440b      	add	r3, r1
 80029e4:	331c      	adds	r3, #28
 80029e6:	2200      	movs	r2, #0
 80029e8:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80029ea:	78fb      	ldrb	r3, [r7, #3]
 80029ec:	015a      	lsls	r2, r3, #5
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	4413      	add	r3, r2
 80029f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	78fa      	ldrb	r2, [r7, #3]
 80029fa:	0151      	lsls	r1, r2, #5
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	440a      	add	r2, r1
 8002a00:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a08:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002a0a:	78fa      	ldrb	r2, [r7, #3]
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	1a9b      	subs	r3, r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	440b      	add	r3, r1
 8002a18:	334c      	adds	r3, #76	@ 0x4c
 8002a1a:	2204      	movs	r2, #4
 8002a1c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002a1e:	e229      	b.n	8002e74 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a20:	78fa      	ldrb	r2, [r7, #3]
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	4613      	mov	r3, r2
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	1a9b      	subs	r3, r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	334c      	adds	r3, #76	@ 0x4c
 8002a30:	2202      	movs	r2, #2
 8002a32:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a34:	78fa      	ldrb	r2, [r7, #3]
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	1a9b      	subs	r3, r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	3326      	adds	r3, #38	@ 0x26
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00b      	beq.n	8002a62 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a4a:	78fa      	ldrb	r2, [r7, #3]
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	011b      	lsls	r3, r3, #4
 8002a52:	1a9b      	subs	r3, r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	3326      	adds	r3, #38	@ 0x26
 8002a5a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	f040 8209 	bne.w	8002e74 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a62:	78fb      	ldrb	r3, [r7, #3]
 8002a64:	015a      	lsls	r2, r3, #5
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	4413      	add	r3, r2
 8002a6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002a78:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a80:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a82:	78fb      	ldrb	r3, [r7, #3]
 8002a84:	015a      	lsls	r2, r3, #5
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4413      	add	r3, r2
 8002a8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a8e:	461a      	mov	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002a94:	e1ee      	b.n	8002e74 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002a96:	78fa      	ldrb	r2, [r7, #3]
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	1a9b      	subs	r3, r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	334d      	adds	r3, #77	@ 0x4d
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b05      	cmp	r3, #5
 8002aaa:	f040 80c8 	bne.w	8002c3e <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002aae:	78fa      	ldrb	r2, [r7, #3]
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	1a9b      	subs	r3, r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	334d      	adds	r3, #77	@ 0x4d
 8002abe:	2202      	movs	r2, #2
 8002ac0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002ac2:	78fa      	ldrb	r2, [r7, #3]
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	1a9b      	subs	r3, r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	440b      	add	r3, r1
 8002ad0:	331b      	adds	r3, #27
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	f040 81ce 	bne.w	8002e76 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002ada:	78fa      	ldrb	r2, [r7, #3]
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	1a9b      	subs	r3, r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	3326      	adds	r3, #38	@ 0x26
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b03      	cmp	r3, #3
 8002aee:	d16b      	bne.n	8002bc8 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	3348      	adds	r3, #72	@ 0x48
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	1c59      	adds	r1, r3, #1
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	1a9b      	subs	r3, r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4403      	add	r3, r0
 8002b10:	3348      	adds	r3, #72	@ 0x48
 8002b12:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002b14:	78fa      	ldrb	r2, [r7, #3]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	1a9b      	subs	r3, r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	3348      	adds	r3, #72	@ 0x48
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d943      	bls.n	8002bb2 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002b2a:	78fa      	ldrb	r2, [r7, #3]
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	1a9b      	subs	r3, r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	440b      	add	r3, r1
 8002b38:	3348      	adds	r3, #72	@ 0x48
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002b3e:	78fa      	ldrb	r2, [r7, #3]
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	1a9b      	subs	r3, r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	331b      	adds	r3, #27
 8002b4e:	2200      	movs	r2, #0
 8002b50:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002b52:	78fa      	ldrb	r2, [r7, #3]
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	1a9b      	subs	r3, r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	3344      	adds	r3, #68	@ 0x44
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d809      	bhi.n	8002b7c <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002b68:	78fa      	ldrb	r2, [r7, #3]
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	011b      	lsls	r3, r3, #4
 8002b70:	1a9b      	subs	r3, r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	331c      	adds	r3, #28
 8002b78:	2201      	movs	r2, #1
 8002b7a:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	78fa      	ldrb	r2, [r7, #3]
 8002b8c:	0151      	lsls	r1, r2, #5
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	440a      	add	r2, r1
 8002b92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b9a:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002b9c:	78fa      	ldrb	r2, [r7, #3]
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	011b      	lsls	r3, r3, #4
 8002ba4:	1a9b      	subs	r3, r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	334c      	adds	r3, #76	@ 0x4c
 8002bac:	2204      	movs	r2, #4
 8002bae:	701a      	strb	r2, [r3, #0]
 8002bb0:	e014      	b.n	8002bdc <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002bb2:	78fa      	ldrb	r2, [r7, #3]
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	1a9b      	subs	r3, r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	334c      	adds	r3, #76	@ 0x4c
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	701a      	strb	r2, [r3, #0]
 8002bc6:	e009      	b.n	8002bdc <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002bc8:	78fa      	ldrb	r2, [r7, #3]
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	1a9b      	subs	r3, r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	334c      	adds	r3, #76	@ 0x4c
 8002bd8:	2202      	movs	r2, #2
 8002bda:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	1a9b      	subs	r3, r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	3326      	adds	r3, #38	@ 0x26
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00b      	beq.n	8002c0a <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002bf2:	78fa      	ldrb	r2, [r7, #3]
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	1a9b      	subs	r3, r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	3326      	adds	r3, #38	@ 0x26
 8002c02:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	f040 8136 	bne.w	8002e76 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002c0a:	78fb      	ldrb	r3, [r7, #3]
 8002c0c:	015a      	lsls	r2, r3, #5
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	4413      	add	r3, r2
 8002c12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002c20:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002c28:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002c2a:	78fb      	ldrb	r3, [r7, #3]
 8002c2c:	015a      	lsls	r2, r3, #5
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	4413      	add	r3, r2
 8002c32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c36:	461a      	mov	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	e11b      	b.n	8002e76 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002c3e:	78fa      	ldrb	r2, [r7, #3]
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	4613      	mov	r3, r2
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	1a9b      	subs	r3, r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	334d      	adds	r3, #77	@ 0x4d
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	f040 8081 	bne.w	8002d58 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c56:	78fa      	ldrb	r2, [r7, #3]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	334d      	adds	r3, #77	@ 0x4d
 8002c66:	2202      	movs	r2, #2
 8002c68:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002c6a:	78fa      	ldrb	r2, [r7, #3]
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	1a9b      	subs	r3, r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	440b      	add	r3, r1
 8002c78:	331b      	adds	r3, #27
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	f040 80fa 	bne.w	8002e76 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c82:	78fa      	ldrb	r2, [r7, #3]
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	1a9b      	subs	r3, r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	334c      	adds	r3, #76	@ 0x4c
 8002c92:	2202      	movs	r2, #2
 8002c94:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002c96:	78fb      	ldrb	r3, [r7, #3]
 8002c98:	015a      	lsls	r2, r3, #5
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	78fa      	ldrb	r2, [r7, #3]
 8002ca6:	0151      	lsls	r1, r2, #5
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	440a      	add	r2, r1
 8002cac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002cb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cb4:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002cb6:	78fb      	ldrb	r3, [r7, #3]
 8002cb8:	015a      	lsls	r2, r3, #5
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	78fa      	ldrb	r2, [r7, #3]
 8002cc6:	0151      	lsls	r1, r2, #5
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	440a      	add	r2, r1
 8002ccc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002cd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cd4:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002cd6:	78fb      	ldrb	r3, [r7, #3]
 8002cd8:	015a      	lsls	r2, r3, #5
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4413      	add	r3, r2
 8002cde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	0151      	lsls	r1, r2, #5
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	440a      	add	r2, r1
 8002cec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002cf0:	f023 0320 	bic.w	r3, r3, #32
 8002cf4:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002cf6:	78fa      	ldrb	r2, [r7, #3]
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	011b      	lsls	r3, r3, #4
 8002cfe:	1a9b      	subs	r3, r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	3326      	adds	r3, #38	@ 0x26
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00b      	beq.n	8002d24 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d0c:	78fa      	ldrb	r2, [r7, #3]
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	1a9b      	subs	r3, r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	3326      	adds	r3, #38	@ 0x26
 8002d1c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	f040 80a9 	bne.w	8002e76 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002d24:	78fb      	ldrb	r3, [r7, #3]
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002d3a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002d42:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002d44:	78fb      	ldrb	r3, [r7, #3]
 8002d46:	015a      	lsls	r2, r3, #5
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d50:	461a      	mov	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	e08e      	b.n	8002e76 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002d58:	78fa      	ldrb	r2, [r7, #3]
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	334d      	adds	r3, #77	@ 0x4d
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d143      	bne.n	8002df6 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d6e:	78fa      	ldrb	r2, [r7, #3]
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	011b      	lsls	r3, r3, #4
 8002d76:	1a9b      	subs	r3, r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	440b      	add	r3, r1
 8002d7c:	334d      	adds	r3, #77	@ 0x4d
 8002d7e:	2202      	movs	r2, #2
 8002d80:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	1a9b      	subs	r3, r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	334c      	adds	r3, #76	@ 0x4c
 8002d92:	2202      	movs	r2, #2
 8002d94:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d96:	78fa      	ldrb	r2, [r7, #3]
 8002d98:	6879      	ldr	r1, [r7, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	1a9b      	subs	r3, r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	440b      	add	r3, r1
 8002da4:	3326      	adds	r3, #38	@ 0x26
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00a      	beq.n	8002dc2 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002dac:	78fa      	ldrb	r2, [r7, #3]
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	4613      	mov	r3, r2
 8002db2:	011b      	lsls	r3, r3, #4
 8002db4:	1a9b      	subs	r3, r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	3326      	adds	r3, #38	@ 0x26
 8002dbc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d159      	bne.n	8002e76 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002dc2:	78fb      	ldrb	r3, [r7, #3]
 8002dc4:	015a      	lsls	r2, r3, #5
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	4413      	add	r3, r2
 8002dca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002dd8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002de0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002de2:	78fb      	ldrb	r3, [r7, #3]
 8002de4:	015a      	lsls	r2, r3, #5
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dee:	461a      	mov	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6013      	str	r3, [r2, #0]
 8002df4:	e03f      	b.n	8002e76 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002df6:	78fa      	ldrb	r2, [r7, #3]
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	011b      	lsls	r3, r3, #4
 8002dfe:	1a9b      	subs	r3, r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	440b      	add	r3, r1
 8002e04:	334d      	adds	r3, #77	@ 0x4d
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d126      	bne.n	8002e5a <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e0c:	78fa      	ldrb	r2, [r7, #3]
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	1a9b      	subs	r3, r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	334d      	adds	r3, #77	@ 0x4d
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002e20:	78fa      	ldrb	r2, [r7, #3]
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	011b      	lsls	r3, r3, #4
 8002e28:	1a9b      	subs	r3, r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	3344      	adds	r3, #68	@ 0x44
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	1c59      	adds	r1, r3, #1
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	4613      	mov	r3, r2
 8002e38:	011b      	lsls	r3, r3, #4
 8002e3a:	1a9b      	subs	r3, r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4403      	add	r3, r0
 8002e40:	3344      	adds	r3, #68	@ 0x44
 8002e42:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002e44:	78fa      	ldrb	r2, [r7, #3]
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	1a9b      	subs	r3, r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	334c      	adds	r3, #76	@ 0x4c
 8002e54:	2204      	movs	r2, #4
 8002e56:	701a      	strb	r2, [r3, #0]
 8002e58:	e00d      	b.n	8002e76 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002e5a:	78fa      	ldrb	r2, [r7, #3]
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	1a9b      	subs	r3, r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	440b      	add	r3, r1
 8002e68:	334d      	adds	r3, #77	@ 0x4d
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	f000 8100 	beq.w	8003072 <HCD_HC_IN_IRQHandler+0xcca>
 8002e72:	e000      	b.n	8002e76 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e74:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002e76:	78fa      	ldrb	r2, [r7, #3]
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	011b      	lsls	r3, r3, #4
 8002e7e:	1a9b      	subs	r3, r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	440b      	add	r3, r1
 8002e84:	334c      	adds	r3, #76	@ 0x4c
 8002e86:	781a      	ldrb	r2, [r3, #0]
 8002e88:	78fb      	ldrb	r3, [r7, #3]
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f004 fa4f 	bl	8007330 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002e92:	e0ef      	b.n	8003074 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	78fa      	ldrb	r2, [r7, #3]
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f002 fed8 	bl	8005c52 <USB_ReadChInterrupts>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea8:	2b40      	cmp	r3, #64	@ 0x40
 8002eaa:	d12f      	bne.n	8002f0c <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002eac:	78fb      	ldrb	r3, [r7, #3]
 8002eae:	015a      	lsls	r2, r3, #5
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2340      	movs	r3, #64	@ 0x40
 8002ebc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002ebe:	78fa      	ldrb	r2, [r7, #3]
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	1a9b      	subs	r3, r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	334d      	adds	r3, #77	@ 0x4d
 8002ece:	2205      	movs	r2, #5
 8002ed0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002ed2:	78fa      	ldrb	r2, [r7, #3]
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	011b      	lsls	r3, r3, #4
 8002eda:	1a9b      	subs	r3, r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	331a      	adds	r3, #26
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d109      	bne.n	8002efc <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002ee8:	78fa      	ldrb	r2, [r7, #3]
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	1a9b      	subs	r3, r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	3344      	adds	r3, #68	@ 0x44
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	78fa      	ldrb	r2, [r7, #3]
 8002f02:	4611      	mov	r1, r2
 8002f04:	4618      	mov	r0, r3
 8002f06:	f002 ff21 	bl	8005d4c <USB_HC_Halt>
 8002f0a:	e0b3      	b.n	8003074 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	78fa      	ldrb	r2, [r7, #3]
 8002f12:	4611      	mov	r1, r2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f002 fe9c 	bl	8005c52 <USB_ReadChInterrupts>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	f003 0310 	and.w	r3, r3, #16
 8002f20:	2b10      	cmp	r3, #16
 8002f22:	f040 80a7 	bne.w	8003074 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002f26:	78fa      	ldrb	r2, [r7, #3]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	1a9b      	subs	r3, r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	3326      	adds	r3, #38	@ 0x26
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b03      	cmp	r3, #3
 8002f3a:	d11b      	bne.n	8002f74 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002f3c:	78fa      	ldrb	r2, [r7, #3]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	3344      	adds	r3, #68	@ 0x44
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002f50:	78fa      	ldrb	r2, [r7, #3]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	1a9b      	subs	r3, r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	334d      	adds	r3, #77	@ 0x4d
 8002f60:	2204      	movs	r2, #4
 8002f62:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	78fa      	ldrb	r2, [r7, #3]
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f002 feed 	bl	8005d4c <USB_HC_Halt>
 8002f72:	e03f      	b.n	8002ff4 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f74:	78fa      	ldrb	r2, [r7, #3]
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	1a9b      	subs	r3, r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	3326      	adds	r3, #38	@ 0x26
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00a      	beq.n	8002fa0 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002f8a:	78fa      	ldrb	r2, [r7, #3]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	3326      	adds	r3, #38	@ 0x26
 8002f9a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d129      	bne.n	8002ff4 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002fa0:	78fa      	ldrb	r2, [r7, #3]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	3344      	adds	r3, #68	@ 0x44
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	799b      	ldrb	r3, [r3, #6]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00a      	beq.n	8002fd2 <HCD_HC_IN_IRQHandler+0xc2a>
 8002fbc:	78fa      	ldrb	r2, [r7, #3]
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	1a9b      	subs	r3, r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	331b      	adds	r3, #27
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d110      	bne.n	8002ff4 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002fd2:	78fa      	ldrb	r2, [r7, #3]
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	1a9b      	subs	r3, r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	440b      	add	r3, r1
 8002fe0:	334d      	adds	r3, #77	@ 0x4d
 8002fe2:	2204      	movs	r2, #4
 8002fe4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	78fa      	ldrb	r2, [r7, #3]
 8002fec:	4611      	mov	r1, r2
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f002 feac 	bl	8005d4c <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002ff4:	78fa      	ldrb	r2, [r7, #3]
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	1a9b      	subs	r3, r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	331b      	adds	r3, #27
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d129      	bne.n	800305e <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800300a:	78fa      	ldrb	r2, [r7, #3]
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	1a9b      	subs	r3, r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	331b      	adds	r3, #27
 800301a:	2200      	movs	r2, #0
 800301c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800301e:	78fb      	ldrb	r3, [r7, #3]
 8003020:	015a      	lsls	r2, r3, #5
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4413      	add	r3, r2
 8003026:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	0151      	lsls	r1, r2, #5
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	440a      	add	r2, r1
 8003034:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003038:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800303c:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800303e:	78fb      	ldrb	r3, [r7, #3]
 8003040:	015a      	lsls	r2, r3, #5
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4413      	add	r3, r2
 8003046:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	78fa      	ldrb	r2, [r7, #3]
 800304e:	0151      	lsls	r1, r2, #5
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	440a      	add	r2, r1
 8003054:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003058:	f043 0320 	orr.w	r3, r3, #32
 800305c:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800305e:	78fb      	ldrb	r3, [r7, #3]
 8003060:	015a      	lsls	r2, r3, #5
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	4413      	add	r3, r2
 8003066:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800306a:	461a      	mov	r2, r3
 800306c:	2310      	movs	r3, #16
 800306e:	6093      	str	r3, [r2, #8]
 8003070:	e000      	b.n	8003074 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003072:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b086      	sub	sp, #24
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
 8003082:	460b      	mov	r3, r1
 8003084:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	78fa      	ldrb	r2, [r7, #3]
 8003096:	4611      	mov	r1, r2
 8003098:	4618      	mov	r0, r3
 800309a:	f002 fdda 	bl	8005c52 <USB_ReadChInterrupts>
 800309e:	4603      	mov	r3, r0
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d11b      	bne.n	80030e0 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80030a8:	78fb      	ldrb	r3, [r7, #3]
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030b4:	461a      	mov	r2, r3
 80030b6:	2304      	movs	r3, #4
 80030b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80030ba:	78fa      	ldrb	r2, [r7, #3]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	1a9b      	subs	r3, r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	334d      	adds	r3, #77	@ 0x4d
 80030ca:	2207      	movs	r2, #7
 80030cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	78fa      	ldrb	r2, [r7, #3]
 80030d4:	4611      	mov	r1, r2
 80030d6:	4618      	mov	r0, r3
 80030d8:	f002 fe38 	bl	8005d4c <USB_HC_Halt>
 80030dc:	f000 bc89 	b.w	80039f2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	78fa      	ldrb	r2, [r7, #3]
 80030e6:	4611      	mov	r1, r2
 80030e8:	4618      	mov	r0, r3
 80030ea:	f002 fdb2 	bl	8005c52 <USB_ReadChInterrupts>
 80030ee:	4603      	mov	r3, r0
 80030f0:	f003 0320 	and.w	r3, r3, #32
 80030f4:	2b20      	cmp	r3, #32
 80030f6:	f040 8082 	bne.w	80031fe <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80030fa:	78fb      	ldrb	r3, [r7, #3]
 80030fc:	015a      	lsls	r2, r3, #5
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	4413      	add	r3, r2
 8003102:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003106:	461a      	mov	r2, r3
 8003108:	2320      	movs	r3, #32
 800310a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800310c:	78fa      	ldrb	r2, [r7, #3]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	3319      	adds	r3, #25
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d124      	bne.n	800316c <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	1a9b      	subs	r3, r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	3319      	adds	r3, #25
 8003132:	2200      	movs	r2, #0
 8003134:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003136:	78fa      	ldrb	r2, [r7, #3]
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	011b      	lsls	r3, r3, #4
 800313e:	1a9b      	subs	r3, r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	334c      	adds	r3, #76	@ 0x4c
 8003146:	2202      	movs	r2, #2
 8003148:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800314a:	78fa      	ldrb	r2, [r7, #3]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	1a9b      	subs	r3, r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	334d      	adds	r3, #77	@ 0x4d
 800315a:	2203      	movs	r2, #3
 800315c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	78fa      	ldrb	r2, [r7, #3]
 8003164:	4611      	mov	r1, r2
 8003166:	4618      	mov	r0, r3
 8003168:	f002 fdf0 	bl	8005d4c <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	331a      	adds	r3, #26
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b01      	cmp	r3, #1
 8003180:	f040 8437 	bne.w	80039f2 <HCD_HC_OUT_IRQHandler+0x978>
 8003184:	78fa      	ldrb	r2, [r7, #3]
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	4613      	mov	r3, r2
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	1a9b      	subs	r3, r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	331b      	adds	r3, #27
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	f040 842b 	bne.w	80039f2 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800319c:	78fa      	ldrb	r2, [r7, #3]
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	1a9b      	subs	r3, r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	3326      	adds	r3, #38	@ 0x26
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d009      	beq.n	80031c6 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80031b2:	78fa      	ldrb	r2, [r7, #3]
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	1a9b      	subs	r3, r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	331b      	adds	r3, #27
 80031c2:	2201      	movs	r2, #1
 80031c4:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80031c6:	78fa      	ldrb	r2, [r7, #3]
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	1a9b      	subs	r3, r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	440b      	add	r3, r1
 80031d4:	334d      	adds	r3, #77	@ 0x4d
 80031d6:	2203      	movs	r2, #3
 80031d8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	78fa      	ldrb	r2, [r7, #3]
 80031e0:	4611      	mov	r1, r2
 80031e2:	4618      	mov	r0, r3
 80031e4:	f002 fdb2 	bl	8005d4c <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80031e8:	78fa      	ldrb	r2, [r7, #3]
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	1a9b      	subs	r3, r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	3344      	adds	r3, #68	@ 0x44
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	e3f9      	b.n	80039f2 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	4611      	mov	r1, r2
 8003206:	4618      	mov	r0, r3
 8003208:	f002 fd23 	bl	8005c52 <USB_ReadChInterrupts>
 800320c:	4603      	mov	r3, r0
 800320e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003212:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003216:	d111      	bne.n	800323c <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003218:	78fb      	ldrb	r3, [r7, #3]
 800321a:	015a      	lsls	r2, r3, #5
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4413      	add	r3, r2
 8003220:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003224:	461a      	mov	r2, r3
 8003226:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800322a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	78fa      	ldrb	r2, [r7, #3]
 8003232:	4611      	mov	r1, r2
 8003234:	4618      	mov	r0, r3
 8003236:	f002 fd89 	bl	8005d4c <USB_HC_Halt>
 800323a:	e3da      	b.n	80039f2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	78fa      	ldrb	r2, [r7, #3]
 8003242:	4611      	mov	r1, r2
 8003244:	4618      	mov	r0, r3
 8003246:	f002 fd04 	bl	8005c52 <USB_ReadChInterrupts>
 800324a:	4603      	mov	r3, r0
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b01      	cmp	r3, #1
 8003252:	d168      	bne.n	8003326 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003254:	78fa      	ldrb	r2, [r7, #3]
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	4613      	mov	r3, r2
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	1a9b      	subs	r3, r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	3344      	adds	r3, #68	@ 0x44
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	78fa      	ldrb	r2, [r7, #3]
 800326e:	4611      	mov	r1, r2
 8003270:	4618      	mov	r0, r3
 8003272:	f002 fcee 	bl	8005c52 <USB_ReadChInterrupts>
 8003276:	4603      	mov	r3, r0
 8003278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800327c:	2b40      	cmp	r3, #64	@ 0x40
 800327e:	d112      	bne.n	80032a6 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003280:	78fa      	ldrb	r2, [r7, #3]
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	1a9b      	subs	r3, r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	3319      	adds	r3, #25
 8003290:	2201      	movs	r2, #1
 8003292:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003294:	78fb      	ldrb	r3, [r7, #3]
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	4413      	add	r3, r2
 800329c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032a0:	461a      	mov	r2, r3
 80032a2:	2340      	movs	r3, #64	@ 0x40
 80032a4:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80032a6:	78fa      	ldrb	r2, [r7, #3]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	1a9b      	subs	r3, r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	331b      	adds	r3, #27
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d019      	beq.n	80032f0 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80032bc:	78fa      	ldrb	r2, [r7, #3]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	1a9b      	subs	r3, r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	331b      	adds	r3, #27
 80032cc:	2200      	movs	r2, #0
 80032ce:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80032d0:	78fb      	ldrb	r3, [r7, #3]
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	78fa      	ldrb	r2, [r7, #3]
 80032e0:	0151      	lsls	r1, r2, #5
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	440a      	add	r2, r1
 80032e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ee:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80032f0:	78fb      	ldrb	r3, [r7, #3]
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032fc:	461a      	mov	r2, r3
 80032fe:	2301      	movs	r3, #1
 8003300:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003302:	78fa      	ldrb	r2, [r7, #3]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	1a9b      	subs	r3, r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	440b      	add	r3, r1
 8003310:	334d      	adds	r3, #77	@ 0x4d
 8003312:	2201      	movs	r2, #1
 8003314:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	78fa      	ldrb	r2, [r7, #3]
 800331c:	4611      	mov	r1, r2
 800331e:	4618      	mov	r0, r3
 8003320:	f002 fd14 	bl	8005d4c <USB_HC_Halt>
 8003324:	e365      	b.n	80039f2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	78fa      	ldrb	r2, [r7, #3]
 800332c:	4611      	mov	r1, r2
 800332e:	4618      	mov	r0, r3
 8003330:	f002 fc8f 	bl	8005c52 <USB_ReadChInterrupts>
 8003334:	4603      	mov	r3, r0
 8003336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800333a:	2b40      	cmp	r3, #64	@ 0x40
 800333c:	d139      	bne.n	80033b2 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800333e:	78fa      	ldrb	r2, [r7, #3]
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	1a9b      	subs	r3, r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	440b      	add	r3, r1
 800334c:	334d      	adds	r3, #77	@ 0x4d
 800334e:	2205      	movs	r2, #5
 8003350:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003352:	78fa      	ldrb	r2, [r7, #3]
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	331a      	adds	r3, #26
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d109      	bne.n	800337c <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003368:	78fa      	ldrb	r2, [r7, #3]
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	1a9b      	subs	r3, r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	3319      	adds	r3, #25
 8003378:	2201      	movs	r2, #1
 800337a:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800337c:	78fa      	ldrb	r2, [r7, #3]
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	1a9b      	subs	r3, r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	3344      	adds	r3, #68	@ 0x44
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	78fa      	ldrb	r2, [r7, #3]
 8003396:	4611      	mov	r1, r2
 8003398:	4618      	mov	r0, r3
 800339a:	f002 fcd7 	bl	8005d4c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800339e:	78fb      	ldrb	r3, [r7, #3]
 80033a0:	015a      	lsls	r2, r3, #5
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033aa:	461a      	mov	r2, r3
 80033ac:	2340      	movs	r3, #64	@ 0x40
 80033ae:	6093      	str	r3, [r2, #8]
 80033b0:	e31f      	b.n	80039f2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	78fa      	ldrb	r2, [r7, #3]
 80033b8:	4611      	mov	r1, r2
 80033ba:	4618      	mov	r0, r3
 80033bc:	f002 fc49 	bl	8005c52 <USB_ReadChInterrupts>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d11a      	bne.n	8003400 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80033ca:	78fb      	ldrb	r3, [r7, #3]
 80033cc:	015a      	lsls	r2, r3, #5
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	4413      	add	r3, r2
 80033d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033d6:	461a      	mov	r2, r3
 80033d8:	2308      	movs	r3, #8
 80033da:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80033dc:	78fa      	ldrb	r2, [r7, #3]
 80033de:	6879      	ldr	r1, [r7, #4]
 80033e0:	4613      	mov	r3, r2
 80033e2:	011b      	lsls	r3, r3, #4
 80033e4:	1a9b      	subs	r3, r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	334d      	adds	r3, #77	@ 0x4d
 80033ec:	2206      	movs	r2, #6
 80033ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	78fa      	ldrb	r2, [r7, #3]
 80033f6:	4611      	mov	r1, r2
 80033f8:	4618      	mov	r0, r3
 80033fa:	f002 fca7 	bl	8005d4c <USB_HC_Halt>
 80033fe:	e2f8      	b.n	80039f2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	78fa      	ldrb	r2, [r7, #3]
 8003406:	4611      	mov	r1, r2
 8003408:	4618      	mov	r0, r3
 800340a:	f002 fc22 	bl	8005c52 <USB_ReadChInterrupts>
 800340e:	4603      	mov	r3, r0
 8003410:	f003 0310 	and.w	r3, r3, #16
 8003414:	2b10      	cmp	r3, #16
 8003416:	d144      	bne.n	80034a2 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003418:	78fa      	ldrb	r2, [r7, #3]
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	1a9b      	subs	r3, r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	3344      	adds	r3, #68	@ 0x44
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800342c:	78fa      	ldrb	r2, [r7, #3]
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	4613      	mov	r3, r2
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	1a9b      	subs	r3, r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	334d      	adds	r3, #77	@ 0x4d
 800343c:	2204      	movs	r2, #4
 800343e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003440:	78fa      	ldrb	r2, [r7, #3]
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	4613      	mov	r3, r2
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	1a9b      	subs	r3, r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	3319      	adds	r3, #25
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d114      	bne.n	8003480 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003456:	78fa      	ldrb	r2, [r7, #3]
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	4613      	mov	r3, r2
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	1a9b      	subs	r3, r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	440b      	add	r3, r1
 8003464:	3318      	adds	r3, #24
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d109      	bne.n	8003480 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800346c:	78fa      	ldrb	r2, [r7, #3]
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	1a9b      	subs	r3, r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	3319      	adds	r3, #25
 800347c:	2201      	movs	r2, #1
 800347e:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	78fa      	ldrb	r2, [r7, #3]
 8003486:	4611      	mov	r1, r2
 8003488:	4618      	mov	r0, r3
 800348a:	f002 fc5f 	bl	8005d4c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800348e:	78fb      	ldrb	r3, [r7, #3]
 8003490:	015a      	lsls	r2, r3, #5
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4413      	add	r3, r2
 8003496:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800349a:	461a      	mov	r2, r3
 800349c:	2310      	movs	r3, #16
 800349e:	6093      	str	r3, [r2, #8]
 80034a0:	e2a7      	b.n	80039f2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	78fa      	ldrb	r2, [r7, #3]
 80034a8:	4611      	mov	r1, r2
 80034aa:	4618      	mov	r0, r3
 80034ac:	f002 fbd1 	bl	8005c52 <USB_ReadChInterrupts>
 80034b0:	4603      	mov	r3, r0
 80034b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034b6:	2b80      	cmp	r3, #128	@ 0x80
 80034b8:	f040 8083 	bne.w	80035c2 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	799b      	ldrb	r3, [r3, #6]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d111      	bne.n	80034e8 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80034c4:	78fa      	ldrb	r2, [r7, #3]
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	4613      	mov	r3, r2
 80034ca:	011b      	lsls	r3, r3, #4
 80034cc:	1a9b      	subs	r3, r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	334d      	adds	r3, #77	@ 0x4d
 80034d4:	2207      	movs	r2, #7
 80034d6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	78fa      	ldrb	r2, [r7, #3]
 80034de:	4611      	mov	r1, r2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f002 fc33 	bl	8005d4c <USB_HC_Halt>
 80034e6:	e062      	b.n	80035ae <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80034e8:	78fa      	ldrb	r2, [r7, #3]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	3344      	adds	r3, #68	@ 0x44
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	1c59      	adds	r1, r3, #1
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	1a9b      	subs	r3, r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4403      	add	r3, r0
 8003508:	3344      	adds	r3, #68	@ 0x44
 800350a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800350c:	78fa      	ldrb	r2, [r7, #3]
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	4613      	mov	r3, r2
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	1a9b      	subs	r3, r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	3344      	adds	r3, #68	@ 0x44
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2b02      	cmp	r3, #2
 8003520:	d922      	bls.n	8003568 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003522:	78fa      	ldrb	r2, [r7, #3]
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	4613      	mov	r3, r2
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	1a9b      	subs	r3, r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	440b      	add	r3, r1
 8003530:	3344      	adds	r3, #68	@ 0x44
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003536:	78fa      	ldrb	r2, [r7, #3]
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	4613      	mov	r3, r2
 800353c:	011b      	lsls	r3, r3, #4
 800353e:	1a9b      	subs	r3, r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	440b      	add	r3, r1
 8003544:	334c      	adds	r3, #76	@ 0x4c
 8003546:	2204      	movs	r2, #4
 8003548:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800354a:	78fa      	ldrb	r2, [r7, #3]
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	4613      	mov	r3, r2
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	1a9b      	subs	r3, r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	440b      	add	r3, r1
 8003558:	334c      	adds	r3, #76	@ 0x4c
 800355a:	781a      	ldrb	r2, [r3, #0]
 800355c:	78fb      	ldrb	r3, [r7, #3]
 800355e:	4619      	mov	r1, r3
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f003 fee5 	bl	8007330 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003566:	e022      	b.n	80035ae <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003568:	78fa      	ldrb	r2, [r7, #3]
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	4613      	mov	r3, r2
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	1a9b      	subs	r3, r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	334c      	adds	r3, #76	@ 0x4c
 8003578:	2202      	movs	r2, #2
 800357a:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800357c:	78fb      	ldrb	r3, [r7, #3]
 800357e:	015a      	lsls	r2, r3, #5
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	4413      	add	r3, r2
 8003584:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003592:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800359a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800359c:	78fb      	ldrb	r3, [r7, #3]
 800359e:	015a      	lsls	r2, r3, #5
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	4413      	add	r3, r2
 80035a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035a8:	461a      	mov	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80035ae:	78fb      	ldrb	r3, [r7, #3]
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ba:	461a      	mov	r2, r3
 80035bc:	2380      	movs	r3, #128	@ 0x80
 80035be:	6093      	str	r3, [r2, #8]
 80035c0:	e217      	b.n	80039f2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	78fa      	ldrb	r2, [r7, #3]
 80035c8:	4611      	mov	r1, r2
 80035ca:	4618      	mov	r0, r3
 80035cc:	f002 fb41 	bl	8005c52 <USB_ReadChInterrupts>
 80035d0:	4603      	mov	r3, r0
 80035d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035da:	d11b      	bne.n	8003614 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80035dc:	78fa      	ldrb	r2, [r7, #3]
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	4613      	mov	r3, r2
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	1a9b      	subs	r3, r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	334d      	adds	r3, #77	@ 0x4d
 80035ec:	2209      	movs	r2, #9
 80035ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	78fa      	ldrb	r2, [r7, #3]
 80035f6:	4611      	mov	r1, r2
 80035f8:	4618      	mov	r0, r3
 80035fa:	f002 fba7 	bl	8005d4c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80035fe:	78fb      	ldrb	r3, [r7, #3]
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4413      	add	r3, r2
 8003606:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800360a:	461a      	mov	r2, r3
 800360c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003610:	6093      	str	r3, [r2, #8]
 8003612:	e1ee      	b.n	80039f2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	78fa      	ldrb	r2, [r7, #3]
 800361a:	4611      	mov	r1, r2
 800361c:	4618      	mov	r0, r3
 800361e:	f002 fb18 	bl	8005c52 <USB_ReadChInterrupts>
 8003622:	4603      	mov	r3, r0
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b02      	cmp	r3, #2
 800362a:	f040 81df 	bne.w	80039ec <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800362e:	78fb      	ldrb	r3, [r7, #3]
 8003630:	015a      	lsls	r2, r3, #5
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	4413      	add	r3, r2
 8003636:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800363a:	461a      	mov	r2, r3
 800363c:	2302      	movs	r3, #2
 800363e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003640:	78fa      	ldrb	r2, [r7, #3]
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	4613      	mov	r3, r2
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	1a9b      	subs	r3, r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	334d      	adds	r3, #77	@ 0x4d
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	2b01      	cmp	r3, #1
 8003654:	f040 8093 	bne.w	800377e <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003658:	78fa      	ldrb	r2, [r7, #3]
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	1a9b      	subs	r3, r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	334d      	adds	r3, #77	@ 0x4d
 8003668:	2202      	movs	r2, #2
 800366a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800366c:	78fa      	ldrb	r2, [r7, #3]
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	4613      	mov	r3, r2
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	1a9b      	subs	r3, r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	334c      	adds	r3, #76	@ 0x4c
 800367c:	2201      	movs	r2, #1
 800367e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003680:	78fa      	ldrb	r2, [r7, #3]
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	1a9b      	subs	r3, r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	3326      	adds	r3, #38	@ 0x26
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d00b      	beq.n	80036ae <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003696:	78fa      	ldrb	r2, [r7, #3]
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	4613      	mov	r3, r2
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	1a9b      	subs	r3, r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	3326      	adds	r3, #38	@ 0x26
 80036a6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80036a8:	2b03      	cmp	r3, #3
 80036aa:	f040 8190 	bne.w	80039ce <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	799b      	ldrb	r3, [r3, #6]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d115      	bne.n	80036e2 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80036b6:	78fa      	ldrb	r2, [r7, #3]
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	4613      	mov	r3, r2
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	1a9b      	subs	r3, r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	333d      	adds	r3, #61	@ 0x3d
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	78fa      	ldrb	r2, [r7, #3]
 80036ca:	f083 0301 	eor.w	r3, r3, #1
 80036ce:	b2d8      	uxtb	r0, r3
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	4613      	mov	r3, r2
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	1a9b      	subs	r3, r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	440b      	add	r3, r1
 80036dc:	333d      	adds	r3, #61	@ 0x3d
 80036de:	4602      	mov	r2, r0
 80036e0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	799b      	ldrb	r3, [r3, #6]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	f040 8171 	bne.w	80039ce <HCD_HC_OUT_IRQHandler+0x954>
 80036ec:	78fa      	ldrb	r2, [r7, #3]
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	4613      	mov	r3, r2
 80036f2:	011b      	lsls	r3, r3, #4
 80036f4:	1a9b      	subs	r3, r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	440b      	add	r3, r1
 80036fa:	3334      	adds	r3, #52	@ 0x34
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 8165 	beq.w	80039ce <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003704:	78fa      	ldrb	r2, [r7, #3]
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	1a9b      	subs	r3, r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	3334      	adds	r3, #52	@ 0x34
 8003714:	6819      	ldr	r1, [r3, #0]
 8003716:	78fa      	ldrb	r2, [r7, #3]
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	4613      	mov	r3, r2
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	1a9b      	subs	r3, r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4403      	add	r3, r0
 8003724:	3328      	adds	r3, #40	@ 0x28
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	440b      	add	r3, r1
 800372a:	1e59      	subs	r1, r3, #1
 800372c:	78fa      	ldrb	r2, [r7, #3]
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4403      	add	r3, r0
 800373a:	3328      	adds	r3, #40	@ 0x28
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003742:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 813f 	beq.w	80039ce <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003750:	78fa      	ldrb	r2, [r7, #3]
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	4613      	mov	r3, r2
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	1a9b      	subs	r3, r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	333d      	adds	r3, #61	@ 0x3d
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	78fa      	ldrb	r2, [r7, #3]
 8003764:	f083 0301 	eor.w	r3, r3, #1
 8003768:	b2d8      	uxtb	r0, r3
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	1a9b      	subs	r3, r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	333d      	adds	r3, #61	@ 0x3d
 8003778:	4602      	mov	r2, r0
 800377a:	701a      	strb	r2, [r3, #0]
 800377c:	e127      	b.n	80039ce <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800377e:	78fa      	ldrb	r2, [r7, #3]
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	4613      	mov	r3, r2
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	1a9b      	subs	r3, r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	440b      	add	r3, r1
 800378c:	334d      	adds	r3, #77	@ 0x4d
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b03      	cmp	r3, #3
 8003792:	d120      	bne.n	80037d6 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003794:	78fa      	ldrb	r2, [r7, #3]
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	4613      	mov	r3, r2
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	1a9b      	subs	r3, r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	334d      	adds	r3, #77	@ 0x4d
 80037a4:	2202      	movs	r2, #2
 80037a6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80037a8:	78fa      	ldrb	r2, [r7, #3]
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	4613      	mov	r3, r2
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	1a9b      	subs	r3, r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	331b      	adds	r3, #27
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	f040 8107 	bne.w	80039ce <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037c0:	78fa      	ldrb	r2, [r7, #3]
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	4613      	mov	r3, r2
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	1a9b      	subs	r3, r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	334c      	adds	r3, #76	@ 0x4c
 80037d0:	2202      	movs	r2, #2
 80037d2:	701a      	strb	r2, [r3, #0]
 80037d4:	e0fb      	b.n	80039ce <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80037d6:	78fa      	ldrb	r2, [r7, #3]
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	4613      	mov	r3, r2
 80037dc:	011b      	lsls	r3, r3, #4
 80037de:	1a9b      	subs	r3, r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	440b      	add	r3, r1
 80037e4:	334d      	adds	r3, #77	@ 0x4d
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	d13a      	bne.n	8003862 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037ec:	78fa      	ldrb	r2, [r7, #3]
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	4613      	mov	r3, r2
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	1a9b      	subs	r3, r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	334d      	adds	r3, #77	@ 0x4d
 80037fc:	2202      	movs	r2, #2
 80037fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003800:	78fa      	ldrb	r2, [r7, #3]
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	4613      	mov	r3, r2
 8003806:	011b      	lsls	r3, r3, #4
 8003808:	1a9b      	subs	r3, r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	334c      	adds	r3, #76	@ 0x4c
 8003810:	2202      	movs	r2, #2
 8003812:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003814:	78fa      	ldrb	r2, [r7, #3]
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	4613      	mov	r3, r2
 800381a:	011b      	lsls	r3, r3, #4
 800381c:	1a9b      	subs	r3, r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	440b      	add	r3, r1
 8003822:	331b      	adds	r3, #27
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	2b01      	cmp	r3, #1
 8003828:	f040 80d1 	bne.w	80039ce <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800382c:	78fa      	ldrb	r2, [r7, #3]
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	4613      	mov	r3, r2
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	1a9b      	subs	r3, r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	331b      	adds	r3, #27
 800383c:	2200      	movs	r2, #0
 800383e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003840:	78fb      	ldrb	r3, [r7, #3]
 8003842:	015a      	lsls	r2, r3, #5
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	4413      	add	r3, r2
 8003848:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	78fa      	ldrb	r2, [r7, #3]
 8003850:	0151      	lsls	r1, r2, #5
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	440a      	add	r2, r1
 8003856:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800385a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800385e:	6053      	str	r3, [r2, #4]
 8003860:	e0b5      	b.n	80039ce <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003862:	78fa      	ldrb	r2, [r7, #3]
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	4613      	mov	r3, r2
 8003868:	011b      	lsls	r3, r3, #4
 800386a:	1a9b      	subs	r3, r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	440b      	add	r3, r1
 8003870:	334d      	adds	r3, #77	@ 0x4d
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b05      	cmp	r3, #5
 8003876:	d114      	bne.n	80038a2 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003878:	78fa      	ldrb	r2, [r7, #3]
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	4613      	mov	r3, r2
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	1a9b      	subs	r3, r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	334d      	adds	r3, #77	@ 0x4d
 8003888:	2202      	movs	r2, #2
 800388a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800388c:	78fa      	ldrb	r2, [r7, #3]
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	4613      	mov	r3, r2
 8003892:	011b      	lsls	r3, r3, #4
 8003894:	1a9b      	subs	r3, r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	334c      	adds	r3, #76	@ 0x4c
 800389c:	2202      	movs	r2, #2
 800389e:	701a      	strb	r2, [r3, #0]
 80038a0:	e095      	b.n	80039ce <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80038a2:	78fa      	ldrb	r2, [r7, #3]
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	4613      	mov	r3, r2
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	1a9b      	subs	r3, r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	440b      	add	r3, r1
 80038b0:	334d      	adds	r3, #77	@ 0x4d
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	2b06      	cmp	r3, #6
 80038b6:	d114      	bne.n	80038e2 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038b8:	78fa      	ldrb	r2, [r7, #3]
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	4613      	mov	r3, r2
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	1a9b      	subs	r3, r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	334d      	adds	r3, #77	@ 0x4d
 80038c8:	2202      	movs	r2, #2
 80038ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80038cc:	78fa      	ldrb	r2, [r7, #3]
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	4613      	mov	r3, r2
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	334c      	adds	r3, #76	@ 0x4c
 80038dc:	2205      	movs	r2, #5
 80038de:	701a      	strb	r2, [r3, #0]
 80038e0:	e075      	b.n	80039ce <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80038e2:	78fa      	ldrb	r2, [r7, #3]
 80038e4:	6879      	ldr	r1, [r7, #4]
 80038e6:	4613      	mov	r3, r2
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	1a9b      	subs	r3, r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	440b      	add	r3, r1
 80038f0:	334d      	adds	r3, #77	@ 0x4d
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b07      	cmp	r3, #7
 80038f6:	d00a      	beq.n	800390e <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80038f8:	78fa      	ldrb	r2, [r7, #3]
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	4613      	mov	r3, r2
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	1a9b      	subs	r3, r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	334d      	adds	r3, #77	@ 0x4d
 8003908:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800390a:	2b09      	cmp	r3, #9
 800390c:	d170      	bne.n	80039f0 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800390e:	78fa      	ldrb	r2, [r7, #3]
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	4613      	mov	r3, r2
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	1a9b      	subs	r3, r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	440b      	add	r3, r1
 800391c:	334d      	adds	r3, #77	@ 0x4d
 800391e:	2202      	movs	r2, #2
 8003920:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003922:	78fa      	ldrb	r2, [r7, #3]
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	4613      	mov	r3, r2
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	1a9b      	subs	r3, r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	440b      	add	r3, r1
 8003930:	3344      	adds	r3, #68	@ 0x44
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	1c59      	adds	r1, r3, #1
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	1a9b      	subs	r3, r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4403      	add	r3, r0
 8003942:	3344      	adds	r3, #68	@ 0x44
 8003944:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003946:	78fa      	ldrb	r2, [r7, #3]
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	4613      	mov	r3, r2
 800394c:	011b      	lsls	r3, r3, #4
 800394e:	1a9b      	subs	r3, r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	440b      	add	r3, r1
 8003954:	3344      	adds	r3, #68	@ 0x44
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b02      	cmp	r3, #2
 800395a:	d914      	bls.n	8003986 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800395c:	78fa      	ldrb	r2, [r7, #3]
 800395e:	6879      	ldr	r1, [r7, #4]
 8003960:	4613      	mov	r3, r2
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	1a9b      	subs	r3, r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	3344      	adds	r3, #68	@ 0x44
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003970:	78fa      	ldrb	r2, [r7, #3]
 8003972:	6879      	ldr	r1, [r7, #4]
 8003974:	4613      	mov	r3, r2
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	1a9b      	subs	r3, r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	440b      	add	r3, r1
 800397e:	334c      	adds	r3, #76	@ 0x4c
 8003980:	2204      	movs	r2, #4
 8003982:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003984:	e022      	b.n	80039cc <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003986:	78fa      	ldrb	r2, [r7, #3]
 8003988:	6879      	ldr	r1, [r7, #4]
 800398a:	4613      	mov	r3, r2
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	1a9b      	subs	r3, r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	440b      	add	r3, r1
 8003994:	334c      	adds	r3, #76	@ 0x4c
 8003996:	2202      	movs	r2, #2
 8003998:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800399a:	78fb      	ldrb	r3, [r7, #3]
 800399c:	015a      	lsls	r2, r3, #5
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	4413      	add	r3, r2
 80039a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80039b0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80039b8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80039ba:	78fb      	ldrb	r3, [r7, #3]
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039c6:	461a      	mov	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80039cc:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80039ce:	78fa      	ldrb	r2, [r7, #3]
 80039d0:	6879      	ldr	r1, [r7, #4]
 80039d2:	4613      	mov	r3, r2
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	1a9b      	subs	r3, r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	440b      	add	r3, r1
 80039dc:	334c      	adds	r3, #76	@ 0x4c
 80039de:	781a      	ldrb	r2, [r3, #0]
 80039e0:	78fb      	ldrb	r3, [r7, #3]
 80039e2:	4619      	mov	r1, r3
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f003 fca3 	bl	8007330 <HAL_HCD_HC_NotifyURBChange_Callback>
 80039ea:	e002      	b.n	80039f2 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80039ec:	bf00      	nop
 80039ee:	e000      	b.n	80039f2 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80039f0:	bf00      	nop
  }
}
 80039f2:	3718      	adds	r7, #24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08a      	sub	sp, #40	@ 0x28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a08:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	f003 030f 	and.w	r3, r3, #15
 8003a18:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	0c5b      	lsrs	r3, r3, #17
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	091b      	lsrs	r3, r3, #4
 8003a28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a2c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d004      	beq.n	8003a3e <HCD_RXQLVL_IRQHandler+0x46>
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	2b05      	cmp	r3, #5
 8003a38:	f000 80b6 	beq.w	8003ba8 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003a3c:	e0b7      	b.n	8003bae <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 80b3 	beq.w	8003bac <HCD_RXQLVL_IRQHandler+0x1b4>
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	1a9b      	subs	r3, r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	332c      	adds	r3, #44	@ 0x2c
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 80a7 	beq.w	8003bac <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	4613      	mov	r3, r2
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	1a9b      	subs	r3, r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	3338      	adds	r3, #56	@ 0x38
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	18d1      	adds	r1, r2, r3
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	011b      	lsls	r3, r3, #4
 8003a7c:	1a9b      	subs	r3, r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4403      	add	r3, r0
 8003a82:	3334      	adds	r3, #52	@ 0x34
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4299      	cmp	r1, r3
 8003a88:	f200 8083 	bhi.w	8003b92 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6818      	ldr	r0, [r3, #0]
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4613      	mov	r3, r2
 8003a96:	011b      	lsls	r3, r3, #4
 8003a98:	1a9b      	subs	r3, r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	440b      	add	r3, r1
 8003a9e:	332c      	adds	r3, #44	@ 0x2c
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	b292      	uxth	r2, r2
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	f002 f868 	bl	8005b7c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	332c      	adds	r3, #44	@ 0x2c
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	18d1      	adds	r1, r2, r3
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	1a9b      	subs	r3, r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4403      	add	r3, r0
 8003ad0:	332c      	adds	r3, #44	@ 0x2c
 8003ad2:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	1a9b      	subs	r3, r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	3338      	adds	r3, #56	@ 0x38
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	18d1      	adds	r1, r2, r3
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	4613      	mov	r3, r2
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	1a9b      	subs	r3, r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4403      	add	r3, r0
 8003af8:	3338      	adds	r3, #56	@ 0x38
 8003afa:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	015a      	lsls	r2, r3, #5
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	4413      	add	r3, r2
 8003b04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	0cdb      	lsrs	r3, r3, #19
 8003b0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b10:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	4613      	mov	r3, r2
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	1a9b      	subs	r3, r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	440b      	add	r3, r1
 8003b20:	3328      	adds	r3, #40	@ 0x28
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	461a      	mov	r2, r3
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d13f      	bne.n	8003bac <HCD_RXQLVL_IRQHandler+0x1b4>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d03c      	beq.n	8003bac <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	015a      	lsls	r2, r3, #5
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	4413      	add	r3, r2
 8003b3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003b48:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b50:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	015a      	lsls	r2, r3, #5
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	4413      	add	r3, r2
 8003b5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b5e:	461a      	mov	r2, r3
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003b64:	6879      	ldr	r1, [r7, #4]
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	1a9b      	subs	r3, r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	333c      	adds	r3, #60	@ 0x3c
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	f083 0301 	eor.w	r3, r3, #1
 8003b7a:	b2d8      	uxtb	r0, r3
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	4613      	mov	r3, r2
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	1a9b      	subs	r3, r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	333c      	adds	r3, #60	@ 0x3c
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	701a      	strb	r2, [r3, #0]
      break;
 8003b90:	e00c      	b.n	8003bac <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	4613      	mov	r3, r2
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	1a9b      	subs	r3, r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	440b      	add	r3, r1
 8003ba0:	334c      	adds	r3, #76	@ 0x4c
 8003ba2:	2204      	movs	r2, #4
 8003ba4:	701a      	strb	r2, [r3, #0]
      break;
 8003ba6:	e001      	b.n	8003bac <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003ba8:	bf00      	nop
 8003baa:	e000      	b.n	8003bae <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003bac:	bf00      	nop
  }
}
 8003bae:	bf00      	nop
 8003bb0:	3728      	adds	r7, #40	@ 0x28
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b086      	sub	sp, #24
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003be2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d10b      	bne.n	8003c06 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d102      	bne.n	8003bfe <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f003 fb7d 	bl	80072f8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	f043 0302 	orr.w	r3, r3, #2
 8003c04:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f003 0308 	and.w	r3, r3, #8
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d132      	bne.n	8003c76 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f043 0308 	orr.w	r3, r3, #8
 8003c16:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f003 0304 	and.w	r3, r3, #4
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d126      	bne.n	8003c70 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	7a5b      	ldrb	r3, [r3, #9]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d113      	bne.n	8003c52 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003c30:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c34:	d106      	bne.n	8003c44 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2102      	movs	r1, #2
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f002 f837 	bl	8005cb0 <USB_InitFSLSPClkSel>
 8003c42:	e011      	b.n	8003c68 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2101      	movs	r1, #1
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f002 f830 	bl	8005cb0 <USB_InitFSLSPClkSel>
 8003c50:	e00a      	b.n	8003c68 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	79db      	ldrb	r3, [r3, #7]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d106      	bne.n	8003c68 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c60:	461a      	mov	r2, r3
 8003c62:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003c66:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f003 fb73 	bl	8007354 <HAL_HCD_PortEnabled_Callback>
 8003c6e:	e002      	b.n	8003c76 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f003 fb7d 	bl	8007370 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f003 0320 	and.w	r3, r3, #32
 8003c7c:	2b20      	cmp	r3, #32
 8003c7e:	d103      	bne.n	8003c88 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f043 0320 	orr.w	r3, r3, #32
 8003c86:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003c8e:	461a      	mov	r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	6013      	str	r3, [r2, #0]
}
 8003c94:	bf00      	nop
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e12b      	b.n	8003f06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d106      	bne.n	8003cc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7fc fd78 	bl	80007b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2224      	movs	r2, #36	@ 0x24
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0201 	bic.w	r2, r2, #1
 8003cde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003cfe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d00:	f001 fa20 	bl	8005144 <HAL_RCC_GetPCLK1Freq>
 8003d04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	4a81      	ldr	r2, [pc, #516]	@ (8003f10 <HAL_I2C_Init+0x274>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d807      	bhi.n	8003d20 <HAL_I2C_Init+0x84>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4a80      	ldr	r2, [pc, #512]	@ (8003f14 <HAL_I2C_Init+0x278>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	bf94      	ite	ls
 8003d18:	2301      	movls	r3, #1
 8003d1a:	2300      	movhi	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	e006      	b.n	8003d2e <HAL_I2C_Init+0x92>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4a7d      	ldr	r2, [pc, #500]	@ (8003f18 <HAL_I2C_Init+0x27c>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	bf94      	ite	ls
 8003d28:	2301      	movls	r3, #1
 8003d2a:	2300      	movhi	r3, #0
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e0e7      	b.n	8003f06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	4a78      	ldr	r2, [pc, #480]	@ (8003f1c <HAL_I2C_Init+0x280>)
 8003d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3e:	0c9b      	lsrs	r3, r3, #18
 8003d40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	4a6a      	ldr	r2, [pc, #424]	@ (8003f10 <HAL_I2C_Init+0x274>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d802      	bhi.n	8003d70 <HAL_I2C_Init+0xd4>
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	e009      	b.n	8003d84 <HAL_I2C_Init+0xe8>
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003d76:	fb02 f303 	mul.w	r3, r2, r3
 8003d7a:	4a69      	ldr	r2, [pc, #420]	@ (8003f20 <HAL_I2C_Init+0x284>)
 8003d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d80:	099b      	lsrs	r3, r3, #6
 8003d82:	3301      	adds	r3, #1
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	430b      	orrs	r3, r1
 8003d8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003d96:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	495c      	ldr	r1, [pc, #368]	@ (8003f10 <HAL_I2C_Init+0x274>)
 8003da0:	428b      	cmp	r3, r1
 8003da2:	d819      	bhi.n	8003dd8 <HAL_I2C_Init+0x13c>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	1e59      	subs	r1, r3, #1
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	fbb1 f3f3 	udiv	r3, r1, r3
 8003db2:	1c59      	adds	r1, r3, #1
 8003db4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003db8:	400b      	ands	r3, r1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00a      	beq.n	8003dd4 <HAL_I2C_Init+0x138>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	1e59      	subs	r1, r3, #1
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dcc:	3301      	adds	r3, #1
 8003dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dd2:	e051      	b.n	8003e78 <HAL_I2C_Init+0x1dc>
 8003dd4:	2304      	movs	r3, #4
 8003dd6:	e04f      	b.n	8003e78 <HAL_I2C_Init+0x1dc>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d111      	bne.n	8003e04 <HAL_I2C_Init+0x168>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	1e58      	subs	r0, r3, #1
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6859      	ldr	r1, [r3, #4]
 8003de8:	460b      	mov	r3, r1
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	440b      	add	r3, r1
 8003dee:	fbb0 f3f3 	udiv	r3, r0, r3
 8003df2:	3301      	adds	r3, #1
 8003df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	bf0c      	ite	eq
 8003dfc:	2301      	moveq	r3, #1
 8003dfe:	2300      	movne	r3, #0
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	e012      	b.n	8003e2a <HAL_I2C_Init+0x18e>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	1e58      	subs	r0, r3, #1
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6859      	ldr	r1, [r3, #4]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	440b      	add	r3, r1
 8003e12:	0099      	lsls	r1, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	bf0c      	ite	eq
 8003e24:	2301      	moveq	r3, #1
 8003e26:	2300      	movne	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <HAL_I2C_Init+0x196>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e022      	b.n	8003e78 <HAL_I2C_Init+0x1dc>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10e      	bne.n	8003e58 <HAL_I2C_Init+0x1bc>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	1e58      	subs	r0, r3, #1
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6859      	ldr	r1, [r3, #4]
 8003e42:	460b      	mov	r3, r1
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	440b      	add	r3, r1
 8003e48:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e56:	e00f      	b.n	8003e78 <HAL_I2C_Init+0x1dc>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	1e58      	subs	r0, r3, #1
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6859      	ldr	r1, [r3, #4]
 8003e60:	460b      	mov	r3, r1
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	0099      	lsls	r1, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e6e:	3301      	adds	r3, #1
 8003e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	6809      	ldr	r1, [r1, #0]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	69da      	ldr	r2, [r3, #28]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003ea6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6911      	ldr	r1, [r2, #16]
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	68d2      	ldr	r2, [r2, #12]
 8003eb2:	4311      	orrs	r1, r2
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6812      	ldr	r2, [r2, #0]
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	695a      	ldr	r2, [r3, #20]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0201 	orr.w	r2, r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	000186a0 	.word	0x000186a0
 8003f14:	001e847f 	.word	0x001e847f
 8003f18:	003d08ff 	.word	0x003d08ff
 8003f1c:	431bde83 	.word	0x431bde83
 8003f20:	10624dd3 	.word	0x10624dd3

08003f24 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e128      	b.n	8004188 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d109      	bne.n	8003f56 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a90      	ldr	r2, [pc, #576]	@ (8004190 <HAL_I2S_Init+0x26c>)
 8003f4e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f7fc fca9 	bl	80008a8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2202      	movs	r2, #2
 8003f5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	69db      	ldr	r3, [r3, #28]
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	6812      	ldr	r2, [r2, #0]
 8003f68:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003f6c:	f023 030f 	bic.w	r3, r3, #15
 8003f70:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2202      	movs	r2, #2
 8003f78:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d060      	beq.n	8004044 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d102      	bne.n	8003f90 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003f8a:	2310      	movs	r3, #16
 8003f8c:	617b      	str	r3, [r7, #20]
 8003f8e:	e001      	b.n	8003f94 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003f90:	2320      	movs	r3, #32
 8003f92:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	2b20      	cmp	r3, #32
 8003f9a:	d802      	bhi.n	8003fa2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003fa2:	2001      	movs	r0, #1
 8003fa4:	f001 f9c4 	bl	8005330 <HAL_RCCEx_GetPeriphCLKFreq>
 8003fa8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fb2:	d125      	bne.n	8004000 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d010      	beq.n	8003fde <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4413      	add	r3, r2
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	461a      	mov	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd8:	3305      	adds	r3, #5
 8003fda:	613b      	str	r3, [r7, #16]
 8003fdc:	e01f      	b.n	800401e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fe8:	4613      	mov	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffa:	3305      	adds	r3, #5
 8003ffc:	613b      	str	r3, [r7, #16]
 8003ffe:	e00e      	b.n	800401e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	fbb2 f2f3 	udiv	r2, r2, r3
 8004008:	4613      	mov	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4413      	add	r3, r2
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	461a      	mov	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	fbb2 f3f3 	udiv	r3, r2, r3
 800401a:	3305      	adds	r3, #5
 800401c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	4a5c      	ldr	r2, [pc, #368]	@ (8004194 <HAL_I2S_Init+0x270>)
 8004022:	fba2 2303 	umull	r2, r3, r2, r3
 8004026:	08db      	lsrs	r3, r3, #3
 8004028:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	085b      	lsrs	r3, r3, #1
 800403a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	021b      	lsls	r3, r3, #8
 8004040:	61bb      	str	r3, [r7, #24]
 8004042:	e003      	b.n	800404c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004044:	2302      	movs	r3, #2
 8004046:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004048:	2300      	movs	r3, #0
 800404a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d902      	bls.n	8004058 <HAL_I2S_Init+0x134>
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	2bff      	cmp	r3, #255	@ 0xff
 8004056:	d907      	bls.n	8004068 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800405c:	f043 0210 	orr.w	r2, r3, #16
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e08f      	b.n	8004188 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691a      	ldr	r2, [r3, #16]
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	ea42 0103 	orr.w	r1, r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	69fa      	ldr	r2, [r7, #28]
 8004078:	430a      	orrs	r2, r1
 800407a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004086:	f023 030f 	bic.w	r3, r3, #15
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6851      	ldr	r1, [r2, #4]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6892      	ldr	r2, [r2, #8]
 8004092:	4311      	orrs	r1, r2
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	68d2      	ldr	r2, [r2, #12]
 8004098:	4311      	orrs	r1, r2
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6992      	ldr	r2, [r2, #24]
 800409e:	430a      	orrs	r2, r1
 80040a0:	431a      	orrs	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040aa:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d161      	bne.n	8004178 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a38      	ldr	r2, [pc, #224]	@ (8004198 <HAL_I2S_Init+0x274>)
 80040b8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a37      	ldr	r2, [pc, #220]	@ (800419c <HAL_I2S_Init+0x278>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d101      	bne.n	80040c8 <HAL_I2S_Init+0x1a4>
 80040c4:	4b36      	ldr	r3, [pc, #216]	@ (80041a0 <HAL_I2S_Init+0x27c>)
 80040c6:	e001      	b.n	80040cc <HAL_I2S_Init+0x1a8>
 80040c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6812      	ldr	r2, [r2, #0]
 80040d2:	4932      	ldr	r1, [pc, #200]	@ (800419c <HAL_I2S_Init+0x278>)
 80040d4:	428a      	cmp	r2, r1
 80040d6:	d101      	bne.n	80040dc <HAL_I2S_Init+0x1b8>
 80040d8:	4a31      	ldr	r2, [pc, #196]	@ (80041a0 <HAL_I2S_Init+0x27c>)
 80040da:	e001      	b.n	80040e0 <HAL_I2S_Init+0x1bc>
 80040dc:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80040e0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80040e4:	f023 030f 	bic.w	r3, r3, #15
 80040e8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a2b      	ldr	r2, [pc, #172]	@ (800419c <HAL_I2S_Init+0x278>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d101      	bne.n	80040f8 <HAL_I2S_Init+0x1d4>
 80040f4:	4b2a      	ldr	r3, [pc, #168]	@ (80041a0 <HAL_I2S_Init+0x27c>)
 80040f6:	e001      	b.n	80040fc <HAL_I2S_Init+0x1d8>
 80040f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040fc:	2202      	movs	r2, #2
 80040fe:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a25      	ldr	r2, [pc, #148]	@ (800419c <HAL_I2S_Init+0x278>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d101      	bne.n	800410e <HAL_I2S_Init+0x1ea>
 800410a:	4b25      	ldr	r3, [pc, #148]	@ (80041a0 <HAL_I2S_Init+0x27c>)
 800410c:	e001      	b.n	8004112 <HAL_I2S_Init+0x1ee>
 800410e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800411e:	d003      	beq.n	8004128 <HAL_I2S_Init+0x204>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d103      	bne.n	8004130 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004128:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800412c:	613b      	str	r3, [r7, #16]
 800412e:	e001      	b.n	8004134 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004130:	2300      	movs	r3, #0
 8004132:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800413e:	4313      	orrs	r3, r2
 8004140:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004148:	4313      	orrs	r3, r2
 800414a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004152:	4313      	orrs	r3, r2
 8004154:	b29a      	uxth	r2, r3
 8004156:	897b      	ldrh	r3, [r7, #10]
 8004158:	4313      	orrs	r3, r2
 800415a:	b29b      	uxth	r3, r3
 800415c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004160:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a0d      	ldr	r2, [pc, #52]	@ (800419c <HAL_I2S_Init+0x278>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d101      	bne.n	8004170 <HAL_I2S_Init+0x24c>
 800416c:	4b0c      	ldr	r3, [pc, #48]	@ (80041a0 <HAL_I2S_Init+0x27c>)
 800416e:	e001      	b.n	8004174 <HAL_I2S_Init+0x250>
 8004170:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004174:	897a      	ldrh	r2, [r7, #10]
 8004176:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3720      	adds	r7, #32
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	0800429b 	.word	0x0800429b
 8004194:	cccccccd 	.word	0xcccccccd
 8004198:	080043b1 	.word	0x080043b1
 800419c:	40003800 	.word	0x40003800
 80041a0:	40003400 	.word	0x40003400

080041a4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ec:	881a      	ldrh	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f8:	1c9a      	adds	r2, r3, #2
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004202:	b29b      	uxth	r3, r3
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004210:	b29b      	uxth	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10e      	bne.n	8004234 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004224:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7ff ffb8 	bl	80041a4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004234:	bf00      	nop
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424e:	b292      	uxth	r2, r2
 8004250:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004256:	1c9a      	adds	r2, r3, #2
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004260:	b29b      	uxth	r3, r3
 8004262:	3b01      	subs	r3, #1
 8004264:	b29a      	uxth	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800426e:	b29b      	uxth	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10e      	bne.n	8004292 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004282:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7ff ff93 	bl	80041b8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004292:	bf00      	nop
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b086      	sub	sp, #24
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d13a      	bne.n	800432c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d109      	bne.n	80042d4 <I2S_IRQHandler+0x3a>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ca:	2b40      	cmp	r3, #64	@ 0x40
 80042cc:	d102      	bne.n	80042d4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7ff ffb4 	bl	800423c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042da:	2b40      	cmp	r3, #64	@ 0x40
 80042dc:	d126      	bne.n	800432c <I2S_IRQHandler+0x92>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f003 0320 	and.w	r3, r3, #32
 80042e8:	2b20      	cmp	r3, #32
 80042ea:	d11f      	bne.n	800432c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042fa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80042fc:	2300      	movs	r3, #0
 80042fe:	613b      	str	r3, [r7, #16]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	613b      	str	r3, [r7, #16]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	613b      	str	r3, [r7, #16]
 8004310:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800431e:	f043 0202 	orr.w	r2, r3, #2
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7ff ff50 	bl	80041cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b03      	cmp	r3, #3
 8004336:	d136      	bne.n	80043a6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b02      	cmp	r3, #2
 8004340:	d109      	bne.n	8004356 <I2S_IRQHandler+0xbc>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800434c:	2b80      	cmp	r3, #128	@ 0x80
 800434e:	d102      	bne.n	8004356 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7ff ff45 	bl	80041e0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b08      	cmp	r3, #8
 800435e:	d122      	bne.n	80043a6 <I2S_IRQHandler+0x10c>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f003 0320 	and.w	r3, r3, #32
 800436a:	2b20      	cmp	r3, #32
 800436c:	d11b      	bne.n	80043a6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800437c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800437e:	2300      	movs	r3, #0
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004398:	f043 0204 	orr.w	r2, r3, #4
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7ff ff13 	bl	80041cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043a6:	bf00      	nop
 80043a8:	3718      	adds	r7, #24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
	...

080043b0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b088      	sub	sp, #32
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a92      	ldr	r2, [pc, #584]	@ (8004610 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d101      	bne.n	80043ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80043ca:	4b92      	ldr	r3, [pc, #584]	@ (8004614 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043cc:	e001      	b.n	80043d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80043ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a8b      	ldr	r2, [pc, #556]	@ (8004610 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d101      	bne.n	80043ec <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80043e8:	4b8a      	ldr	r3, [pc, #552]	@ (8004614 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043ea:	e001      	b.n	80043f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80043ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043fc:	d004      	beq.n	8004408 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	f040 8099 	bne.w	800453a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b02      	cmp	r3, #2
 8004410:	d107      	bne.n	8004422 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f925 	bl	800466c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b01      	cmp	r3, #1
 800442a:	d107      	bne.n	800443c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004432:	2b00      	cmp	r3, #0
 8004434:	d002      	beq.n	800443c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f9c8 	bl	80047cc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004442:	2b40      	cmp	r3, #64	@ 0x40
 8004444:	d13a      	bne.n	80044bc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	f003 0320 	and.w	r3, r3, #32
 800444c:	2b00      	cmp	r3, #0
 800444e:	d035      	beq.n	80044bc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a6e      	ldr	r2, [pc, #440]	@ (8004610 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d101      	bne.n	800445e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800445a:	4b6e      	ldr	r3, [pc, #440]	@ (8004614 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800445c:	e001      	b.n	8004462 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800445e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4969      	ldr	r1, [pc, #420]	@ (8004610 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800446a:	428b      	cmp	r3, r1
 800446c:	d101      	bne.n	8004472 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800446e:	4b69      	ldr	r3, [pc, #420]	@ (8004614 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004470:	e001      	b.n	8004476 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004472:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004476:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800447a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800448a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800448c:	2300      	movs	r3, #0
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ae:	f043 0202 	orr.w	r2, r3, #2
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7ff fe88 	bl	80041cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	f003 0308 	and.w	r3, r3, #8
 80044c2:	2b08      	cmp	r3, #8
 80044c4:	f040 80c3 	bne.w	800464e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f003 0320 	and.w	r3, r3, #32
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 80bd 	beq.w	800464e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80044e2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a49      	ldr	r2, [pc, #292]	@ (8004610 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d101      	bne.n	80044f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80044ee:	4b49      	ldr	r3, [pc, #292]	@ (8004614 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044f0:	e001      	b.n	80044f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80044f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4944      	ldr	r1, [pc, #272]	@ (8004610 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044fe:	428b      	cmp	r3, r1
 8004500:	d101      	bne.n	8004506 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004502:	4b44      	ldr	r3, [pc, #272]	@ (8004614 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004504:	e001      	b.n	800450a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004506:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800450a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800450e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004510:	2300      	movs	r3, #0
 8004512:	60bb      	str	r3, [r7, #8]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	60bb      	str	r3, [r7, #8]
 800451c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800452a:	f043 0204 	orr.w	r2, r3, #4
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7ff fe4a 	bl	80041cc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004538:	e089      	b.n	800464e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b02      	cmp	r3, #2
 8004542:	d107      	bne.n	8004554 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800454a:	2b00      	cmp	r3, #0
 800454c:	d002      	beq.n	8004554 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f8be 	bl	80046d0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b01      	cmp	r3, #1
 800455c:	d107      	bne.n	800456e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004564:	2b00      	cmp	r3, #0
 8004566:	d002      	beq.n	800456e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f8fd 	bl	8004768 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004574:	2b40      	cmp	r3, #64	@ 0x40
 8004576:	d12f      	bne.n	80045d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f003 0320 	and.w	r3, r3, #32
 800457e:	2b00      	cmp	r3, #0
 8004580:	d02a      	beq.n	80045d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004590:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a1e      	ldr	r2, [pc, #120]	@ (8004610 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d101      	bne.n	80045a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800459c:	4b1d      	ldr	r3, [pc, #116]	@ (8004614 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800459e:	e001      	b.n	80045a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80045a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4919      	ldr	r1, [pc, #100]	@ (8004610 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045ac:	428b      	cmp	r3, r1
 80045ae:	d101      	bne.n	80045b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80045b0:	4b18      	ldr	r3, [pc, #96]	@ (8004614 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045b2:	e001      	b.n	80045b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80045b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045b8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80045bc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ca:	f043 0202 	orr.w	r2, r3, #2
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7ff fdfa 	bl	80041cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	f003 0308 	and.w	r3, r3, #8
 80045de:	2b08      	cmp	r3, #8
 80045e0:	d136      	bne.n	8004650 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f003 0320 	and.w	r3, r3, #32
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d031      	beq.n	8004650 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a07      	ldr	r2, [pc, #28]	@ (8004610 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d101      	bne.n	80045fa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80045f6:	4b07      	ldr	r3, [pc, #28]	@ (8004614 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045f8:	e001      	b.n	80045fe <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80045fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4902      	ldr	r1, [pc, #8]	@ (8004610 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004606:	428b      	cmp	r3, r1
 8004608:	d106      	bne.n	8004618 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800460a:	4b02      	ldr	r3, [pc, #8]	@ (8004614 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800460c:	e006      	b.n	800461c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800460e:	bf00      	nop
 8004610:	40003800 	.word	0x40003800
 8004614:	40003400 	.word	0x40003400
 8004618:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800461c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004620:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004630:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800463e:	f043 0204 	orr.w	r2, r3, #4
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7ff fdc0 	bl	80041cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800464c:	e000      	b.n	8004650 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800464e:	bf00      	nop
}
 8004650:	bf00      	nop
 8004652:	3720      	adds	r7, #32
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004678:	1c99      	adds	r1, r3, #2
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6251      	str	r1, [r2, #36]	@ 0x24
 800467e:	881a      	ldrh	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800468a:	b29b      	uxth	r3, r3
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004698:	b29b      	uxth	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d113      	bne.n	80046c6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80046ac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d106      	bne.n	80046c6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7ff ffc9 	bl	8004658 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046c6:	bf00      	nop
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046dc:	1c99      	adds	r1, r3, #2
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6251      	str	r1, [r2, #36]	@ 0x24
 80046e2:	8819      	ldrh	r1, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a1d      	ldr	r2, [pc, #116]	@ (8004760 <I2SEx_TxISR_I2SExt+0x90>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d101      	bne.n	80046f2 <I2SEx_TxISR_I2SExt+0x22>
 80046ee:	4b1d      	ldr	r3, [pc, #116]	@ (8004764 <I2SEx_TxISR_I2SExt+0x94>)
 80046f0:	e001      	b.n	80046f6 <I2SEx_TxISR_I2SExt+0x26>
 80046f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046f6:	460a      	mov	r2, r1
 80046f8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046fe:	b29b      	uxth	r3, r3
 8004700:	3b01      	subs	r3, #1
 8004702:	b29a      	uxth	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800470c:	b29b      	uxth	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d121      	bne.n	8004756 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a12      	ldr	r2, [pc, #72]	@ (8004760 <I2SEx_TxISR_I2SExt+0x90>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d101      	bne.n	8004720 <I2SEx_TxISR_I2SExt+0x50>
 800471c:	4b11      	ldr	r3, [pc, #68]	@ (8004764 <I2SEx_TxISR_I2SExt+0x94>)
 800471e:	e001      	b.n	8004724 <I2SEx_TxISR_I2SExt+0x54>
 8004720:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	490d      	ldr	r1, [pc, #52]	@ (8004760 <I2SEx_TxISR_I2SExt+0x90>)
 800472c:	428b      	cmp	r3, r1
 800472e:	d101      	bne.n	8004734 <I2SEx_TxISR_I2SExt+0x64>
 8004730:	4b0c      	ldr	r3, [pc, #48]	@ (8004764 <I2SEx_TxISR_I2SExt+0x94>)
 8004732:	e001      	b.n	8004738 <I2SEx_TxISR_I2SExt+0x68>
 8004734:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004738:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800473c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004742:	b29b      	uxth	r3, r3
 8004744:	2b00      	cmp	r3, #0
 8004746:	d106      	bne.n	8004756 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7ff ff81 	bl	8004658 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004756:	bf00      	nop
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	40003800 	.word	0x40003800
 8004764:	40003400 	.word	0x40003400

08004768 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68d8      	ldr	r0, [r3, #12]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800477a:	1c99      	adds	r1, r3, #2
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004780:	b282      	uxth	r2, r0
 8004782:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004788:	b29b      	uxth	r3, r3
 800478a:	3b01      	subs	r3, #1
 800478c:	b29a      	uxth	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004796:	b29b      	uxth	r3, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	d113      	bne.n	80047c4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80047aa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d106      	bne.n	80047c4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7ff ff4a 	bl	8004658 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047c4:	bf00      	nop
 80047c6:	3708      	adds	r7, #8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a20      	ldr	r2, [pc, #128]	@ (800485c <I2SEx_RxISR_I2SExt+0x90>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d101      	bne.n	80047e2 <I2SEx_RxISR_I2SExt+0x16>
 80047de:	4b20      	ldr	r3, [pc, #128]	@ (8004860 <I2SEx_RxISR_I2SExt+0x94>)
 80047e0:	e001      	b.n	80047e6 <I2SEx_RxISR_I2SExt+0x1a>
 80047e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047e6:	68d8      	ldr	r0, [r3, #12]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ec:	1c99      	adds	r1, r3, #2
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80047f2:	b282      	uxth	r2, r0
 80047f4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	3b01      	subs	r3, #1
 80047fe:	b29a      	uxth	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004808:	b29b      	uxth	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d121      	bne.n	8004852 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a12      	ldr	r2, [pc, #72]	@ (800485c <I2SEx_RxISR_I2SExt+0x90>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d101      	bne.n	800481c <I2SEx_RxISR_I2SExt+0x50>
 8004818:	4b11      	ldr	r3, [pc, #68]	@ (8004860 <I2SEx_RxISR_I2SExt+0x94>)
 800481a:	e001      	b.n	8004820 <I2SEx_RxISR_I2SExt+0x54>
 800481c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	490d      	ldr	r1, [pc, #52]	@ (800485c <I2SEx_RxISR_I2SExt+0x90>)
 8004828:	428b      	cmp	r3, r1
 800482a:	d101      	bne.n	8004830 <I2SEx_RxISR_I2SExt+0x64>
 800482c:	4b0c      	ldr	r3, [pc, #48]	@ (8004860 <I2SEx_RxISR_I2SExt+0x94>)
 800482e:	e001      	b.n	8004834 <I2SEx_RxISR_I2SExt+0x68>
 8004830:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004834:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004838:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800483e:	b29b      	uxth	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d106      	bne.n	8004852 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7ff ff03 	bl	8004658 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004852:	bf00      	nop
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	40003800 	.word	0x40003800
 8004860:	40003400 	.word	0x40003400

08004864 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e267      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d075      	beq.n	800496e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004882:	4b88      	ldr	r3, [pc, #544]	@ (8004aa4 <HAL_RCC_OscConfig+0x240>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 030c 	and.w	r3, r3, #12
 800488a:	2b04      	cmp	r3, #4
 800488c:	d00c      	beq.n	80048a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800488e:	4b85      	ldr	r3, [pc, #532]	@ (8004aa4 <HAL_RCC_OscConfig+0x240>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004896:	2b08      	cmp	r3, #8
 8004898:	d112      	bne.n	80048c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800489a:	4b82      	ldr	r3, [pc, #520]	@ (8004aa4 <HAL_RCC_OscConfig+0x240>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048a6:	d10b      	bne.n	80048c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a8:	4b7e      	ldr	r3, [pc, #504]	@ (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d05b      	beq.n	800496c <HAL_RCC_OscConfig+0x108>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d157      	bne.n	800496c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e242      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048c8:	d106      	bne.n	80048d8 <HAL_RCC_OscConfig+0x74>
 80048ca:	4b76      	ldr	r3, [pc, #472]	@ (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a75      	ldr	r2, [pc, #468]	@ (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80048d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048d4:	6013      	str	r3, [r2, #0]
 80048d6:	e01d      	b.n	8004914 <HAL_RCC_OscConfig+0xb0>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048e0:	d10c      	bne.n	80048fc <HAL_RCC_OscConfig+0x98>
 80048e2:	4b70      	ldr	r3, [pc, #448]	@ (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a6f      	ldr	r2, [pc, #444]	@ (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80048e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048ec:	6013      	str	r3, [r2, #0]
 80048ee:	4b6d      	ldr	r3, [pc, #436]	@ (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a6c      	ldr	r2, [pc, #432]	@ (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80048f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048f8:	6013      	str	r3, [r2, #0]
 80048fa:	e00b      	b.n	8004914 <HAL_RCC_OscConfig+0xb0>
 80048fc:	4b69      	ldr	r3, [pc, #420]	@ (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a68      	ldr	r2, [pc, #416]	@ (8004aa4 <HAL_RCC_OscConfig+0x240>)
 8004902:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004906:	6013      	str	r3, [r2, #0]
 8004908:	4b66      	ldr	r3, [pc, #408]	@ (8004aa4 <HAL_RCC_OscConfig+0x240>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a65      	ldr	r2, [pc, #404]	@ (8004aa4 <HAL_RCC_OscConfig+0x240>)
 800490e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004912:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d013      	beq.n	8004944 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491c:	f7fd f80c 	bl	8001938 <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004924:	f7fd f808 	bl	8001938 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b64      	cmp	r3, #100	@ 0x64
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e207      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004936:	4b5b      	ldr	r3, [pc, #364]	@ (8004aa4 <HAL_RCC_OscConfig+0x240>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0f0      	beq.n	8004924 <HAL_RCC_OscConfig+0xc0>
 8004942:	e014      	b.n	800496e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004944:	f7fc fff8 	bl	8001938 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800494c:	f7fc fff4 	bl	8001938 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b64      	cmp	r3, #100	@ 0x64
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e1f3      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800495e:	4b51      	ldr	r3, [pc, #324]	@ (8004aa4 <HAL_RCC_OscConfig+0x240>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1f0      	bne.n	800494c <HAL_RCC_OscConfig+0xe8>
 800496a:	e000      	b.n	800496e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800496c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d063      	beq.n	8004a42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800497a:	4b4a      	ldr	r3, [pc, #296]	@ (8004aa4 <HAL_RCC_OscConfig+0x240>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f003 030c 	and.w	r3, r3, #12
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00b      	beq.n	800499e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004986:	4b47      	ldr	r3, [pc, #284]	@ (8004aa4 <HAL_RCC_OscConfig+0x240>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800498e:	2b08      	cmp	r3, #8
 8004990:	d11c      	bne.n	80049cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004992:	4b44      	ldr	r3, [pc, #272]	@ (8004aa4 <HAL_RCC_OscConfig+0x240>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d116      	bne.n	80049cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800499e:	4b41      	ldr	r3, [pc, #260]	@ (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d005      	beq.n	80049b6 <HAL_RCC_OscConfig+0x152>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d001      	beq.n	80049b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e1c7      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b6:	4b3b      	ldr	r3, [pc, #236]	@ (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	4937      	ldr	r1, [pc, #220]	@ (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ca:	e03a      	b.n	8004a42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d020      	beq.n	8004a16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049d4:	4b34      	ldr	r3, [pc, #208]	@ (8004aa8 <HAL_RCC_OscConfig+0x244>)
 80049d6:	2201      	movs	r2, #1
 80049d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049da:	f7fc ffad 	bl	8001938 <HAL_GetTick>
 80049de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e0:	e008      	b.n	80049f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049e2:	f7fc ffa9 	bl	8001938 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d901      	bls.n	80049f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e1a8      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049f4:	4b2b      	ldr	r3, [pc, #172]	@ (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0f0      	beq.n	80049e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a00:	4b28      	ldr	r3, [pc, #160]	@ (8004aa4 <HAL_RCC_OscConfig+0x240>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	00db      	lsls	r3, r3, #3
 8004a0e:	4925      	ldr	r1, [pc, #148]	@ (8004aa4 <HAL_RCC_OscConfig+0x240>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	600b      	str	r3, [r1, #0]
 8004a14:	e015      	b.n	8004a42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a16:	4b24      	ldr	r3, [pc, #144]	@ (8004aa8 <HAL_RCC_OscConfig+0x244>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a1c:	f7fc ff8c 	bl	8001938 <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a24:	f7fc ff88 	bl	8001938 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e187      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a36:	4b1b      	ldr	r3, [pc, #108]	@ (8004aa4 <HAL_RCC_OscConfig+0x240>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1f0      	bne.n	8004a24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0308 	and.w	r3, r3, #8
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d036      	beq.n	8004abc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d016      	beq.n	8004a84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a56:	4b15      	ldr	r3, [pc, #84]	@ (8004aac <HAL_RCC_OscConfig+0x248>)
 8004a58:	2201      	movs	r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a5c:	f7fc ff6c 	bl	8001938 <HAL_GetTick>
 8004a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a62:	e008      	b.n	8004a76 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a64:	f7fc ff68 	bl	8001938 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e167      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a76:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa4 <HAL_RCC_OscConfig+0x240>)
 8004a78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0f0      	beq.n	8004a64 <HAL_RCC_OscConfig+0x200>
 8004a82:	e01b      	b.n	8004abc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a84:	4b09      	ldr	r3, [pc, #36]	@ (8004aac <HAL_RCC_OscConfig+0x248>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a8a:	f7fc ff55 	bl	8001938 <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a90:	e00e      	b.n	8004ab0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a92:	f7fc ff51 	bl	8001938 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d907      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e150      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
 8004aa4:	40023800 	.word	0x40023800
 8004aa8:	42470000 	.word	0x42470000
 8004aac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ab0:	4b88      	ldr	r3, [pc, #544]	@ (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004ab2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1ea      	bne.n	8004a92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 8097 	beq.w	8004bf8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aca:	2300      	movs	r3, #0
 8004acc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ace:	4b81      	ldr	r3, [pc, #516]	@ (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10f      	bne.n	8004afa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ada:	2300      	movs	r3, #0
 8004adc:	60bb      	str	r3, [r7, #8]
 8004ade:	4b7d      	ldr	r3, [pc, #500]	@ (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae2:	4a7c      	ldr	r2, [pc, #496]	@ (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004ae4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ae8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004aea:	4b7a      	ldr	r3, [pc, #488]	@ (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004af2:	60bb      	str	r3, [r7, #8]
 8004af4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004af6:	2301      	movs	r3, #1
 8004af8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004afa:	4b77      	ldr	r3, [pc, #476]	@ (8004cd8 <HAL_RCC_OscConfig+0x474>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d118      	bne.n	8004b38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b06:	4b74      	ldr	r3, [pc, #464]	@ (8004cd8 <HAL_RCC_OscConfig+0x474>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a73      	ldr	r2, [pc, #460]	@ (8004cd8 <HAL_RCC_OscConfig+0x474>)
 8004b0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b12:	f7fc ff11 	bl	8001938 <HAL_GetTick>
 8004b16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b18:	e008      	b.n	8004b2c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b1a:	f7fc ff0d 	bl	8001938 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e10c      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b2c:	4b6a      	ldr	r3, [pc, #424]	@ (8004cd8 <HAL_RCC_OscConfig+0x474>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0f0      	beq.n	8004b1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d106      	bne.n	8004b4e <HAL_RCC_OscConfig+0x2ea>
 8004b40:	4b64      	ldr	r3, [pc, #400]	@ (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b44:	4a63      	ldr	r2, [pc, #396]	@ (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004b46:	f043 0301 	orr.w	r3, r3, #1
 8004b4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b4c:	e01c      	b.n	8004b88 <HAL_RCC_OscConfig+0x324>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	2b05      	cmp	r3, #5
 8004b54:	d10c      	bne.n	8004b70 <HAL_RCC_OscConfig+0x30c>
 8004b56:	4b5f      	ldr	r3, [pc, #380]	@ (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b5a:	4a5e      	ldr	r2, [pc, #376]	@ (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004b5c:	f043 0304 	orr.w	r3, r3, #4
 8004b60:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b62:	4b5c      	ldr	r3, [pc, #368]	@ (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b66:	4a5b      	ldr	r2, [pc, #364]	@ (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004b68:	f043 0301 	orr.w	r3, r3, #1
 8004b6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b6e:	e00b      	b.n	8004b88 <HAL_RCC_OscConfig+0x324>
 8004b70:	4b58      	ldr	r3, [pc, #352]	@ (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b74:	4a57      	ldr	r2, [pc, #348]	@ (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004b76:	f023 0301 	bic.w	r3, r3, #1
 8004b7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b7c:	4b55      	ldr	r3, [pc, #340]	@ (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004b7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b80:	4a54      	ldr	r2, [pc, #336]	@ (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004b82:	f023 0304 	bic.w	r3, r3, #4
 8004b86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d015      	beq.n	8004bbc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b90:	f7fc fed2 	bl	8001938 <HAL_GetTick>
 8004b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b96:	e00a      	b.n	8004bae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b98:	f7fc fece 	bl	8001938 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e0cb      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bae:	4b49      	ldr	r3, [pc, #292]	@ (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0ee      	beq.n	8004b98 <HAL_RCC_OscConfig+0x334>
 8004bba:	e014      	b.n	8004be6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bbc:	f7fc febc 	bl	8001938 <HAL_GetTick>
 8004bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bc2:	e00a      	b.n	8004bda <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bc4:	f7fc feb8 	bl	8001938 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e0b5      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bda:	4b3e      	ldr	r3, [pc, #248]	@ (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1ee      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004be6:	7dfb      	ldrb	r3, [r7, #23]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d105      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bec:	4b39      	ldr	r3, [pc, #228]	@ (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf0:	4a38      	ldr	r2, [pc, #224]	@ (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004bf2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bf6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 80a1 	beq.w	8004d44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c02:	4b34      	ldr	r3, [pc, #208]	@ (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f003 030c 	and.w	r3, r3, #12
 8004c0a:	2b08      	cmp	r3, #8
 8004c0c:	d05c      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d141      	bne.n	8004c9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c16:	4b31      	ldr	r3, [pc, #196]	@ (8004cdc <HAL_RCC_OscConfig+0x478>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c1c:	f7fc fe8c 	bl	8001938 <HAL_GetTick>
 8004c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c22:	e008      	b.n	8004c36 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c24:	f7fc fe88 	bl	8001938 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e087      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c36:	4b27      	ldr	r3, [pc, #156]	@ (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1f0      	bne.n	8004c24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	69da      	ldr	r2, [r3, #28]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c50:	019b      	lsls	r3, r3, #6
 8004c52:	431a      	orrs	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c58:	085b      	lsrs	r3, r3, #1
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	041b      	lsls	r3, r3, #16
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c64:	061b      	lsls	r3, r3, #24
 8004c66:	491b      	ldr	r1, [pc, #108]	@ (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8004cdc <HAL_RCC_OscConfig+0x478>)
 8004c6e:	2201      	movs	r2, #1
 8004c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c72:	f7fc fe61 	bl	8001938 <HAL_GetTick>
 8004c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c78:	e008      	b.n	8004c8c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c7a:	f7fc fe5d 	bl	8001938 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d901      	bls.n	8004c8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e05c      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c8c:	4b11      	ldr	r3, [pc, #68]	@ (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0f0      	beq.n	8004c7a <HAL_RCC_OscConfig+0x416>
 8004c98:	e054      	b.n	8004d44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c9a:	4b10      	ldr	r3, [pc, #64]	@ (8004cdc <HAL_RCC_OscConfig+0x478>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca0:	f7fc fe4a 	bl	8001938 <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ca8:	f7fc fe46 	bl	8001938 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e045      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cba:	4b06      	ldr	r3, [pc, #24]	@ (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1f0      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x444>
 8004cc6:	e03d      	b.n	8004d44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d107      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e038      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	40007000 	.word	0x40007000
 8004cdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8004d50 <HAL_RCC_OscConfig+0x4ec>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d028      	beq.n	8004d40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d121      	bne.n	8004d40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d11a      	bne.n	8004d40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004d10:	4013      	ands	r3, r2
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d111      	bne.n	8004d40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d26:	085b      	lsrs	r3, r3, #1
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d107      	bne.n	8004d40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d001      	beq.n	8004d44 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e000      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3718      	adds	r7, #24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	40023800 	.word	0x40023800

08004d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e0cc      	b.n	8004f02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d68:	4b68      	ldr	r3, [pc, #416]	@ (8004f0c <HAL_RCC_ClockConfig+0x1b8>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d90c      	bls.n	8004d90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d76:	4b65      	ldr	r3, [pc, #404]	@ (8004f0c <HAL_RCC_ClockConfig+0x1b8>)
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	b2d2      	uxtb	r2, r2
 8004d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d7e:	4b63      	ldr	r3, [pc, #396]	@ (8004f0c <HAL_RCC_ClockConfig+0x1b8>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d001      	beq.n	8004d90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e0b8      	b.n	8004f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d020      	beq.n	8004dde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0304 	and.w	r3, r3, #4
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d005      	beq.n	8004db4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004da8:	4b59      	ldr	r3, [pc, #356]	@ (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	4a58      	ldr	r2, [pc, #352]	@ (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004dae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004db2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0308 	and.w	r3, r3, #8
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d005      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dc0:	4b53      	ldr	r3, [pc, #332]	@ (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	4a52      	ldr	r2, [pc, #328]	@ (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004dca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dcc:	4b50      	ldr	r3, [pc, #320]	@ (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	494d      	ldr	r1, [pc, #308]	@ (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d044      	beq.n	8004e74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d107      	bne.n	8004e02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004df2:	4b47      	ldr	r3, [pc, #284]	@ (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d119      	bne.n	8004e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e07f      	b.n	8004f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d003      	beq.n	8004e12 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e0e:	2b03      	cmp	r3, #3
 8004e10:	d107      	bne.n	8004e22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e12:	4b3f      	ldr	r3, [pc, #252]	@ (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d109      	bne.n	8004e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e06f      	b.n	8004f02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e22:	4b3b      	ldr	r3, [pc, #236]	@ (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e067      	b.n	8004f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e32:	4b37      	ldr	r3, [pc, #220]	@ (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f023 0203 	bic.w	r2, r3, #3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	4934      	ldr	r1, [pc, #208]	@ (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e44:	f7fc fd78 	bl	8001938 <HAL_GetTick>
 8004e48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e4a:	e00a      	b.n	8004e62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e4c:	f7fc fd74 	bl	8001938 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e04f      	b.n	8004f02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e62:	4b2b      	ldr	r3, [pc, #172]	@ (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 020c 	and.w	r2, r3, #12
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d1eb      	bne.n	8004e4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e74:	4b25      	ldr	r3, [pc, #148]	@ (8004f0c <HAL_RCC_ClockConfig+0x1b8>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d20c      	bcs.n	8004e9c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e82:	4b22      	ldr	r3, [pc, #136]	@ (8004f0c <HAL_RCC_ClockConfig+0x1b8>)
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	b2d2      	uxtb	r2, r2
 8004e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e8a:	4b20      	ldr	r3, [pc, #128]	@ (8004f0c <HAL_RCC_ClockConfig+0x1b8>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d001      	beq.n	8004e9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e032      	b.n	8004f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d008      	beq.n	8004eba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ea8:	4b19      	ldr	r3, [pc, #100]	@ (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	4916      	ldr	r1, [pc, #88]	@ (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0308 	and.w	r3, r3, #8
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d009      	beq.n	8004eda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ec6:	4b12      	ldr	r3, [pc, #72]	@ (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	00db      	lsls	r3, r3, #3
 8004ed4:	490e      	ldr	r1, [pc, #56]	@ (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004eda:	f000 f821 	bl	8004f20 <HAL_RCC_GetSysClockFreq>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	091b      	lsrs	r3, r3, #4
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	490a      	ldr	r1, [pc, #40]	@ (8004f14 <HAL_RCC_ClockConfig+0x1c0>)
 8004eec:	5ccb      	ldrb	r3, [r1, r3]
 8004eee:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef2:	4a09      	ldr	r2, [pc, #36]	@ (8004f18 <HAL_RCC_ClockConfig+0x1c4>)
 8004ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004ef6:	4b09      	ldr	r3, [pc, #36]	@ (8004f1c <HAL_RCC_ClockConfig+0x1c8>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7fc fcd8 	bl	80018b0 <HAL_InitTick>

  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40023c00 	.word	0x40023c00
 8004f10:	40023800 	.word	0x40023800
 8004f14:	08007d98 	.word	0x08007d98
 8004f18:	2000006c 	.word	0x2000006c
 8004f1c:	20000070 	.word	0x20000070

08004f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f24:	b094      	sub	sp, #80	@ 0x50
 8004f26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f38:	4b79      	ldr	r3, [pc, #484]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f003 030c 	and.w	r3, r3, #12
 8004f40:	2b08      	cmp	r3, #8
 8004f42:	d00d      	beq.n	8004f60 <HAL_RCC_GetSysClockFreq+0x40>
 8004f44:	2b08      	cmp	r3, #8
 8004f46:	f200 80e1 	bhi.w	800510c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d002      	beq.n	8004f54 <HAL_RCC_GetSysClockFreq+0x34>
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d003      	beq.n	8004f5a <HAL_RCC_GetSysClockFreq+0x3a>
 8004f52:	e0db      	b.n	800510c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f54:	4b73      	ldr	r3, [pc, #460]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f58:	e0db      	b.n	8005112 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f5a:	4b73      	ldr	r3, [pc, #460]	@ (8005128 <HAL_RCC_GetSysClockFreq+0x208>)
 8004f5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f5e:	e0d8      	b.n	8005112 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f60:	4b6f      	ldr	r3, [pc, #444]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f68:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f6a:	4b6d      	ldr	r3, [pc, #436]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d063      	beq.n	800503e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f76:	4b6a      	ldr	r3, [pc, #424]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	099b      	lsrs	r3, r3, #6
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f80:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f88:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004f92:	4622      	mov	r2, r4
 8004f94:	462b      	mov	r3, r5
 8004f96:	f04f 0000 	mov.w	r0, #0
 8004f9a:	f04f 0100 	mov.w	r1, #0
 8004f9e:	0159      	lsls	r1, r3, #5
 8004fa0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fa4:	0150      	lsls	r0, r2, #5
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	4621      	mov	r1, r4
 8004fac:	1a51      	subs	r1, r2, r1
 8004fae:	6139      	str	r1, [r7, #16]
 8004fb0:	4629      	mov	r1, r5
 8004fb2:	eb63 0301 	sbc.w	r3, r3, r1
 8004fb6:	617b      	str	r3, [r7, #20]
 8004fb8:	f04f 0200 	mov.w	r2, #0
 8004fbc:	f04f 0300 	mov.w	r3, #0
 8004fc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fc4:	4659      	mov	r1, fp
 8004fc6:	018b      	lsls	r3, r1, #6
 8004fc8:	4651      	mov	r1, sl
 8004fca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004fce:	4651      	mov	r1, sl
 8004fd0:	018a      	lsls	r2, r1, #6
 8004fd2:	4651      	mov	r1, sl
 8004fd4:	ebb2 0801 	subs.w	r8, r2, r1
 8004fd8:	4659      	mov	r1, fp
 8004fda:	eb63 0901 	sbc.w	r9, r3, r1
 8004fde:	f04f 0200 	mov.w	r2, #0
 8004fe2:	f04f 0300 	mov.w	r3, #0
 8004fe6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ff2:	4690      	mov	r8, r2
 8004ff4:	4699      	mov	r9, r3
 8004ff6:	4623      	mov	r3, r4
 8004ff8:	eb18 0303 	adds.w	r3, r8, r3
 8004ffc:	60bb      	str	r3, [r7, #8]
 8004ffe:	462b      	mov	r3, r5
 8005000:	eb49 0303 	adc.w	r3, r9, r3
 8005004:	60fb      	str	r3, [r7, #12]
 8005006:	f04f 0200 	mov.w	r2, #0
 800500a:	f04f 0300 	mov.w	r3, #0
 800500e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005012:	4629      	mov	r1, r5
 8005014:	024b      	lsls	r3, r1, #9
 8005016:	4621      	mov	r1, r4
 8005018:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800501c:	4621      	mov	r1, r4
 800501e:	024a      	lsls	r2, r1, #9
 8005020:	4610      	mov	r0, r2
 8005022:	4619      	mov	r1, r3
 8005024:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005026:	2200      	movs	r2, #0
 8005028:	62bb      	str	r3, [r7, #40]	@ 0x28
 800502a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800502c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005030:	f7fb f91e 	bl	8000270 <__aeabi_uldivmod>
 8005034:	4602      	mov	r2, r0
 8005036:	460b      	mov	r3, r1
 8005038:	4613      	mov	r3, r2
 800503a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800503c:	e058      	b.n	80050f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800503e:	4b38      	ldr	r3, [pc, #224]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x200>)
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	099b      	lsrs	r3, r3, #6
 8005044:	2200      	movs	r2, #0
 8005046:	4618      	mov	r0, r3
 8005048:	4611      	mov	r1, r2
 800504a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800504e:	623b      	str	r3, [r7, #32]
 8005050:	2300      	movs	r3, #0
 8005052:	627b      	str	r3, [r7, #36]	@ 0x24
 8005054:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005058:	4642      	mov	r2, r8
 800505a:	464b      	mov	r3, r9
 800505c:	f04f 0000 	mov.w	r0, #0
 8005060:	f04f 0100 	mov.w	r1, #0
 8005064:	0159      	lsls	r1, r3, #5
 8005066:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800506a:	0150      	lsls	r0, r2, #5
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	4641      	mov	r1, r8
 8005072:	ebb2 0a01 	subs.w	sl, r2, r1
 8005076:	4649      	mov	r1, r9
 8005078:	eb63 0b01 	sbc.w	fp, r3, r1
 800507c:	f04f 0200 	mov.w	r2, #0
 8005080:	f04f 0300 	mov.w	r3, #0
 8005084:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005088:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800508c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005090:	ebb2 040a 	subs.w	r4, r2, sl
 8005094:	eb63 050b 	sbc.w	r5, r3, fp
 8005098:	f04f 0200 	mov.w	r2, #0
 800509c:	f04f 0300 	mov.w	r3, #0
 80050a0:	00eb      	lsls	r3, r5, #3
 80050a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050a6:	00e2      	lsls	r2, r4, #3
 80050a8:	4614      	mov	r4, r2
 80050aa:	461d      	mov	r5, r3
 80050ac:	4643      	mov	r3, r8
 80050ae:	18e3      	adds	r3, r4, r3
 80050b0:	603b      	str	r3, [r7, #0]
 80050b2:	464b      	mov	r3, r9
 80050b4:	eb45 0303 	adc.w	r3, r5, r3
 80050b8:	607b      	str	r3, [r7, #4]
 80050ba:	f04f 0200 	mov.w	r2, #0
 80050be:	f04f 0300 	mov.w	r3, #0
 80050c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050c6:	4629      	mov	r1, r5
 80050c8:	028b      	lsls	r3, r1, #10
 80050ca:	4621      	mov	r1, r4
 80050cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050d0:	4621      	mov	r1, r4
 80050d2:	028a      	lsls	r2, r1, #10
 80050d4:	4610      	mov	r0, r2
 80050d6:	4619      	mov	r1, r3
 80050d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050da:	2200      	movs	r2, #0
 80050dc:	61bb      	str	r3, [r7, #24]
 80050de:	61fa      	str	r2, [r7, #28]
 80050e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050e4:	f7fb f8c4 	bl	8000270 <__aeabi_uldivmod>
 80050e8:	4602      	mov	r2, r0
 80050ea:	460b      	mov	r3, r1
 80050ec:	4613      	mov	r3, r2
 80050ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80050f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x200>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	0c1b      	lsrs	r3, r3, #16
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	3301      	adds	r3, #1
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005100:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005102:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005104:	fbb2 f3f3 	udiv	r3, r2, r3
 8005108:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800510a:	e002      	b.n	8005112 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800510c:	4b05      	ldr	r3, [pc, #20]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x204>)
 800510e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005110:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005112:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005114:	4618      	mov	r0, r3
 8005116:	3750      	adds	r7, #80	@ 0x50
 8005118:	46bd      	mov	sp, r7
 800511a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800511e:	bf00      	nop
 8005120:	40023800 	.word	0x40023800
 8005124:	00f42400 	.word	0x00f42400
 8005128:	007a1200 	.word	0x007a1200

0800512c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800512c:	b480      	push	{r7}
 800512e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005130:	4b03      	ldr	r3, [pc, #12]	@ (8005140 <HAL_RCC_GetHCLKFreq+0x14>)
 8005132:	681b      	ldr	r3, [r3, #0]
}
 8005134:	4618      	mov	r0, r3
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	2000006c 	.word	0x2000006c

08005144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005148:	f7ff fff0 	bl	800512c <HAL_RCC_GetHCLKFreq>
 800514c:	4602      	mov	r2, r0
 800514e:	4b05      	ldr	r3, [pc, #20]	@ (8005164 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	0a9b      	lsrs	r3, r3, #10
 8005154:	f003 0307 	and.w	r3, r3, #7
 8005158:	4903      	ldr	r1, [pc, #12]	@ (8005168 <HAL_RCC_GetPCLK1Freq+0x24>)
 800515a:	5ccb      	ldrb	r3, [r1, r3]
 800515c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005160:	4618      	mov	r0, r3
 8005162:	bd80      	pop	{r7, pc}
 8005164:	40023800 	.word	0x40023800
 8005168:	08007da8 	.word	0x08007da8

0800516c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005174:	2300      	movs	r3, #0
 8005176:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005178:	2300      	movs	r3, #0
 800517a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b00      	cmp	r3, #0
 8005186:	d105      	bne.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005190:	2b00      	cmp	r3, #0
 8005192:	d035      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005194:	4b62      	ldr	r3, [pc, #392]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005196:	2200      	movs	r2, #0
 8005198:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800519a:	f7fc fbcd 	bl	8001938 <HAL_GetTick>
 800519e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051a0:	e008      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80051a2:	f7fc fbc9 	bl	8001938 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e0b0      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051b4:	4b5b      	ldr	r3, [pc, #364]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1f0      	bne.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	019a      	lsls	r2, r3, #6
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	071b      	lsls	r3, r3, #28
 80051cc:	4955      	ldr	r1, [pc, #340]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051d4:	4b52      	ldr	r3, [pc, #328]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80051d6:	2201      	movs	r2, #1
 80051d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051da:	f7fc fbad 	bl	8001938 <HAL_GetTick>
 80051de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051e0:	e008      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80051e2:	f7fc fba9 	bl	8001938 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d901      	bls.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e090      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051f4:	4b4b      	ldr	r3, [pc, #300]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d0f0      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 8083 	beq.w	8005314 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800520e:	2300      	movs	r3, #0
 8005210:	60fb      	str	r3, [r7, #12]
 8005212:	4b44      	ldr	r3, [pc, #272]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005216:	4a43      	ldr	r2, [pc, #268]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005218:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800521c:	6413      	str	r3, [r2, #64]	@ 0x40
 800521e:	4b41      	ldr	r3, [pc, #260]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800522a:	4b3f      	ldr	r3, [pc, #252]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a3e      	ldr	r2, [pc, #248]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005230:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005234:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005236:	f7fc fb7f 	bl	8001938 <HAL_GetTick>
 800523a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800523c:	e008      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800523e:	f7fc fb7b 	bl	8001938 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d901      	bls.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e062      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005250:	4b35      	ldr	r3, [pc, #212]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005258:	2b00      	cmp	r3, #0
 800525a:	d0f0      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800525c:	4b31      	ldr	r3, [pc, #196]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800525e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005260:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005264:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d02f      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	429a      	cmp	r2, r3
 8005278:	d028      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800527a:	4b2a      	ldr	r3, [pc, #168]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800527c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800527e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005282:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005284:	4b29      	ldr	r3, [pc, #164]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005286:	2201      	movs	r2, #1
 8005288:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800528a:	4b28      	ldr	r3, [pc, #160]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800528c:	2200      	movs	r2, #0
 800528e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005290:	4a24      	ldr	r2, [pc, #144]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005296:	4b23      	ldr	r3, [pc, #140]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d114      	bne.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80052a2:	f7fc fb49 	bl	8001938 <HAL_GetTick>
 80052a6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052a8:	e00a      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052aa:	f7fc fb45 	bl	8001938 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d901      	bls.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e02a      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052c0:	4b18      	ldr	r3, [pc, #96]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d0ee      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052d8:	d10d      	bne.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80052da:	4b12      	ldr	r3, [pc, #72]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80052ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052ee:	490d      	ldr	r1, [pc, #52]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	608b      	str	r3, [r1, #8]
 80052f4:	e005      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80052f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	4a0a      	ldr	r2, [pc, #40]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052fc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005300:	6093      	str	r3, [r2, #8]
 8005302:	4b08      	ldr	r3, [pc, #32]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005304:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800530e:	4905      	ldr	r1, [pc, #20]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005310:	4313      	orrs	r3, r2
 8005312:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3718      	adds	r7, #24
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	42470068 	.word	0x42470068
 8005324:	40023800 	.word	0x40023800
 8005328:	40007000 	.word	0x40007000
 800532c:	42470e40 	.word	0x42470e40

08005330 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005330:	b480      	push	{r7}
 8005332:	b087      	sub	sp, #28
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800533c:	2300      	movs	r3, #0
 800533e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005340:	2300      	movs	r3, #0
 8005342:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005344:	2300      	movs	r3, #0
 8005346:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d13f      	bne.n	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800534e:	4b24      	ldr	r3, [pc, #144]	@ (80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d006      	beq.n	800536c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005364:	d12f      	bne.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005366:	4b1f      	ldr	r3, [pc, #124]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005368:	617b      	str	r3, [r7, #20]
          break;
 800536a:	e02f      	b.n	80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800536c:	4b1c      	ldr	r3, [pc, #112]	@ (80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005374:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005378:	d108      	bne.n	800538c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800537a:	4b19      	ldr	r3, [pc, #100]	@ (80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005382:	4a19      	ldr	r2, [pc, #100]	@ (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005384:	fbb2 f3f3 	udiv	r3, r2, r3
 8005388:	613b      	str	r3, [r7, #16]
 800538a:	e007      	b.n	800539c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800538c:	4b14      	ldr	r3, [pc, #80]	@ (80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005394:	4a15      	ldr	r2, [pc, #84]	@ (80053ec <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005396:	fbb2 f3f3 	udiv	r3, r2, r3
 800539a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800539c:	4b10      	ldr	r3, [pc, #64]	@ (80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800539e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053a2:	099b      	lsrs	r3, r3, #6
 80053a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	fb02 f303 	mul.w	r3, r2, r3
 80053ae:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80053b0:	4b0b      	ldr	r3, [pc, #44]	@ (80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80053b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053b6:	0f1b      	lsrs	r3, r3, #28
 80053b8:	f003 0307 	and.w	r3, r3, #7
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c2:	617b      	str	r3, [r7, #20]
          break;
 80053c4:	e002      	b.n	80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80053c6:	2300      	movs	r3, #0
 80053c8:	617b      	str	r3, [r7, #20]
          break;
 80053ca:	bf00      	nop
        }
      }
      break;
 80053cc:	e000      	b.n	80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80053ce:	bf00      	nop
    }
  }
  return frequency;
 80053d0:	697b      	ldr	r3, [r7, #20]
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	371c      	adds	r7, #28
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	40023800 	.word	0x40023800
 80053e4:	00bb8000 	.word	0x00bb8000
 80053e8:	007a1200 	.word	0x007a1200
 80053ec:	00f42400 	.word	0x00f42400

080053f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e07b      	b.n	80054fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005406:	2b00      	cmp	r3, #0
 8005408:	d108      	bne.n	800541c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005412:	d009      	beq.n	8005428 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	61da      	str	r2, [r3, #28]
 800541a:	e005      	b.n	8005428 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d106      	bne.n	8005448 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f7fb febc 	bl	80011c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2202      	movs	r2, #2
 800544c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800545e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005470:	431a      	orrs	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800547a:	431a      	orrs	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	f003 0302 	and.w	r3, r3, #2
 8005484:	431a      	orrs	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	431a      	orrs	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005498:	431a      	orrs	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	69db      	ldr	r3, [r3, #28]
 800549e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a1b      	ldr	r3, [r3, #32]
 80054a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ac:	ea42 0103 	orr.w	r1, r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	0c1b      	lsrs	r3, r3, #16
 80054c6:	f003 0104 	and.w	r1, r3, #4
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ce:	f003 0210 	and.w	r2, r3, #16
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	69da      	ldr	r2, [r3, #28]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b082      	sub	sp, #8
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e01a      	b.n	800554a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2202      	movs	r2, #2
 8005518:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800552a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7fb fe8f 	bl	8001250 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b08a      	sub	sp, #40	@ 0x28
 8005556:	af00      	add	r7, sp, #0
 8005558:	60f8      	str	r0, [r7, #12]
 800555a:	60b9      	str	r1, [r7, #8]
 800555c:	607a      	str	r2, [r7, #4]
 800555e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005560:	2301      	movs	r3, #1
 8005562:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005564:	f7fc f9e8 	bl	8001938 <HAL_GetTick>
 8005568:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005570:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005578:	887b      	ldrh	r3, [r7, #2]
 800557a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800557c:	7ffb      	ldrb	r3, [r7, #31]
 800557e:	2b01      	cmp	r3, #1
 8005580:	d00c      	beq.n	800559c <HAL_SPI_TransmitReceive+0x4a>
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005588:	d106      	bne.n	8005598 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d102      	bne.n	8005598 <HAL_SPI_TransmitReceive+0x46>
 8005592:	7ffb      	ldrb	r3, [r7, #31]
 8005594:	2b04      	cmp	r3, #4
 8005596:	d001      	beq.n	800559c <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005598:	2302      	movs	r3, #2
 800559a:	e17f      	b.n	800589c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d005      	beq.n	80055ae <HAL_SPI_TransmitReceive+0x5c>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d002      	beq.n	80055ae <HAL_SPI_TransmitReceive+0x5c>
 80055a8:	887b      	ldrh	r3, [r7, #2]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e174      	b.n	800589c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d101      	bne.n	80055c0 <HAL_SPI_TransmitReceive+0x6e>
 80055bc:	2302      	movs	r3, #2
 80055be:	e16d      	b.n	800589c <HAL_SPI_TransmitReceive+0x34a>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b04      	cmp	r3, #4
 80055d2:	d003      	beq.n	80055dc <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2205      	movs	r2, #5
 80055d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	887a      	ldrh	r2, [r7, #2]
 80055ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	887a      	ldrh	r2, [r7, #2]
 80055f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	887a      	ldrh	r2, [r7, #2]
 80055fe:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	887a      	ldrh	r2, [r7, #2]
 8005604:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800561c:	2b40      	cmp	r3, #64	@ 0x40
 800561e:	d007      	beq.n	8005630 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800562e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005638:	d17e      	bne.n	8005738 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d002      	beq.n	8005648 <HAL_SPI_TransmitReceive+0xf6>
 8005642:	8afb      	ldrh	r3, [r7, #22]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d16c      	bne.n	8005722 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800564c:	881a      	ldrh	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005658:	1c9a      	adds	r2, r3, #2
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005662:	b29b      	uxth	r3, r3
 8005664:	3b01      	subs	r3, #1
 8005666:	b29a      	uxth	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800566c:	e059      	b.n	8005722 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f003 0302 	and.w	r3, r3, #2
 8005678:	2b02      	cmp	r3, #2
 800567a:	d11b      	bne.n	80056b4 <HAL_SPI_TransmitReceive+0x162>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005680:	b29b      	uxth	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d016      	beq.n	80056b4 <HAL_SPI_TransmitReceive+0x162>
 8005686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005688:	2b01      	cmp	r3, #1
 800568a:	d113      	bne.n	80056b4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005690:	881a      	ldrh	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800569c:	1c9a      	adds	r2, r3, #2
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	3b01      	subs	r3, #1
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056b0:	2300      	movs	r3, #0
 80056b2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d119      	bne.n	80056f6 <HAL_SPI_TransmitReceive+0x1a4>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d014      	beq.n	80056f6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68da      	ldr	r2, [r3, #12]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d6:	b292      	uxth	r2, r2
 80056d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056de:	1c9a      	adds	r2, r3, #2
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	3b01      	subs	r3, #1
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056f2:	2301      	movs	r3, #1
 80056f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80056f6:	f7fc f91f 	bl	8001938 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	6a3b      	ldr	r3, [r7, #32]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005702:	429a      	cmp	r2, r3
 8005704:	d80d      	bhi.n	8005722 <HAL_SPI_TransmitReceive+0x1d0>
 8005706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570c:	d009      	beq.n	8005722 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e0bc      	b.n	800589c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005726:	b29b      	uxth	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1a0      	bne.n	800566e <HAL_SPI_TransmitReceive+0x11c>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005730:	b29b      	uxth	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d19b      	bne.n	800566e <HAL_SPI_TransmitReceive+0x11c>
 8005736:	e082      	b.n	800583e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d002      	beq.n	8005746 <HAL_SPI_TransmitReceive+0x1f4>
 8005740:	8afb      	ldrh	r3, [r7, #22]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d171      	bne.n	800582a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	330c      	adds	r3, #12
 8005750:	7812      	ldrb	r2, [r2, #0]
 8005752:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005758:	1c5a      	adds	r2, r3, #1
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005762:	b29b      	uxth	r3, r3
 8005764:	3b01      	subs	r3, #1
 8005766:	b29a      	uxth	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800576c:	e05d      	b.n	800582a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f003 0302 	and.w	r3, r3, #2
 8005778:	2b02      	cmp	r3, #2
 800577a:	d11c      	bne.n	80057b6 <HAL_SPI_TransmitReceive+0x264>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005780:	b29b      	uxth	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d017      	beq.n	80057b6 <HAL_SPI_TransmitReceive+0x264>
 8005786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005788:	2b01      	cmp	r3, #1
 800578a:	d114      	bne.n	80057b6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	330c      	adds	r3, #12
 8005796:	7812      	ldrb	r2, [r2, #0]
 8005798:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800579e:	1c5a      	adds	r2, r3, #1
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	3b01      	subs	r3, #1
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d119      	bne.n	80057f8 <HAL_SPI_TransmitReceive+0x2a6>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d014      	beq.n	80057f8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68da      	ldr	r2, [r3, #12]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d8:	b2d2      	uxtb	r2, r2
 80057da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e0:	1c5a      	adds	r2, r3, #1
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	3b01      	subs	r3, #1
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057f4:	2301      	movs	r3, #1
 80057f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80057f8:	f7fc f89e 	bl	8001938 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005804:	429a      	cmp	r2, r3
 8005806:	d803      	bhi.n	8005810 <HAL_SPI_TransmitReceive+0x2be>
 8005808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800580a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580e:	d102      	bne.n	8005816 <HAL_SPI_TransmitReceive+0x2c4>
 8005810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005812:	2b00      	cmp	r3, #0
 8005814:	d109      	bne.n	800582a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e038      	b.n	800589c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800582e:	b29b      	uxth	r3, r3
 8005830:	2b00      	cmp	r3, #0
 8005832:	d19c      	bne.n	800576e <HAL_SPI_TransmitReceive+0x21c>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005838:	b29b      	uxth	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d197      	bne.n	800576e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800583e:	6a3a      	ldr	r2, [r7, #32]
 8005840:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f000 f8c4 	bl	80059d0 <SPI_EndRxTxTransaction>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d008      	beq.n	8005860 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2220      	movs	r2, #32
 8005852:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e01d      	b.n	800589c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10a      	bne.n	800587e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005868:	2300      	movs	r3, #0
 800586a:	613b      	str	r3, [r7, #16]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	613b      	str	r3, [r7, #16]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	613b      	str	r3, [r7, #16]
 800587c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005892:	2b00      	cmp	r3, #0
 8005894:	d001      	beq.n	800589a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e000      	b.n	800589c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800589a:	2300      	movs	r3, #0
  }
}
 800589c:	4618      	mov	r0, r3
 800589e:	3728      	adds	r7, #40	@ 0x28
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058b2:	b2db      	uxtb	r3, r3
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b088      	sub	sp, #32
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	603b      	str	r3, [r7, #0]
 80058cc:	4613      	mov	r3, r2
 80058ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058d0:	f7fc f832 	bl	8001938 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d8:	1a9b      	subs	r3, r3, r2
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	4413      	add	r3, r2
 80058de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80058e0:	f7fc f82a 	bl	8001938 <HAL_GetTick>
 80058e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058e6:	4b39      	ldr	r3, [pc, #228]	@ (80059cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	015b      	lsls	r3, r3, #5
 80058ec:	0d1b      	lsrs	r3, r3, #20
 80058ee:	69fa      	ldr	r2, [r7, #28]
 80058f0:	fb02 f303 	mul.w	r3, r2, r3
 80058f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058f6:	e054      	b.n	80059a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fe:	d050      	beq.n	80059a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005900:	f7fc f81a 	bl	8001938 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	69fa      	ldr	r2, [r7, #28]
 800590c:	429a      	cmp	r2, r3
 800590e:	d902      	bls.n	8005916 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d13d      	bne.n	8005992 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005924:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800592e:	d111      	bne.n	8005954 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005938:	d004      	beq.n	8005944 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005942:	d107      	bne.n	8005954 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005952:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005958:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800595c:	d10f      	bne.n	800597e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800596c:	601a      	str	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800597c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e017      	b.n	80059c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005998:	2300      	movs	r3, #0
 800599a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	3b01      	subs	r3, #1
 80059a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	689a      	ldr	r2, [r3, #8]
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	4013      	ands	r3, r2
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	bf0c      	ite	eq
 80059b2:	2301      	moveq	r3, #1
 80059b4:	2300      	movne	r3, #0
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	461a      	mov	r2, r3
 80059ba:	79fb      	ldrb	r3, [r7, #7]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d19b      	bne.n	80058f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3720      	adds	r7, #32
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	2000006c 	.word	0x2000006c

080059d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b088      	sub	sp, #32
 80059d4:	af02      	add	r7, sp, #8
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	2201      	movs	r2, #1
 80059e4:	2102      	movs	r1, #2
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f7ff ff6a 	bl	80058c0 <SPI_WaitFlagStateUntilTimeout>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d007      	beq.n	8005a02 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059f6:	f043 0220 	orr.w	r2, r3, #32
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e032      	b.n	8005a68 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a02:	4b1b      	ldr	r3, [pc, #108]	@ (8005a70 <SPI_EndRxTxTransaction+0xa0>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a1b      	ldr	r2, [pc, #108]	@ (8005a74 <SPI_EndRxTxTransaction+0xa4>)
 8005a08:	fba2 2303 	umull	r2, r3, r2, r3
 8005a0c:	0d5b      	lsrs	r3, r3, #21
 8005a0e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005a12:	fb02 f303 	mul.w	r3, r2, r3
 8005a16:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a20:	d112      	bne.n	8005a48 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	2180      	movs	r1, #128	@ 0x80
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f7ff ff47 	bl	80058c0 <SPI_WaitFlagStateUntilTimeout>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d016      	beq.n	8005a66 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a3c:	f043 0220 	orr.w	r2, r3, #32
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e00f      	b.n	8005a68 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00a      	beq.n	8005a64 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	3b01      	subs	r3, #1
 8005a52:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a5e:	2b80      	cmp	r3, #128	@ 0x80
 8005a60:	d0f2      	beq.n	8005a48 <SPI_EndRxTxTransaction+0x78>
 8005a62:	e000      	b.n	8005a66 <SPI_EndRxTxTransaction+0x96>
        break;
 8005a64:	bf00      	nop
  }

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3718      	adds	r7, #24
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	2000006c 	.word	0x2000006c
 8005a74:	165e9f81 	.word	0x165e9f81

08005a78 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f043 0201 	orr.w	r2, r3, #1
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b083      	sub	sp, #12
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f023 0201 	bic.w	r2, r3, #1
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	3301      	adds	r3, #1
 8005ace:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ad6:	d901      	bls.n	8005adc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e01b      	b.n	8005b14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	daf2      	bge.n	8005aca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	019b      	lsls	r3, r3, #6
 8005aec:	f043 0220 	orr.w	r2, r3, #32
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	3301      	adds	r3, #1
 8005af8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b00:	d901      	bls.n	8005b06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e006      	b.n	8005b14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	f003 0320 	and.w	r3, r3, #32
 8005b0e:	2b20      	cmp	r3, #32
 8005b10:	d0f0      	beq.n	8005af4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3714      	adds	r7, #20
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b38:	d901      	bls.n	8005b3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e018      	b.n	8005b70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	daf2      	bge.n	8005b2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b46:	2300      	movs	r3, #0
 8005b48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2210      	movs	r2, #16
 8005b4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	3301      	adds	r3, #1
 8005b54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b5c:	d901      	bls.n	8005b62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e006      	b.n	8005b70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	f003 0310 	and.w	r3, r3, #16
 8005b6a:	2b10      	cmp	r3, #16
 8005b6c:	d0f0      	beq.n	8005b50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3714      	adds	r7, #20
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b08b      	sub	sp, #44	@ 0x2c
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	4613      	mov	r3, r2
 8005b88:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005b92:	88fb      	ldrh	r3, [r7, #6]
 8005b94:	089b      	lsrs	r3, r3, #2
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005b9a:	88fb      	ldrh	r3, [r7, #6]
 8005b9c:	f003 0303 	and.w	r3, r3, #3
 8005ba0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	623b      	str	r3, [r7, #32]
 8005ba6:	e014      	b.n	8005bd2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb2:	601a      	str	r2, [r3, #0]
    pDest++;
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc8:	3301      	adds	r3, #1
 8005bca:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	623b      	str	r3, [r7, #32]
 8005bd2:	6a3a      	ldr	r2, [r7, #32]
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d3e6      	bcc.n	8005ba8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005bda:	8bfb      	ldrh	r3, [r7, #30]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d01e      	beq.n	8005c1e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005be0:	2300      	movs	r3, #0
 8005be2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bea:	461a      	mov	r2, r3
 8005bec:	f107 0310 	add.w	r3, r7, #16
 8005bf0:	6812      	ldr	r2, [r2, #0]
 8005bf2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	6a3b      	ldr	r3, [r7, #32]
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	00db      	lsls	r3, r3, #3
 8005bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c04:	701a      	strb	r2, [r3, #0]
      i++;
 8005c06:	6a3b      	ldr	r3, [r7, #32]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	623b      	str	r3, [r7, #32]
      pDest++;
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0e:	3301      	adds	r3, #1
 8005c10:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005c12:	8bfb      	ldrh	r3, [r7, #30]
 8005c14:	3b01      	subs	r3, #1
 8005c16:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005c18:	8bfb      	ldrh	r3, [r7, #30]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1ea      	bne.n	8005bf4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	372c      	adds	r7, #44	@ 0x2c
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	4013      	ands	r3, r2
 8005c42:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c44:	68fb      	ldr	r3, [r7, #12]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3714      	adds	r7, #20
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr

08005c52 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005c52:	b480      	push	{r7}
 8005c54:	b085      	sub	sp, #20
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005c62:	78fb      	ldrb	r3, [r7, #3]
 8005c64:	015a      	lsls	r2, r3, #5
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005c72:	78fb      	ldrb	r3, [r7, #3]
 8005c74:	015a      	lsls	r2, r3, #5
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	4413      	add	r3, r2
 8005c7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	4013      	ands	r3, r2
 8005c84:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c86:	68bb      	ldr	r3, [r7, #8]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	f003 0301 	and.w	r3, r3, #1
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	460b      	mov	r3, r1
 8005cba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005cce:	f023 0303 	bic.w	r3, r3, #3
 8005cd2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	78fb      	ldrb	r3, [r7, #3]
 8005cde:	f003 0303 	and.w	r3, r3, #3
 8005ce2:	68f9      	ldr	r1, [r7, #12]
 8005ce4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005cec:	78fb      	ldrb	r3, [r7, #3]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d107      	bne.n	8005d02 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005cfe:	6053      	str	r3, [r2, #4]
 8005d00:	e00c      	b.n	8005d1c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005d02:	78fb      	ldrb	r3, [r7, #3]
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d107      	bne.n	8005d18 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d0e:	461a      	mov	r2, r3
 8005d10:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005d14:	6053      	str	r3, [r2, #4]
 8005d16:	e001      	b.n	8005d1c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e000      	b.n	8005d1e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b085      	sub	sp, #20
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	b29b      	uxth	r3, r3
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b089      	sub	sp, #36	@ 0x24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	460b      	mov	r3, r1
 8005d56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005d5c:	78fb      	ldrb	r3, [r7, #3]
 8005d5e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	0c9b      	lsrs	r3, r3, #18
 8005d74:	f003 0303 	and.w	r3, r3, #3
 8005d78:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	015a      	lsls	r2, r3, #5
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	4413      	add	r3, r2
 8005d82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	0fdb      	lsrs	r3, r3, #31
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	0fdb      	lsrs	r3, r3, #31
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f003 0320 	and.w	r3, r3, #32
 8005dae:	2b20      	cmp	r3, #32
 8005db0:	d10d      	bne.n	8005dce <USB_HC_Halt+0x82>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10a      	bne.n	8005dce <USB_HC_Halt+0x82>
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d005      	beq.n	8005dca <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d002      	beq.n	8005dca <USB_HC_Halt+0x7e>
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	2b03      	cmp	r3, #3
 8005dc8:	d101      	bne.n	8005dce <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	e0d8      	b.n	8005f80 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d002      	beq.n	8005dda <USB_HC_Halt+0x8e>
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d173      	bne.n	8005ec2 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	0151      	lsls	r1, r2, #5
 8005dec:	69fa      	ldr	r2, [r7, #28]
 8005dee:	440a      	add	r2, r1
 8005df0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005df4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005df8:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f003 0320 	and.w	r3, r3, #32
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d14a      	bne.n	8005e9c <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d133      	bne.n	8005e7a <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	015a      	lsls	r2, r3, #5
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	4413      	add	r3, r2
 8005e1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	0151      	lsls	r1, r2, #5
 8005e24:	69fa      	ldr	r2, [r7, #28]
 8005e26:	440a      	add	r2, r1
 8005e28:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e30:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	015a      	lsls	r2, r3, #5
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	0151      	lsls	r1, r2, #5
 8005e44:	69fa      	ldr	r2, [r7, #28]
 8005e46:	440a      	add	r2, r1
 8005e48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e4c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e50:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	3301      	adds	r3, #1
 8005e56:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e5e:	d82e      	bhi.n	8005ebe <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e76:	d0ec      	beq.n	8005e52 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e78:	e081      	b.n	8005f7e <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	0151      	lsls	r1, r2, #5
 8005e8c:	69fa      	ldr	r2, [r7, #28]
 8005e8e:	440a      	add	r2, r1
 8005e90:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e94:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e98:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e9a:	e070      	b.n	8005f7e <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	015a      	lsls	r2, r3, #5
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	69ba      	ldr	r2, [r7, #24]
 8005eac:	0151      	lsls	r1, r2, #5
 8005eae:	69fa      	ldr	r2, [r7, #28]
 8005eb0:	440a      	add	r2, r1
 8005eb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005eb6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005eba:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ebc:	e05f      	b.n	8005f7e <USB_HC_Halt+0x232>
            break;
 8005ebe:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ec0:	e05d      	b.n	8005f7e <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	015a      	lsls	r2, r3, #5
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	4413      	add	r3, r2
 8005eca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	0151      	lsls	r1, r2, #5
 8005ed4:	69fa      	ldr	r2, [r7, #28]
 8005ed6:	440a      	add	r2, r1
 8005ed8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005edc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ee0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d133      	bne.n	8005f5a <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	69ba      	ldr	r2, [r7, #24]
 8005f02:	0151      	lsls	r1, r2, #5
 8005f04:	69fa      	ldr	r2, [r7, #28]
 8005f06:	440a      	add	r2, r1
 8005f08:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f10:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	0151      	lsls	r1, r2, #5
 8005f24:	69fa      	ldr	r2, [r7, #28]
 8005f26:	440a      	add	r2, r1
 8005f28:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f2c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f30:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	3301      	adds	r3, #1
 8005f36:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f3e:	d81d      	bhi.n	8005f7c <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	015a      	lsls	r2, r3, #5
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f56:	d0ec      	beq.n	8005f32 <USB_HC_Halt+0x1e6>
 8005f58:	e011      	b.n	8005f7e <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	0151      	lsls	r1, r2, #5
 8005f6c:	69fa      	ldr	r2, [r7, #28]
 8005f6e:	440a      	add	r2, r1
 8005f70:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f74:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f78:	6013      	str	r3, [r2, #0]
 8005f7a:	e000      	b.n	8005f7e <USB_HC_Halt+0x232>
          break;
 8005f7c:	bf00      	nop
    }
  }

  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3724      	adds	r7, #36	@ 0x24
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b088      	sub	sp, #32
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f94:	2300      	movs	r3, #0
 8005f96:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7ff fd7a 	bl	8005a9a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005fa6:	2110      	movs	r1, #16
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f7ff fd87 	bl	8005abc <USB_FlushTxFifo>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f7ff fdb1 	bl	8005b20 <USB_FlushRxFifo>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005fc8:	2300      	movs	r3, #0
 8005fca:	61bb      	str	r3, [r7, #24]
 8005fcc:	e01f      	b.n	800600e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005fe4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005fec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005ff4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	015a      	lsls	r2, r3, #5
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006002:	461a      	mov	r2, r3
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	3301      	adds	r3, #1
 800600c:	61bb      	str	r3, [r7, #24]
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	2b0f      	cmp	r3, #15
 8006012:	d9dc      	bls.n	8005fce <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006014:	2300      	movs	r3, #0
 8006016:	61bb      	str	r3, [r7, #24]
 8006018:	e034      	b.n	8006084 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	4413      	add	r3, r2
 8006022:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006030:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006038:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006040:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	015a      	lsls	r2, r3, #5
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	4413      	add	r3, r2
 800604a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800604e:	461a      	mov	r2, r3
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	3301      	adds	r3, #1
 8006058:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006060:	d80c      	bhi.n	800607c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	015a      	lsls	r2, r3, #5
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	4413      	add	r3, r2
 800606a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006074:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006078:	d0ec      	beq.n	8006054 <USB_StopHost+0xc8>
 800607a:	e000      	b.n	800607e <USB_StopHost+0xf2>
        break;
 800607c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	3301      	adds	r3, #1
 8006082:	61bb      	str	r3, [r7, #24]
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	2b0f      	cmp	r3, #15
 8006088:	d9c7      	bls.n	800601a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006090:	461a      	mov	r2, r3
 8006092:	f04f 33ff 	mov.w	r3, #4294967295
 8006096:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f04f 32ff 	mov.w	r2, #4294967295
 800609e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f7ff fce9 	bl	8005a78 <USB_EnableGlobalInt>

  return ret;
 80060a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3720      	adds	r7, #32
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <osMessageQueuePut>:
  }

  return ((osMessageQueueId_t)hQueue);
}

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b088      	sub	sp, #32
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	603b      	str	r3, [r7, #0]
 80060bc:	4613      	mov	r3, r2
 80060be:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80060c4:	2300      	movs	r3, #0
 80060c6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060c8:	f3ef 8305 	mrs	r3, IPSR
 80060cc:	617b      	str	r3, [r7, #20]
  return(result);
 80060ce:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d028      	beq.n	8006126 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d005      	beq.n	80060e6 <osMessageQueuePut+0x36>
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d002      	beq.n	80060e6 <osMessageQueuePut+0x36>
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80060e6:	f06f 0303 	mvn.w	r3, #3
 80060ea:	61fb      	str	r3, [r7, #28]
 80060ec:	e038      	b.n	8006160 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80060ee:	2300      	movs	r3, #0
 80060f0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80060f2:	f107 0210 	add.w	r2, r7, #16
 80060f6:	2300      	movs	r3, #0
 80060f8:	68b9      	ldr	r1, [r7, #8]
 80060fa:	69b8      	ldr	r0, [r7, #24]
 80060fc:	f000 faca 	bl	8006694 <xQueueGenericSendFromISR>
 8006100:	4603      	mov	r3, r0
 8006102:	2b01      	cmp	r3, #1
 8006104:	d003      	beq.n	800610e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006106:	f06f 0302 	mvn.w	r3, #2
 800610a:	61fb      	str	r3, [r7, #28]
 800610c:	e028      	b.n	8006160 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d025      	beq.n	8006160 <osMessageQueuePut+0xb0>
 8006114:	4b15      	ldr	r3, [pc, #84]	@ (800616c <osMessageQueuePut+0xbc>)
 8006116:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800611a:	601a      	str	r2, [r3, #0]
 800611c:	f3bf 8f4f 	dsb	sy
 8006120:	f3bf 8f6f 	isb	sy
 8006124:	e01c      	b.n	8006160 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d002      	beq.n	8006132 <osMessageQueuePut+0x82>
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d103      	bne.n	800613a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006132:	f06f 0303 	mvn.w	r3, #3
 8006136:	61fb      	str	r3, [r7, #28]
 8006138:	e012      	b.n	8006160 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800613a:	2300      	movs	r3, #0
 800613c:	683a      	ldr	r2, [r7, #0]
 800613e:	68b9      	ldr	r1, [r7, #8]
 8006140:	69b8      	ldr	r0, [r7, #24]
 8006142:	f000 f9a5 	bl	8006490 <xQueueGenericSend>
 8006146:	4603      	mov	r3, r0
 8006148:	2b01      	cmp	r3, #1
 800614a:	d009      	beq.n	8006160 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d003      	beq.n	800615a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006152:	f06f 0301 	mvn.w	r3, #1
 8006156:	61fb      	str	r3, [r7, #28]
 8006158:	e002      	b.n	8006160 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800615a:	f06f 0302 	mvn.w	r3, #2
 800615e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006160:	69fb      	ldr	r3, [r7, #28]
}
 8006162:	4618      	mov	r0, r3
 8006164:	3720      	adds	r7, #32
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	e000ed04 	.word	0xe000ed04

08006170 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	689a      	ldr	r2, [r3, #8]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	683a      	ldr	r2, [r7, #0]
 8006194:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	1c5a      	adds	r2, r3, #1
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	601a      	str	r2, [r3, #0]
}
 80061ac:	bf00      	nop
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ce:	d103      	bne.n	80061d8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	60fb      	str	r3, [r7, #12]
 80061d6:	e00c      	b.n	80061f2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	3308      	adds	r3, #8
 80061dc:	60fb      	str	r3, [r7, #12]
 80061de:	e002      	b.n	80061e6 <vListInsert+0x2e>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	60fb      	str	r3, [r7, #12]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d2f6      	bcs.n	80061e0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	683a      	ldr	r2, [r7, #0]
 8006200:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	1c5a      	adds	r2, r3, #1
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	601a      	str	r2, [r3, #0]
}
 800621e:	bf00      	nop
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800622a:	b480      	push	{r7}
 800622c:	b085      	sub	sp, #20
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	6892      	ldr	r2, [r2, #8]
 8006240:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	6852      	ldr	r2, [r2, #4]
 800624a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	429a      	cmp	r2, r3
 8006254:	d103      	bne.n	800625e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	689a      	ldr	r2, [r3, #8]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	1e5a      	subs	r2, r3, #1
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
}
 8006272:	4618      	mov	r0, r3
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
	...

08006280 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006280:	4b07      	ldr	r3, [pc, #28]	@ (80062a0 <pxCurrentTCBConst2>)
 8006282:	6819      	ldr	r1, [r3, #0]
 8006284:	6808      	ldr	r0, [r1, #0]
 8006286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800628a:	f380 8809 	msr	PSP, r0
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	f04f 0000 	mov.w	r0, #0
 8006296:	f380 8811 	msr	BASEPRI, r0
 800629a:	4770      	bx	lr
 800629c:	f3af 8000 	nop.w

080062a0 <pxCurrentTCBConst2>:
 80062a0:	200002b4 	.word	0x200002b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80062a4:	bf00      	nop
 80062a6:	bf00      	nop

080062a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80062ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	607b      	str	r3, [r7, #4]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80062c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80062c2:	4b10      	ldr	r3, [pc, #64]	@ (8006304 <vPortEnterCritical+0x5c>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	3301      	adds	r3, #1
 80062c8:	4a0e      	ldr	r2, [pc, #56]	@ (8006304 <vPortEnterCritical+0x5c>)
 80062ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80062cc:	4b0d      	ldr	r3, [pc, #52]	@ (8006304 <vPortEnterCritical+0x5c>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d110      	bne.n	80062f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80062d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006308 <vPortEnterCritical+0x60>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00b      	beq.n	80062f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80062de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e2:	f383 8811 	msr	BASEPRI, r3
 80062e6:	f3bf 8f6f 	isb	sy
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	603b      	str	r3, [r7, #0]
}
 80062f0:	bf00      	nop
 80062f2:	bf00      	nop
 80062f4:	e7fd      	b.n	80062f2 <vPortEnterCritical+0x4a>
	}
}
 80062f6:	bf00      	nop
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	20000078 	.word	0x20000078
 8006308:	e000ed04 	.word	0xe000ed04

0800630c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006312:	4b12      	ldr	r3, [pc, #72]	@ (800635c <vPortExitCritical+0x50>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d10b      	bne.n	8006332 <vPortExitCritical+0x26>
	__asm volatile
 800631a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800631e:	f383 8811 	msr	BASEPRI, r3
 8006322:	f3bf 8f6f 	isb	sy
 8006326:	f3bf 8f4f 	dsb	sy
 800632a:	607b      	str	r3, [r7, #4]
}
 800632c:	bf00      	nop
 800632e:	bf00      	nop
 8006330:	e7fd      	b.n	800632e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006332:	4b0a      	ldr	r3, [pc, #40]	@ (800635c <vPortExitCritical+0x50>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	3b01      	subs	r3, #1
 8006338:	4a08      	ldr	r2, [pc, #32]	@ (800635c <vPortExitCritical+0x50>)
 800633a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800633c:	4b07      	ldr	r3, [pc, #28]	@ (800635c <vPortExitCritical+0x50>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d105      	bne.n	8006350 <vPortExitCritical+0x44>
 8006344:	2300      	movs	r3, #0
 8006346:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800634e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr
 800635c:	20000078 	.word	0x20000078

08006360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006360:	f3ef 8009 	mrs	r0, PSP
 8006364:	f3bf 8f6f 	isb	sy
 8006368:	4b15      	ldr	r3, [pc, #84]	@ (80063c0 <pxCurrentTCBConst>)
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	f01e 0f10 	tst.w	lr, #16
 8006370:	bf08      	it	eq
 8006372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800637a:	6010      	str	r0, [r2, #0]
 800637c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006380:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006384:	f380 8811 	msr	BASEPRI, r0
 8006388:	f3bf 8f4f 	dsb	sy
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	f000 fc58 	bl	8006c44 <vTaskSwitchContext>
 8006394:	f04f 0000 	mov.w	r0, #0
 8006398:	f380 8811 	msr	BASEPRI, r0
 800639c:	bc09      	pop	{r0, r3}
 800639e:	6819      	ldr	r1, [r3, #0]
 80063a0:	6808      	ldr	r0, [r1, #0]
 80063a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063a6:	f01e 0f10 	tst.w	lr, #16
 80063aa:	bf08      	it	eq
 80063ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80063b0:	f380 8809 	msr	PSP, r0
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	f3af 8000 	nop.w

080063c0 <pxCurrentTCBConst>:
 80063c0:	200002b4 	.word	0x200002b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80063c4:	bf00      	nop
 80063c6:	bf00      	nop

080063c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
	__asm volatile
 80063ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	607b      	str	r3, [r7, #4]
}
 80063e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80063e2:	f000 fb75 	bl	8006ad0 <xTaskIncrementTick>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d003      	beq.n	80063f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80063ec:	4b06      	ldr	r3, [pc, #24]	@ (8006408 <xPortSysTickHandler+0x40>)
 80063ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063f2:	601a      	str	r2, [r3, #0]
 80063f4:	2300      	movs	r3, #0
 80063f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	f383 8811 	msr	BASEPRI, r3
}
 80063fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006400:	bf00      	nop
 8006402:	3708      	adds	r7, #8
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	e000ed04 	.word	0xe000ed04

0800640c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006412:	f3ef 8305 	mrs	r3, IPSR
 8006416:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2b0f      	cmp	r3, #15
 800641c:	d915      	bls.n	800644a <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800641e:	4a18      	ldr	r2, [pc, #96]	@ (8006480 <vPortValidateInterruptPriority+0x74>)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4413      	add	r3, r2
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006428:	4b16      	ldr	r3, [pc, #88]	@ (8006484 <vPortValidateInterruptPriority+0x78>)
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	7afa      	ldrb	r2, [r7, #11]
 800642e:	429a      	cmp	r2, r3
 8006430:	d20b      	bcs.n	800644a <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	607b      	str	r3, [r7, #4]
}
 8006444:	bf00      	nop
 8006446:	bf00      	nop
 8006448:	e7fd      	b.n	8006446 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800644a:	4b0f      	ldr	r3, [pc, #60]	@ (8006488 <vPortValidateInterruptPriority+0x7c>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006452:	4b0e      	ldr	r3, [pc, #56]	@ (800648c <vPortValidateInterruptPriority+0x80>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	429a      	cmp	r2, r3
 8006458:	d90b      	bls.n	8006472 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800645a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	603b      	str	r3, [r7, #0]
}
 800646c:	bf00      	nop
 800646e:	bf00      	nop
 8006470:	e7fd      	b.n	800646e <vPortValidateInterruptPriority+0x62>
	}
 8006472:	bf00      	nop
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	e000e3f0 	.word	0xe000e3f0
 8006484:	200002ac 	.word	0x200002ac
 8006488:	e000ed0c 	.word	0xe000ed0c
 800648c:	200002b0 	.word	0x200002b0

08006490 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b08e      	sub	sp, #56	@ 0x38
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
 800649c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800649e:	2300      	movs	r3, #0
 80064a0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80064a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10b      	bne.n	80064c4 <xQueueGenericSend+0x34>
	__asm volatile
 80064ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b0:	f383 8811 	msr	BASEPRI, r3
 80064b4:	f3bf 8f6f 	isb	sy
 80064b8:	f3bf 8f4f 	dsb	sy
 80064bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80064be:	bf00      	nop
 80064c0:	bf00      	nop
 80064c2:	e7fd      	b.n	80064c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d103      	bne.n	80064d2 <xQueueGenericSend+0x42>
 80064ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <xQueueGenericSend+0x46>
 80064d2:	2301      	movs	r3, #1
 80064d4:	e000      	b.n	80064d8 <xQueueGenericSend+0x48>
 80064d6:	2300      	movs	r3, #0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10b      	bne.n	80064f4 <xQueueGenericSend+0x64>
	__asm volatile
 80064dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e0:	f383 8811 	msr	BASEPRI, r3
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80064ee:	bf00      	nop
 80064f0:	bf00      	nop
 80064f2:	e7fd      	b.n	80064f0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d103      	bne.n	8006502 <xQueueGenericSend+0x72>
 80064fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d101      	bne.n	8006506 <xQueueGenericSend+0x76>
 8006502:	2301      	movs	r3, #1
 8006504:	e000      	b.n	8006508 <xQueueGenericSend+0x78>
 8006506:	2300      	movs	r3, #0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10b      	bne.n	8006524 <xQueueGenericSend+0x94>
	__asm volatile
 800650c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006510:	f383 8811 	msr	BASEPRI, r3
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	623b      	str	r3, [r7, #32]
}
 800651e:	bf00      	nop
 8006520:	bf00      	nop
 8006522:	e7fd      	b.n	8006520 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006524:	f000 fd1c 	bl	8006f60 <xTaskGetSchedulerState>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d102      	bne.n	8006534 <xQueueGenericSend+0xa4>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <xQueueGenericSend+0xa8>
 8006534:	2301      	movs	r3, #1
 8006536:	e000      	b.n	800653a <xQueueGenericSend+0xaa>
 8006538:	2300      	movs	r3, #0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10b      	bne.n	8006556 <xQueueGenericSend+0xc6>
	__asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	61fb      	str	r3, [r7, #28]
}
 8006550:	bf00      	nop
 8006552:	bf00      	nop
 8006554:	e7fd      	b.n	8006552 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006556:	f7ff fea7 	bl	80062a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800655a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800655c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800655e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006562:	429a      	cmp	r2, r3
 8006564:	d302      	bcc.n	800656c <xQueueGenericSend+0xdc>
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	2b02      	cmp	r3, #2
 800656a:	d129      	bne.n	80065c0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800656c:	683a      	ldr	r2, [r7, #0]
 800656e:	68b9      	ldr	r1, [r7, #8]
 8006570:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006572:	f000 f92d 	bl	80067d0 <prvCopyDataToQueue>
 8006576:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800657a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800657c:	2b00      	cmp	r3, #0
 800657e:	d010      	beq.n	80065a2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006582:	3324      	adds	r3, #36	@ 0x24
 8006584:	4618      	mov	r0, r3
 8006586:	f000 fbe1 	bl	8006d4c <xTaskRemoveFromEventList>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d013      	beq.n	80065b8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006590:	4b3f      	ldr	r3, [pc, #252]	@ (8006690 <xQueueGenericSend+0x200>)
 8006592:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006596:	601a      	str	r2, [r3, #0]
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	f3bf 8f6f 	isb	sy
 80065a0:	e00a      	b.n	80065b8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80065a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d007      	beq.n	80065b8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80065a8:	4b39      	ldr	r3, [pc, #228]	@ (8006690 <xQueueGenericSend+0x200>)
 80065aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065ae:	601a      	str	r2, [r3, #0]
 80065b0:	f3bf 8f4f 	dsb	sy
 80065b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80065b8:	f7ff fea8 	bl	800630c <vPortExitCritical>
				return pdPASS;
 80065bc:	2301      	movs	r3, #1
 80065be:	e063      	b.n	8006688 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d103      	bne.n	80065ce <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80065c6:	f7ff fea1 	bl	800630c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80065ca:	2300      	movs	r3, #0
 80065cc:	e05c      	b.n	8006688 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d106      	bne.n	80065e2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065d4:	f107 0314 	add.w	r3, r7, #20
 80065d8:	4618      	mov	r0, r3
 80065da:	f000 fc1b 	bl	8006e14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065de:	2301      	movs	r3, #1
 80065e0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065e2:	f7ff fe93 	bl	800630c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065e6:	f000 f9c7 	bl	8006978 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065ea:	f7ff fe5d 	bl	80062a8 <vPortEnterCritical>
 80065ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80065f4:	b25b      	sxtb	r3, r3
 80065f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fa:	d103      	bne.n	8006604 <xQueueGenericSend+0x174>
 80065fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006606:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800660a:	b25b      	sxtb	r3, r3
 800660c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006610:	d103      	bne.n	800661a <xQueueGenericSend+0x18a>
 8006612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006614:	2200      	movs	r2, #0
 8006616:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800661a:	f7ff fe77 	bl	800630c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800661e:	1d3a      	adds	r2, r7, #4
 8006620:	f107 0314 	add.w	r3, r7, #20
 8006624:	4611      	mov	r1, r2
 8006626:	4618      	mov	r0, r3
 8006628:	f000 fc0a 	bl	8006e40 <xTaskCheckForTimeOut>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d124      	bne.n	800667c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006632:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006634:	f000 f988 	bl	8006948 <prvIsQueueFull>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d018      	beq.n	8006670 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800663e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006640:	3310      	adds	r3, #16
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	4611      	mov	r1, r2
 8006646:	4618      	mov	r0, r3
 8006648:	f000 fb5a 	bl	8006d00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800664c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800664e:	f000 f929 	bl	80068a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006652:	f000 f99f 	bl	8006994 <xTaskResumeAll>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	f47f af7c 	bne.w	8006556 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800665e:	4b0c      	ldr	r3, [pc, #48]	@ (8006690 <xQueueGenericSend+0x200>)
 8006660:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006664:	601a      	str	r2, [r3, #0]
 8006666:	f3bf 8f4f 	dsb	sy
 800666a:	f3bf 8f6f 	isb	sy
 800666e:	e772      	b.n	8006556 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006670:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006672:	f000 f917 	bl	80068a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006676:	f000 f98d 	bl	8006994 <xTaskResumeAll>
 800667a:	e76c      	b.n	8006556 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800667c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800667e:	f000 f911 	bl	80068a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006682:	f000 f987 	bl	8006994 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006686:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006688:	4618      	mov	r0, r3
 800668a:	3738      	adds	r7, #56	@ 0x38
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	e000ed04 	.word	0xe000ed04

08006694 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b090      	sub	sp, #64	@ 0x40
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
 80066a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80066a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10b      	bne.n	80066c4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80066ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b0:	f383 8811 	msr	BASEPRI, r3
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	f3bf 8f4f 	dsb	sy
 80066bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80066be:	bf00      	nop
 80066c0:	bf00      	nop
 80066c2:	e7fd      	b.n	80066c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d103      	bne.n	80066d2 <xQueueGenericSendFromISR+0x3e>
 80066ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d101      	bne.n	80066d6 <xQueueGenericSendFromISR+0x42>
 80066d2:	2301      	movs	r3, #1
 80066d4:	e000      	b.n	80066d8 <xQueueGenericSendFromISR+0x44>
 80066d6:	2300      	movs	r3, #0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d10b      	bne.n	80066f4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80066dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e0:	f383 8811 	msr	BASEPRI, r3
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80066ee:	bf00      	nop
 80066f0:	bf00      	nop
 80066f2:	e7fd      	b.n	80066f0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d103      	bne.n	8006702 <xQueueGenericSendFromISR+0x6e>
 80066fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d101      	bne.n	8006706 <xQueueGenericSendFromISR+0x72>
 8006702:	2301      	movs	r3, #1
 8006704:	e000      	b.n	8006708 <xQueueGenericSendFromISR+0x74>
 8006706:	2300      	movs	r3, #0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10b      	bne.n	8006724 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800670c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	623b      	str	r3, [r7, #32]
}
 800671e:	bf00      	nop
 8006720:	bf00      	nop
 8006722:	e7fd      	b.n	8006720 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006724:	f7ff fe72 	bl	800640c <vPortValidateInterruptPriority>
	__asm volatile
 8006728:	f3ef 8211 	mrs	r2, BASEPRI
 800672c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006730:	f383 8811 	msr	BASEPRI, r3
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	f3bf 8f4f 	dsb	sy
 800673c:	61fa      	str	r2, [r7, #28]
 800673e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006740:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006742:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006746:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800674a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800674c:	429a      	cmp	r2, r3
 800674e:	d302      	bcc.n	8006756 <xQueueGenericSendFromISR+0xc2>
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	2b02      	cmp	r3, #2
 8006754:	d12f      	bne.n	80067b6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006758:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800675c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006764:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	68b9      	ldr	r1, [r7, #8]
 800676a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800676c:	f000 f830 	bl	80067d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006770:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006778:	d112      	bne.n	80067a0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800677a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800677c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800677e:	2b00      	cmp	r3, #0
 8006780:	d016      	beq.n	80067b0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006784:	3324      	adds	r3, #36	@ 0x24
 8006786:	4618      	mov	r0, r3
 8006788:	f000 fae0 	bl	8006d4c <xTaskRemoveFromEventList>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00e      	beq.n	80067b0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00b      	beq.n	80067b0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	601a      	str	r2, [r3, #0]
 800679e:	e007      	b.n	80067b0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80067a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80067a4:	3301      	adds	r3, #1
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	b25a      	sxtb	r2, r3
 80067aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80067b0:	2301      	movs	r3, #1
 80067b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80067b4:	e001      	b.n	80067ba <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80067b6:	2300      	movs	r3, #0
 80067b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067bc:	617b      	str	r3, [r7, #20]
	__asm volatile
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f383 8811 	msr	BASEPRI, r3
}
 80067c4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80067c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3740      	adds	r7, #64	@ 0x40
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80067dc:	2300      	movs	r3, #0
 80067de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10d      	bne.n	800680a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d14d      	bne.n	8006892 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f000 fbce 	bl	8006f9c <xTaskPriorityDisinherit>
 8006800:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	609a      	str	r2, [r3, #8]
 8006808:	e043      	b.n	8006892 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d119      	bne.n	8006844 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6858      	ldr	r0, [r3, #4]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006818:	461a      	mov	r2, r3
 800681a:	68b9      	ldr	r1, [r7, #8]
 800681c:	f000 ff10 	bl	8007640 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006828:	441a      	add	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	429a      	cmp	r2, r3
 8006838:	d32b      	bcc.n	8006892 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	605a      	str	r2, [r3, #4]
 8006842:	e026      	b.n	8006892 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	68d8      	ldr	r0, [r3, #12]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800684c:	461a      	mov	r2, r3
 800684e:	68b9      	ldr	r1, [r7, #8]
 8006850:	f000 fef6 	bl	8007640 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	68da      	ldr	r2, [r3, #12]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800685c:	425b      	negs	r3, r3
 800685e:	441a      	add	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	68da      	ldr	r2, [r3, #12]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	429a      	cmp	r2, r3
 800686e:	d207      	bcs.n	8006880 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	689a      	ldr	r2, [r3, #8]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006878:	425b      	negs	r3, r3
 800687a:	441a      	add	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2b02      	cmp	r3, #2
 8006884:	d105      	bne.n	8006892 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d002      	beq.n	8006892 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	3b01      	subs	r3, #1
 8006890:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	1c5a      	adds	r2, r3, #1
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800689a:	697b      	ldr	r3, [r7, #20]
}
 800689c:	4618      	mov	r0, r3
 800689e:	3718      	adds	r7, #24
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80068ac:	f7ff fcfc 	bl	80062a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068b8:	e011      	b.n	80068de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d012      	beq.n	80068e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	3324      	adds	r3, #36	@ 0x24
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 fa40 	bl	8006d4c <xTaskRemoveFromEventList>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d001      	beq.n	80068d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80068d2:	f000 fb19 	bl	8006f08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80068d6:	7bfb      	ldrb	r3, [r7, #15]
 80068d8:	3b01      	subs	r3, #1
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	dce9      	bgt.n	80068ba <prvUnlockQueue+0x16>
 80068e6:	e000      	b.n	80068ea <prvUnlockQueue+0x46>
					break;
 80068e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	22ff      	movs	r2, #255	@ 0xff
 80068ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80068f2:	f7ff fd0b 	bl	800630c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80068f6:	f7ff fcd7 	bl	80062a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006900:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006902:	e011      	b.n	8006928 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d012      	beq.n	8006932 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	3310      	adds	r3, #16
 8006910:	4618      	mov	r0, r3
 8006912:	f000 fa1b 	bl	8006d4c <xTaskRemoveFromEventList>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d001      	beq.n	8006920 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800691c:	f000 faf4 	bl	8006f08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006920:	7bbb      	ldrb	r3, [r7, #14]
 8006922:	3b01      	subs	r3, #1
 8006924:	b2db      	uxtb	r3, r3
 8006926:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006928:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800692c:	2b00      	cmp	r3, #0
 800692e:	dce9      	bgt.n	8006904 <prvUnlockQueue+0x60>
 8006930:	e000      	b.n	8006934 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006932:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	22ff      	movs	r2, #255	@ 0xff
 8006938:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800693c:	f7ff fce6 	bl	800630c <vPortExitCritical>
}
 8006940:	bf00      	nop
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006950:	f7ff fcaa 	bl	80062a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800695c:	429a      	cmp	r2, r3
 800695e:	d102      	bne.n	8006966 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006960:	2301      	movs	r3, #1
 8006962:	60fb      	str	r3, [r7, #12]
 8006964:	e001      	b.n	800696a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006966:	2300      	movs	r3, #0
 8006968:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800696a:	f7ff fccf 	bl	800630c <vPortExitCritical>

	return xReturn;
 800696e:	68fb      	ldr	r3, [r7, #12]
}
 8006970:	4618      	mov	r0, r3
 8006972:	3710      	adds	r7, #16
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006978:	b480      	push	{r7}
 800697a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800697c:	4b04      	ldr	r3, [pc, #16]	@ (8006990 <vTaskSuspendAll+0x18>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	3301      	adds	r3, #1
 8006982:	4a03      	ldr	r2, [pc, #12]	@ (8006990 <vTaskSuspendAll+0x18>)
 8006984:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006986:	bf00      	nop
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	20000768 	.word	0x20000768

08006994 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800699a:	2300      	movs	r3, #0
 800699c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800699e:	2300      	movs	r3, #0
 80069a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80069a2:	4b42      	ldr	r3, [pc, #264]	@ (8006aac <xTaskResumeAll+0x118>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10b      	bne.n	80069c2 <xTaskResumeAll+0x2e>
	__asm volatile
 80069aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ae:	f383 8811 	msr	BASEPRI, r3
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	f3bf 8f4f 	dsb	sy
 80069ba:	603b      	str	r3, [r7, #0]
}
 80069bc:	bf00      	nop
 80069be:	bf00      	nop
 80069c0:	e7fd      	b.n	80069be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80069c2:	f7ff fc71 	bl	80062a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80069c6:	4b39      	ldr	r3, [pc, #228]	@ (8006aac <xTaskResumeAll+0x118>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	3b01      	subs	r3, #1
 80069cc:	4a37      	ldr	r2, [pc, #220]	@ (8006aac <xTaskResumeAll+0x118>)
 80069ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069d0:	4b36      	ldr	r3, [pc, #216]	@ (8006aac <xTaskResumeAll+0x118>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d162      	bne.n	8006a9e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80069d8:	4b35      	ldr	r3, [pc, #212]	@ (8006ab0 <xTaskResumeAll+0x11c>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d05e      	beq.n	8006a9e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069e0:	e02f      	b.n	8006a42 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069e2:	4b34      	ldr	r3, [pc, #208]	@ (8006ab4 <xTaskResumeAll+0x120>)
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	3318      	adds	r3, #24
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7ff fc1b 	bl	800622a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	3304      	adds	r3, #4
 80069f8:	4618      	mov	r0, r3
 80069fa:	f7ff fc16 	bl	800622a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a02:	4b2d      	ldr	r3, [pc, #180]	@ (8006ab8 <xTaskResumeAll+0x124>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d903      	bls.n	8006a12 <xTaskResumeAll+0x7e>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a0e:	4a2a      	ldr	r2, [pc, #168]	@ (8006ab8 <xTaskResumeAll+0x124>)
 8006a10:	6013      	str	r3, [r2, #0]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a16:	4613      	mov	r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4a27      	ldr	r2, [pc, #156]	@ (8006abc <xTaskResumeAll+0x128>)
 8006a20:	441a      	add	r2, r3
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	3304      	adds	r3, #4
 8006a26:	4619      	mov	r1, r3
 8006a28:	4610      	mov	r0, r2
 8006a2a:	f7ff fba1 	bl	8006170 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a32:	4b23      	ldr	r3, [pc, #140]	@ (8006ac0 <xTaskResumeAll+0x12c>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d302      	bcc.n	8006a42 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006a3c:	4b21      	ldr	r3, [pc, #132]	@ (8006ac4 <xTaskResumeAll+0x130>)
 8006a3e:	2201      	movs	r2, #1
 8006a40:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a42:	4b1c      	ldr	r3, [pc, #112]	@ (8006ab4 <xTaskResumeAll+0x120>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1cb      	bne.n	80069e2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d001      	beq.n	8006a54 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006a50:	f000 fa66 	bl	8006f20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006a54:	4b1c      	ldr	r3, [pc, #112]	@ (8006ac8 <xTaskResumeAll+0x134>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d010      	beq.n	8006a82 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a60:	f000 f836 	bl	8006ad0 <xTaskIncrementTick>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d002      	beq.n	8006a70 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006a6a:	4b16      	ldr	r3, [pc, #88]	@ (8006ac4 <xTaskResumeAll+0x130>)
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	3b01      	subs	r3, #1
 8006a74:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1f1      	bne.n	8006a60 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006a7c:	4b12      	ldr	r3, [pc, #72]	@ (8006ac8 <xTaskResumeAll+0x134>)
 8006a7e:	2200      	movs	r2, #0
 8006a80:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a82:	4b10      	ldr	r3, [pc, #64]	@ (8006ac4 <xTaskResumeAll+0x130>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d009      	beq.n	8006a9e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8006acc <xTaskResumeAll+0x138>)
 8006a90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a94:	601a      	str	r2, [r3, #0]
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a9e:	f7ff fc35 	bl	800630c <vPortExitCritical>

	return xAlreadyYielded;
 8006aa2:	68bb      	ldr	r3, [r7, #8]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	20000768 	.word	0x20000768
 8006ab0:	20000748 	.word	0x20000748
 8006ab4:	20000720 	.word	0x20000720
 8006ab8:	20000750 	.word	0x20000750
 8006abc:	200002b8 	.word	0x200002b8
 8006ac0:	200002b4 	.word	0x200002b4
 8006ac4:	2000075c 	.word	0x2000075c
 8006ac8:	20000758 	.word	0x20000758
 8006acc:	e000ed04 	.word	0xe000ed04

08006ad0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ada:	4b4f      	ldr	r3, [pc, #316]	@ (8006c18 <xTaskIncrementTick+0x148>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f040 8090 	bne.w	8006c04 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ae4:	4b4d      	ldr	r3, [pc, #308]	@ (8006c1c <xTaskIncrementTick+0x14c>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006aec:	4a4b      	ldr	r2, [pc, #300]	@ (8006c1c <xTaskIncrementTick+0x14c>)
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d121      	bne.n	8006b3c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006af8:	4b49      	ldr	r3, [pc, #292]	@ (8006c20 <xTaskIncrementTick+0x150>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00b      	beq.n	8006b1a <xTaskIncrementTick+0x4a>
	__asm volatile
 8006b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b06:	f383 8811 	msr	BASEPRI, r3
 8006b0a:	f3bf 8f6f 	isb	sy
 8006b0e:	f3bf 8f4f 	dsb	sy
 8006b12:	603b      	str	r3, [r7, #0]
}
 8006b14:	bf00      	nop
 8006b16:	bf00      	nop
 8006b18:	e7fd      	b.n	8006b16 <xTaskIncrementTick+0x46>
 8006b1a:	4b41      	ldr	r3, [pc, #260]	@ (8006c20 <xTaskIncrementTick+0x150>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	60fb      	str	r3, [r7, #12]
 8006b20:	4b40      	ldr	r3, [pc, #256]	@ (8006c24 <xTaskIncrementTick+0x154>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a3e      	ldr	r2, [pc, #248]	@ (8006c20 <xTaskIncrementTick+0x150>)
 8006b26:	6013      	str	r3, [r2, #0]
 8006b28:	4a3e      	ldr	r2, [pc, #248]	@ (8006c24 <xTaskIncrementTick+0x154>)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6013      	str	r3, [r2, #0]
 8006b2e:	4b3e      	ldr	r3, [pc, #248]	@ (8006c28 <xTaskIncrementTick+0x158>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	3301      	adds	r3, #1
 8006b34:	4a3c      	ldr	r2, [pc, #240]	@ (8006c28 <xTaskIncrementTick+0x158>)
 8006b36:	6013      	str	r3, [r2, #0]
 8006b38:	f000 f9f2 	bl	8006f20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b3c:	4b3b      	ldr	r3, [pc, #236]	@ (8006c2c <xTaskIncrementTick+0x15c>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d349      	bcc.n	8006bda <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b46:	4b36      	ldr	r3, [pc, #216]	@ (8006c20 <xTaskIncrementTick+0x150>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d104      	bne.n	8006b5a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b50:	4b36      	ldr	r3, [pc, #216]	@ (8006c2c <xTaskIncrementTick+0x15c>)
 8006b52:	f04f 32ff 	mov.w	r2, #4294967295
 8006b56:	601a      	str	r2, [r3, #0]
					break;
 8006b58:	e03f      	b.n	8006bda <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b5a:	4b31      	ldr	r3, [pc, #196]	@ (8006c20 <xTaskIncrementTick+0x150>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d203      	bcs.n	8006b7a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b72:	4a2e      	ldr	r2, [pc, #184]	@ (8006c2c <xTaskIncrementTick+0x15c>)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006b78:	e02f      	b.n	8006bda <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	3304      	adds	r3, #4
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7ff fb53 	bl	800622a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d004      	beq.n	8006b96 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	3318      	adds	r3, #24
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7ff fb4a 	bl	800622a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b9a:	4b25      	ldr	r3, [pc, #148]	@ (8006c30 <xTaskIncrementTick+0x160>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d903      	bls.n	8006baa <xTaskIncrementTick+0xda>
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ba6:	4a22      	ldr	r2, [pc, #136]	@ (8006c30 <xTaskIncrementTick+0x160>)
 8006ba8:	6013      	str	r3, [r2, #0]
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bae:	4613      	mov	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4a1f      	ldr	r2, [pc, #124]	@ (8006c34 <xTaskIncrementTick+0x164>)
 8006bb8:	441a      	add	r2, r3
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	3304      	adds	r3, #4
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	4610      	mov	r0, r2
 8006bc2:	f7ff fad5 	bl	8006170 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bca:	4b1b      	ldr	r3, [pc, #108]	@ (8006c38 <xTaskIncrementTick+0x168>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d3b8      	bcc.n	8006b46 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bd8:	e7b5      	b.n	8006b46 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006bda:	4b17      	ldr	r3, [pc, #92]	@ (8006c38 <xTaskIncrementTick+0x168>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006be0:	4914      	ldr	r1, [pc, #80]	@ (8006c34 <xTaskIncrementTick+0x164>)
 8006be2:	4613      	mov	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	440b      	add	r3, r1
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d901      	bls.n	8006bf6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006bf6:	4b11      	ldr	r3, [pc, #68]	@ (8006c3c <xTaskIncrementTick+0x16c>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d007      	beq.n	8006c0e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	617b      	str	r3, [r7, #20]
 8006c02:	e004      	b.n	8006c0e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006c04:	4b0e      	ldr	r3, [pc, #56]	@ (8006c40 <xTaskIncrementTick+0x170>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	4a0d      	ldr	r2, [pc, #52]	@ (8006c40 <xTaskIncrementTick+0x170>)
 8006c0c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006c0e:	697b      	ldr	r3, [r7, #20]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3718      	adds	r7, #24
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	20000768 	.word	0x20000768
 8006c1c:	2000074c 	.word	0x2000074c
 8006c20:	20000718 	.word	0x20000718
 8006c24:	2000071c 	.word	0x2000071c
 8006c28:	20000760 	.word	0x20000760
 8006c2c:	20000764 	.word	0x20000764
 8006c30:	20000750 	.word	0x20000750
 8006c34:	200002b8 	.word	0x200002b8
 8006c38:	200002b4 	.word	0x200002b4
 8006c3c:	2000075c 	.word	0x2000075c
 8006c40:	20000758 	.word	0x20000758

08006c44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c4a:	4b28      	ldr	r3, [pc, #160]	@ (8006cec <vTaskSwitchContext+0xa8>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d003      	beq.n	8006c5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c52:	4b27      	ldr	r3, [pc, #156]	@ (8006cf0 <vTaskSwitchContext+0xac>)
 8006c54:	2201      	movs	r2, #1
 8006c56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c58:	e042      	b.n	8006ce0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006c5a:	4b25      	ldr	r3, [pc, #148]	@ (8006cf0 <vTaskSwitchContext+0xac>)
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c60:	4b24      	ldr	r3, [pc, #144]	@ (8006cf4 <vTaskSwitchContext+0xb0>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	e011      	b.n	8006c8c <vTaskSwitchContext+0x48>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10b      	bne.n	8006c86 <vTaskSwitchContext+0x42>
	__asm volatile
 8006c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c72:	f383 8811 	msr	BASEPRI, r3
 8006c76:	f3bf 8f6f 	isb	sy
 8006c7a:	f3bf 8f4f 	dsb	sy
 8006c7e:	607b      	str	r3, [r7, #4]
}
 8006c80:	bf00      	nop
 8006c82:	bf00      	nop
 8006c84:	e7fd      	b.n	8006c82 <vTaskSwitchContext+0x3e>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	60fb      	str	r3, [r7, #12]
 8006c8c:	491a      	ldr	r1, [pc, #104]	@ (8006cf8 <vTaskSwitchContext+0xb4>)
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	4613      	mov	r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4413      	add	r3, r2
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	440b      	add	r3, r1
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d0e3      	beq.n	8006c68 <vTaskSwitchContext+0x24>
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4a13      	ldr	r2, [pc, #76]	@ (8006cf8 <vTaskSwitchContext+0xb4>)
 8006cac:	4413      	add	r3, r2
 8006cae:	60bb      	str	r3, [r7, #8]
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	605a      	str	r2, [r3, #4]
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	685a      	ldr	r2, [r3, #4]
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	3308      	adds	r3, #8
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d104      	bne.n	8006cd0 <vTaskSwitchContext+0x8c>
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	605a      	str	r2, [r3, #4]
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	4a09      	ldr	r2, [pc, #36]	@ (8006cfc <vTaskSwitchContext+0xb8>)
 8006cd8:	6013      	str	r3, [r2, #0]
 8006cda:	4a06      	ldr	r2, [pc, #24]	@ (8006cf4 <vTaskSwitchContext+0xb0>)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6013      	str	r3, [r2, #0]
}
 8006ce0:	bf00      	nop
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr
 8006cec:	20000768 	.word	0x20000768
 8006cf0:	2000075c 	.word	0x2000075c
 8006cf4:	20000750 	.word	0x20000750
 8006cf8:	200002b8 	.word	0x200002b8
 8006cfc:	200002b4 	.word	0x200002b4

08006d00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10b      	bne.n	8006d28 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	60fb      	str	r3, [r7, #12]
}
 8006d22:	bf00      	nop
 8006d24:	bf00      	nop
 8006d26:	e7fd      	b.n	8006d24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d28:	4b07      	ldr	r3, [pc, #28]	@ (8006d48 <vTaskPlaceOnEventList+0x48>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	3318      	adds	r3, #24
 8006d2e:	4619      	mov	r1, r3
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f7ff fa41 	bl	80061b8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d36:	2101      	movs	r1, #1
 8006d38:	6838      	ldr	r0, [r7, #0]
 8006d3a:	f000 f99f 	bl	800707c <prvAddCurrentTaskToDelayedList>
}
 8006d3e:	bf00      	nop
 8006d40:	3710      	adds	r7, #16
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	200002b4 	.word	0x200002b4

08006d4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10b      	bne.n	8006d7a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	60fb      	str	r3, [r7, #12]
}
 8006d74:	bf00      	nop
 8006d76:	bf00      	nop
 8006d78:	e7fd      	b.n	8006d76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	3318      	adds	r3, #24
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7ff fa53 	bl	800622a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d84:	4b1d      	ldr	r3, [pc, #116]	@ (8006dfc <xTaskRemoveFromEventList+0xb0>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d11d      	bne.n	8006dc8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	3304      	adds	r3, #4
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7ff fa4a 	bl	800622a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d9a:	4b19      	ldr	r3, [pc, #100]	@ (8006e00 <xTaskRemoveFromEventList+0xb4>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d903      	bls.n	8006daa <xTaskRemoveFromEventList+0x5e>
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da6:	4a16      	ldr	r2, [pc, #88]	@ (8006e00 <xTaskRemoveFromEventList+0xb4>)
 8006da8:	6013      	str	r3, [r2, #0]
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dae:	4613      	mov	r3, r2
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	4413      	add	r3, r2
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4a13      	ldr	r2, [pc, #76]	@ (8006e04 <xTaskRemoveFromEventList+0xb8>)
 8006db8:	441a      	add	r2, r3
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	3304      	adds	r3, #4
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	4610      	mov	r0, r2
 8006dc2:	f7ff f9d5 	bl	8006170 <vListInsertEnd>
 8006dc6:	e005      	b.n	8006dd4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	3318      	adds	r3, #24
 8006dcc:	4619      	mov	r1, r3
 8006dce:	480e      	ldr	r0, [pc, #56]	@ (8006e08 <xTaskRemoveFromEventList+0xbc>)
 8006dd0:	f7ff f9ce 	bl	8006170 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8006e0c <xTaskRemoveFromEventList+0xc0>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d905      	bls.n	8006dee <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006de2:	2301      	movs	r3, #1
 8006de4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006de6:	4b0a      	ldr	r3, [pc, #40]	@ (8006e10 <xTaskRemoveFromEventList+0xc4>)
 8006de8:	2201      	movs	r2, #1
 8006dea:	601a      	str	r2, [r3, #0]
 8006dec:	e001      	b.n	8006df2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006dee:	2300      	movs	r3, #0
 8006df0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006df2:	697b      	ldr	r3, [r7, #20]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3718      	adds	r7, #24
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	20000768 	.word	0x20000768
 8006e00:	20000750 	.word	0x20000750
 8006e04:	200002b8 	.word	0x200002b8
 8006e08:	20000720 	.word	0x20000720
 8006e0c:	200002b4 	.word	0x200002b4
 8006e10:	2000075c 	.word	0x2000075c

08006e14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006e1c:	4b06      	ldr	r3, [pc, #24]	@ (8006e38 <vTaskInternalSetTimeOutState+0x24>)
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006e24:	4b05      	ldr	r3, [pc, #20]	@ (8006e3c <vTaskInternalSetTimeOutState+0x28>)
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	605a      	str	r2, [r3, #4]
}
 8006e2c:	bf00      	nop
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr
 8006e38:	20000760 	.word	0x20000760
 8006e3c:	2000074c 	.word	0x2000074c

08006e40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b088      	sub	sp, #32
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d10b      	bne.n	8006e68 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e54:	f383 8811 	msr	BASEPRI, r3
 8006e58:	f3bf 8f6f 	isb	sy
 8006e5c:	f3bf 8f4f 	dsb	sy
 8006e60:	613b      	str	r3, [r7, #16]
}
 8006e62:	bf00      	nop
 8006e64:	bf00      	nop
 8006e66:	e7fd      	b.n	8006e64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10b      	bne.n	8006e86 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e72:	f383 8811 	msr	BASEPRI, r3
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	60fb      	str	r3, [r7, #12]
}
 8006e80:	bf00      	nop
 8006e82:	bf00      	nop
 8006e84:	e7fd      	b.n	8006e82 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006e86:	f7ff fa0f 	bl	80062a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8006f00 <xTaskCheckForTimeOut+0xc0>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	69ba      	ldr	r2, [r7, #24]
 8006e96:	1ad3      	subs	r3, r2, r3
 8006e98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ea2:	d102      	bne.n	8006eaa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	61fb      	str	r3, [r7, #28]
 8006ea8:	e023      	b.n	8006ef2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	4b15      	ldr	r3, [pc, #84]	@ (8006f04 <xTaskCheckForTimeOut+0xc4>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d007      	beq.n	8006ec6 <xTaskCheckForTimeOut+0x86>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	69ba      	ldr	r2, [r7, #24]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d302      	bcc.n	8006ec6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	61fb      	str	r3, [r7, #28]
 8006ec4:	e015      	b.n	8006ef2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	697a      	ldr	r2, [r7, #20]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d20b      	bcs.n	8006ee8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	1ad2      	subs	r2, r2, r3
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f7ff ff99 	bl	8006e14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	61fb      	str	r3, [r7, #28]
 8006ee6:	e004      	b.n	8006ef2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2200      	movs	r2, #0
 8006eec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006ef2:	f7ff fa0b 	bl	800630c <vPortExitCritical>

	return xReturn;
 8006ef6:	69fb      	ldr	r3, [r7, #28]
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3720      	adds	r7, #32
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	2000074c 	.word	0x2000074c
 8006f04:	20000760 	.word	0x20000760

08006f08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006f08:	b480      	push	{r7}
 8006f0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006f0c:	4b03      	ldr	r3, [pc, #12]	@ (8006f1c <vTaskMissedYield+0x14>)
 8006f0e:	2201      	movs	r2, #1
 8006f10:	601a      	str	r2, [r3, #0]
}
 8006f12:	bf00      	nop
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr
 8006f1c:	2000075c 	.word	0x2000075c

08006f20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f26:	4b0c      	ldr	r3, [pc, #48]	@ (8006f58 <prvResetNextTaskUnblockTime+0x38>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d104      	bne.n	8006f3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f30:	4b0a      	ldr	r3, [pc, #40]	@ (8006f5c <prvResetNextTaskUnblockTime+0x3c>)
 8006f32:	f04f 32ff 	mov.w	r2, #4294967295
 8006f36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006f38:	e008      	b.n	8006f4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f3a:	4b07      	ldr	r3, [pc, #28]	@ (8006f58 <prvResetNextTaskUnblockTime+0x38>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	4a04      	ldr	r2, [pc, #16]	@ (8006f5c <prvResetNextTaskUnblockTime+0x3c>)
 8006f4a:	6013      	str	r3, [r2, #0]
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr
 8006f58:	20000718 	.word	0x20000718
 8006f5c:	20000764 	.word	0x20000764

08006f60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006f66:	4b0b      	ldr	r3, [pc, #44]	@ (8006f94 <xTaskGetSchedulerState+0x34>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d102      	bne.n	8006f74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	607b      	str	r3, [r7, #4]
 8006f72:	e008      	b.n	8006f86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f74:	4b08      	ldr	r3, [pc, #32]	@ (8006f98 <xTaskGetSchedulerState+0x38>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d102      	bne.n	8006f82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	607b      	str	r3, [r7, #4]
 8006f80:	e001      	b.n	8006f86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006f82:	2300      	movs	r3, #0
 8006f84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006f86:	687b      	ldr	r3, [r7, #4]
	}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr
 8006f94:	20000754 	.word	0x20000754
 8006f98:	20000768 	.word	0x20000768

08006f9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d058      	beq.n	8007064 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006fb2:	4b2f      	ldr	r3, [pc, #188]	@ (8007070 <xTaskPriorityDisinherit+0xd4>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d00b      	beq.n	8006fd4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc0:	f383 8811 	msr	BASEPRI, r3
 8006fc4:	f3bf 8f6f 	isb	sy
 8006fc8:	f3bf 8f4f 	dsb	sy
 8006fcc:	60fb      	str	r3, [r7, #12]
}
 8006fce:	bf00      	nop
 8006fd0:	bf00      	nop
 8006fd2:	e7fd      	b.n	8006fd0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d10b      	bne.n	8006ff4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe0:	f383 8811 	msr	BASEPRI, r3
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	60bb      	str	r3, [r7, #8]
}
 8006fee:	bf00      	nop
 8006ff0:	bf00      	nop
 8006ff2:	e7fd      	b.n	8006ff0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ff8:	1e5a      	subs	r2, r3, #1
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007006:	429a      	cmp	r2, r3
 8007008:	d02c      	beq.n	8007064 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800700e:	2b00      	cmp	r3, #0
 8007010:	d128      	bne.n	8007064 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	3304      	adds	r3, #4
 8007016:	4618      	mov	r0, r3
 8007018:	f7ff f907 	bl	800622a <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007028:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007034:	4b0f      	ldr	r3, [pc, #60]	@ (8007074 <xTaskPriorityDisinherit+0xd8>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	429a      	cmp	r2, r3
 800703a:	d903      	bls.n	8007044 <xTaskPriorityDisinherit+0xa8>
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007040:	4a0c      	ldr	r2, [pc, #48]	@ (8007074 <xTaskPriorityDisinherit+0xd8>)
 8007042:	6013      	str	r3, [r2, #0]
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007048:	4613      	mov	r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	4413      	add	r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4a09      	ldr	r2, [pc, #36]	@ (8007078 <xTaskPriorityDisinherit+0xdc>)
 8007052:	441a      	add	r2, r3
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	3304      	adds	r3, #4
 8007058:	4619      	mov	r1, r3
 800705a:	4610      	mov	r0, r2
 800705c:	f7ff f888 	bl	8006170 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007060:	2301      	movs	r3, #1
 8007062:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007064:	697b      	ldr	r3, [r7, #20]
	}
 8007066:	4618      	mov	r0, r3
 8007068:	3718      	adds	r7, #24
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	200002b4 	.word	0x200002b4
 8007074:	20000750 	.word	0x20000750
 8007078:	200002b8 	.word	0x200002b8

0800707c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007086:	4b21      	ldr	r3, [pc, #132]	@ (800710c <prvAddCurrentTaskToDelayedList+0x90>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800708c:	4b20      	ldr	r3, [pc, #128]	@ (8007110 <prvAddCurrentTaskToDelayedList+0x94>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3304      	adds	r3, #4
 8007092:	4618      	mov	r0, r3
 8007094:	f7ff f8c9 	bl	800622a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800709e:	d10a      	bne.n	80070b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d007      	beq.n	80070b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070a6:	4b1a      	ldr	r3, [pc, #104]	@ (8007110 <prvAddCurrentTaskToDelayedList+0x94>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	3304      	adds	r3, #4
 80070ac:	4619      	mov	r1, r3
 80070ae:	4819      	ldr	r0, [pc, #100]	@ (8007114 <prvAddCurrentTaskToDelayedList+0x98>)
 80070b0:	f7ff f85e 	bl	8006170 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80070b4:	e026      	b.n	8007104 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4413      	add	r3, r2
 80070bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80070be:	4b14      	ldr	r3, [pc, #80]	@ (8007110 <prvAddCurrentTaskToDelayedList+0x94>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80070c6:	68ba      	ldr	r2, [r7, #8]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d209      	bcs.n	80070e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070ce:	4b12      	ldr	r3, [pc, #72]	@ (8007118 <prvAddCurrentTaskToDelayedList+0x9c>)
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	4b0f      	ldr	r3, [pc, #60]	@ (8007110 <prvAddCurrentTaskToDelayedList+0x94>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	3304      	adds	r3, #4
 80070d8:	4619      	mov	r1, r3
 80070da:	4610      	mov	r0, r2
 80070dc:	f7ff f86c 	bl	80061b8 <vListInsert>
}
 80070e0:	e010      	b.n	8007104 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070e2:	4b0e      	ldr	r3, [pc, #56]	@ (800711c <prvAddCurrentTaskToDelayedList+0xa0>)
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007110 <prvAddCurrentTaskToDelayedList+0x94>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	3304      	adds	r3, #4
 80070ec:	4619      	mov	r1, r3
 80070ee:	4610      	mov	r0, r2
 80070f0:	f7ff f862 	bl	80061b8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80070f4:	4b0a      	ldr	r3, [pc, #40]	@ (8007120 <prvAddCurrentTaskToDelayedList+0xa4>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68ba      	ldr	r2, [r7, #8]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d202      	bcs.n	8007104 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80070fe:	4a08      	ldr	r2, [pc, #32]	@ (8007120 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	6013      	str	r3, [r2, #0]
}
 8007104:	bf00      	nop
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	2000074c 	.word	0x2000074c
 8007110:	200002b4 	.word	0x200002b4
 8007114:	20000734 	.word	0x20000734
 8007118:	2000071c 	.word	0x2000071c
 800711c:	20000718 	.word	0x20000718
 8007120:	20000764 	.word	0x20000764

08007124 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007132:	1c5a      	adds	r2, r3, #1
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f804 	bl	8007148 <USBH_HandleSof>
}
 8007140:	bf00      	nop
 8007142:	3708      	adds	r7, #8
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b0b      	cmp	r3, #11
 8007158:	d10a      	bne.n	8007170 <USBH_HandleSof+0x28>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007160:	2b00      	cmp	r3, #0
 8007162:	d005      	beq.n	8007170 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	4798      	blx	r3
  }
}
 8007170:	bf00      	nop
 8007172:	3708      	adds	r7, #8
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800719c:	2300      	movs	r3, #0
 800719e:	2200      	movs	r2, #0
 80071a0:	f7fe ff86 	bl	80060b0 <osMessageQueuePut>
#endif
#endif

  return;
 80071a4:	bf00      	nop
}
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80071bc:	bf00      	nop
}
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80071fc:	2300      	movs	r3, #0
 80071fe:	2200      	movs	r2, #0
 8007200:	f7fe ff56 	bl	80060b0 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b082      	sub	sp, #8
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2201      	movs	r2, #1
 800721a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f8ac 	bl	800738c <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	791b      	ldrb	r3, [r3, #4]
 8007238:	4619      	mov	r1, r3
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f830 	bl	80072a0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	795b      	ldrb	r3, [r3, #5]
 8007244:	4619      	mov	r1, r3
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f82a 	bl	80072a0 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007260:	2300      	movs	r3, #0
 8007262:	2200      	movs	r2, #0
 8007264:	f7fe ff24 	bl	80060b0 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3708      	adds	r7, #8
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b082      	sub	sp, #8
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800728e:	2300      	movs	r3, #0
 8007290:	2200      	movs	r2, #0
 8007292:	f7fe ff0d 	bl	80060b0 <osMessageQueuePut>
#endif

  return USBH_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3708      	adds	r7, #8
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	460b      	mov	r3, r1
 80072aa:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80072ac:	78fb      	ldrb	r3, [r7, #3]
 80072ae:	2b0f      	cmp	r3, #15
 80072b0:	d80d      	bhi.n	80072ce <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80072b2:	78fb      	ldrb	r3, [r7, #3]
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	33e0      	adds	r3, #224	@ 0xe0
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	4413      	add	r3, r2
 80072bc:	685a      	ldr	r2, [r3, #4]
 80072be:	78fb      	ldrb	r3, [r7, #3]
 80072c0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80072c4:	6879      	ldr	r1, [r7, #4]
 80072c6:	33e0      	adds	r3, #224	@ 0xe0
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	440b      	add	r3, r1
 80072cc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7ff ff1a 	bl	8007124 <USBH_LL_IncTimer>
}
 80072f0:	bf00      	nop
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007306:	4618      	mov	r0, r3
 8007308:	f7ff ff5e 	bl	80071c8 <USBH_LL_Connect>
}
 800730c:	bf00      	nop
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007322:	4618      	mov	r0, r3
 8007324:	f7ff ff73 	bl	800720e <USBH_LL_Disconnect>
}
 8007328:	bf00      	nop
 800732a:	3708      	adds	r7, #8
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	460b      	mov	r3, r1
 800733a:	70fb      	strb	r3, [r7, #3]
 800733c:	4613      	mov	r3, r2
 800733e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007346:	4618      	mov	r0, r3
 8007348:	f7ff ff93 	bl	8007272 <USBH_LL_NotifyURBChange>
#endif
}
 800734c:	bf00      	nop
 800734e:	3708      	adds	r7, #8
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007362:	4618      	mov	r0, r3
 8007364:	f7ff ff08 	bl	8007178 <USBH_LL_PortEnabled>
}
 8007368:	bf00      	nop
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800737e:	4618      	mov	r0, r3
 8007380:	f7ff ff14 	bl	80071ac <USBH_LL_PortDisabled>
}
 8007384:	bf00      	nop
 8007386:	3708      	adds	r7, #8
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007394:	2300      	movs	r3, #0
 8007396:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007398:	2300      	movs	r3, #0
 800739a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7fa ffe3 	bl	800236e <HAL_HCD_Stop>
 80073a8:	4603      	mov	r3, r0
 80073aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80073ac:	7bfb      	ldrb	r3, [r7, #15]
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 f808 	bl	80073c4 <USBH_Get_USB_Status>
 80073b4:	4603      	mov	r3, r0
 80073b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
	...

080073c4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	4603      	mov	r3, r0
 80073cc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80073ce:	2300      	movs	r3, #0
 80073d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80073d2:	79fb      	ldrb	r3, [r7, #7]
 80073d4:	2b03      	cmp	r3, #3
 80073d6:	d817      	bhi.n	8007408 <USBH_Get_USB_Status+0x44>
 80073d8:	a201      	add	r2, pc, #4	@ (adr r2, 80073e0 <USBH_Get_USB_Status+0x1c>)
 80073da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073de:	bf00      	nop
 80073e0:	080073f1 	.word	0x080073f1
 80073e4:	080073f7 	.word	0x080073f7
 80073e8:	080073fd 	.word	0x080073fd
 80073ec:	08007403 	.word	0x08007403
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	73fb      	strb	r3, [r7, #15]
    break;
 80073f4:	e00b      	b.n	800740e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80073f6:	2302      	movs	r3, #2
 80073f8:	73fb      	strb	r3, [r7, #15]
    break;
 80073fa:	e008      	b.n	800740e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80073fc:	2301      	movs	r3, #1
 80073fe:	73fb      	strb	r3, [r7, #15]
    break;
 8007400:	e005      	b.n	800740e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007402:	2302      	movs	r3, #2
 8007404:	73fb      	strb	r3, [r7, #15]
    break;
 8007406:	e002      	b.n	800740e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007408:	2302      	movs	r3, #2
 800740a:	73fb      	strb	r3, [r7, #15]
    break;
 800740c:	bf00      	nop
  }
  return usb_status;
 800740e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007410:	4618      	mov	r0, r3
 8007412:	3714      	adds	r7, #20
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <sbrk_aligned>:
 800741c:	b570      	push	{r4, r5, r6, lr}
 800741e:	4e0f      	ldr	r6, [pc, #60]	@ (800745c <sbrk_aligned+0x40>)
 8007420:	460c      	mov	r4, r1
 8007422:	6831      	ldr	r1, [r6, #0]
 8007424:	4605      	mov	r5, r0
 8007426:	b911      	cbnz	r1, 800742e <sbrk_aligned+0x12>
 8007428:	f000 f8ce 	bl	80075c8 <_sbrk_r>
 800742c:	6030      	str	r0, [r6, #0]
 800742e:	4621      	mov	r1, r4
 8007430:	4628      	mov	r0, r5
 8007432:	f000 f8c9 	bl	80075c8 <_sbrk_r>
 8007436:	1c43      	adds	r3, r0, #1
 8007438:	d103      	bne.n	8007442 <sbrk_aligned+0x26>
 800743a:	f04f 34ff 	mov.w	r4, #4294967295
 800743e:	4620      	mov	r0, r4
 8007440:	bd70      	pop	{r4, r5, r6, pc}
 8007442:	1cc4      	adds	r4, r0, #3
 8007444:	f024 0403 	bic.w	r4, r4, #3
 8007448:	42a0      	cmp	r0, r4
 800744a:	d0f8      	beq.n	800743e <sbrk_aligned+0x22>
 800744c:	1a21      	subs	r1, r4, r0
 800744e:	4628      	mov	r0, r5
 8007450:	f000 f8ba 	bl	80075c8 <_sbrk_r>
 8007454:	3001      	adds	r0, #1
 8007456:	d1f2      	bne.n	800743e <sbrk_aligned+0x22>
 8007458:	e7ef      	b.n	800743a <sbrk_aligned+0x1e>
 800745a:	bf00      	nop
 800745c:	20000b4c 	.word	0x20000b4c

08007460 <_malloc_r>:
 8007460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007464:	1ccd      	adds	r5, r1, #3
 8007466:	f025 0503 	bic.w	r5, r5, #3
 800746a:	3508      	adds	r5, #8
 800746c:	2d0c      	cmp	r5, #12
 800746e:	bf38      	it	cc
 8007470:	250c      	movcc	r5, #12
 8007472:	2d00      	cmp	r5, #0
 8007474:	4606      	mov	r6, r0
 8007476:	db01      	blt.n	800747c <_malloc_r+0x1c>
 8007478:	42a9      	cmp	r1, r5
 800747a:	d904      	bls.n	8007486 <_malloc_r+0x26>
 800747c:	230c      	movs	r3, #12
 800747e:	6033      	str	r3, [r6, #0]
 8007480:	2000      	movs	r0, #0
 8007482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007486:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800755c <_malloc_r+0xfc>
 800748a:	f000 f869 	bl	8007560 <__malloc_lock>
 800748e:	f8d8 3000 	ldr.w	r3, [r8]
 8007492:	461c      	mov	r4, r3
 8007494:	bb44      	cbnz	r4, 80074e8 <_malloc_r+0x88>
 8007496:	4629      	mov	r1, r5
 8007498:	4630      	mov	r0, r6
 800749a:	f7ff ffbf 	bl	800741c <sbrk_aligned>
 800749e:	1c43      	adds	r3, r0, #1
 80074a0:	4604      	mov	r4, r0
 80074a2:	d158      	bne.n	8007556 <_malloc_r+0xf6>
 80074a4:	f8d8 4000 	ldr.w	r4, [r8]
 80074a8:	4627      	mov	r7, r4
 80074aa:	2f00      	cmp	r7, #0
 80074ac:	d143      	bne.n	8007536 <_malloc_r+0xd6>
 80074ae:	2c00      	cmp	r4, #0
 80074b0:	d04b      	beq.n	800754a <_malloc_r+0xea>
 80074b2:	6823      	ldr	r3, [r4, #0]
 80074b4:	4639      	mov	r1, r7
 80074b6:	4630      	mov	r0, r6
 80074b8:	eb04 0903 	add.w	r9, r4, r3
 80074bc:	f000 f884 	bl	80075c8 <_sbrk_r>
 80074c0:	4581      	cmp	r9, r0
 80074c2:	d142      	bne.n	800754a <_malloc_r+0xea>
 80074c4:	6821      	ldr	r1, [r4, #0]
 80074c6:	1a6d      	subs	r5, r5, r1
 80074c8:	4629      	mov	r1, r5
 80074ca:	4630      	mov	r0, r6
 80074cc:	f7ff ffa6 	bl	800741c <sbrk_aligned>
 80074d0:	3001      	adds	r0, #1
 80074d2:	d03a      	beq.n	800754a <_malloc_r+0xea>
 80074d4:	6823      	ldr	r3, [r4, #0]
 80074d6:	442b      	add	r3, r5
 80074d8:	6023      	str	r3, [r4, #0]
 80074da:	f8d8 3000 	ldr.w	r3, [r8]
 80074de:	685a      	ldr	r2, [r3, #4]
 80074e0:	bb62      	cbnz	r2, 800753c <_malloc_r+0xdc>
 80074e2:	f8c8 7000 	str.w	r7, [r8]
 80074e6:	e00f      	b.n	8007508 <_malloc_r+0xa8>
 80074e8:	6822      	ldr	r2, [r4, #0]
 80074ea:	1b52      	subs	r2, r2, r5
 80074ec:	d420      	bmi.n	8007530 <_malloc_r+0xd0>
 80074ee:	2a0b      	cmp	r2, #11
 80074f0:	d917      	bls.n	8007522 <_malloc_r+0xc2>
 80074f2:	1961      	adds	r1, r4, r5
 80074f4:	42a3      	cmp	r3, r4
 80074f6:	6025      	str	r5, [r4, #0]
 80074f8:	bf18      	it	ne
 80074fa:	6059      	strne	r1, [r3, #4]
 80074fc:	6863      	ldr	r3, [r4, #4]
 80074fe:	bf08      	it	eq
 8007500:	f8c8 1000 	streq.w	r1, [r8]
 8007504:	5162      	str	r2, [r4, r5]
 8007506:	604b      	str	r3, [r1, #4]
 8007508:	4630      	mov	r0, r6
 800750a:	f000 f82f 	bl	800756c <__malloc_unlock>
 800750e:	f104 000b 	add.w	r0, r4, #11
 8007512:	1d23      	adds	r3, r4, #4
 8007514:	f020 0007 	bic.w	r0, r0, #7
 8007518:	1ac2      	subs	r2, r0, r3
 800751a:	bf1c      	itt	ne
 800751c:	1a1b      	subne	r3, r3, r0
 800751e:	50a3      	strne	r3, [r4, r2]
 8007520:	e7af      	b.n	8007482 <_malloc_r+0x22>
 8007522:	6862      	ldr	r2, [r4, #4]
 8007524:	42a3      	cmp	r3, r4
 8007526:	bf0c      	ite	eq
 8007528:	f8c8 2000 	streq.w	r2, [r8]
 800752c:	605a      	strne	r2, [r3, #4]
 800752e:	e7eb      	b.n	8007508 <_malloc_r+0xa8>
 8007530:	4623      	mov	r3, r4
 8007532:	6864      	ldr	r4, [r4, #4]
 8007534:	e7ae      	b.n	8007494 <_malloc_r+0x34>
 8007536:	463c      	mov	r4, r7
 8007538:	687f      	ldr	r7, [r7, #4]
 800753a:	e7b6      	b.n	80074aa <_malloc_r+0x4a>
 800753c:	461a      	mov	r2, r3
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	42a3      	cmp	r3, r4
 8007542:	d1fb      	bne.n	800753c <_malloc_r+0xdc>
 8007544:	2300      	movs	r3, #0
 8007546:	6053      	str	r3, [r2, #4]
 8007548:	e7de      	b.n	8007508 <_malloc_r+0xa8>
 800754a:	230c      	movs	r3, #12
 800754c:	6033      	str	r3, [r6, #0]
 800754e:	4630      	mov	r0, r6
 8007550:	f000 f80c 	bl	800756c <__malloc_unlock>
 8007554:	e794      	b.n	8007480 <_malloc_r+0x20>
 8007556:	6005      	str	r5, [r0, #0]
 8007558:	e7d6      	b.n	8007508 <_malloc_r+0xa8>
 800755a:	bf00      	nop
 800755c:	20000b50 	.word	0x20000b50

08007560 <__malloc_lock>:
 8007560:	4801      	ldr	r0, [pc, #4]	@ (8007568 <__malloc_lock+0x8>)
 8007562:	f000 b86b 	b.w	800763c <__retarget_lock_acquire_recursive>
 8007566:	bf00      	nop
 8007568:	20000c90 	.word	0x20000c90

0800756c <__malloc_unlock>:
 800756c:	4801      	ldr	r0, [pc, #4]	@ (8007574 <__malloc_unlock+0x8>)
 800756e:	f000 b866 	b.w	800763e <__retarget_lock_release_recursive>
 8007572:	bf00      	nop
 8007574:	20000c90 	.word	0x20000c90

08007578 <siprintf>:
 8007578:	b40e      	push	{r1, r2, r3}
 800757a:	b500      	push	{lr}
 800757c:	b09c      	sub	sp, #112	@ 0x70
 800757e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007580:	9002      	str	r0, [sp, #8]
 8007582:	9006      	str	r0, [sp, #24]
 8007584:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007588:	4809      	ldr	r0, [pc, #36]	@ (80075b0 <siprintf+0x38>)
 800758a:	9107      	str	r1, [sp, #28]
 800758c:	9104      	str	r1, [sp, #16]
 800758e:	4909      	ldr	r1, [pc, #36]	@ (80075b4 <siprintf+0x3c>)
 8007590:	f853 2b04 	ldr.w	r2, [r3], #4
 8007594:	9105      	str	r1, [sp, #20]
 8007596:	6800      	ldr	r0, [r0, #0]
 8007598:	9301      	str	r3, [sp, #4]
 800759a:	a902      	add	r1, sp, #8
 800759c:	f000 f904 	bl	80077a8 <_svfiprintf_r>
 80075a0:	9b02      	ldr	r3, [sp, #8]
 80075a2:	2200      	movs	r2, #0
 80075a4:	701a      	strb	r2, [r3, #0]
 80075a6:	b01c      	add	sp, #112	@ 0x70
 80075a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80075ac:	b003      	add	sp, #12
 80075ae:	4770      	bx	lr
 80075b0:	2000007c 	.word	0x2000007c
 80075b4:	ffff0208 	.word	0xffff0208

080075b8 <memset>:
 80075b8:	4402      	add	r2, r0
 80075ba:	4603      	mov	r3, r0
 80075bc:	4293      	cmp	r3, r2
 80075be:	d100      	bne.n	80075c2 <memset+0xa>
 80075c0:	4770      	bx	lr
 80075c2:	f803 1b01 	strb.w	r1, [r3], #1
 80075c6:	e7f9      	b.n	80075bc <memset+0x4>

080075c8 <_sbrk_r>:
 80075c8:	b538      	push	{r3, r4, r5, lr}
 80075ca:	4d06      	ldr	r5, [pc, #24]	@ (80075e4 <_sbrk_r+0x1c>)
 80075cc:	2300      	movs	r3, #0
 80075ce:	4604      	mov	r4, r0
 80075d0:	4608      	mov	r0, r1
 80075d2:	602b      	str	r3, [r5, #0]
 80075d4:	f7fa f8d8 	bl	8001788 <_sbrk>
 80075d8:	1c43      	adds	r3, r0, #1
 80075da:	d102      	bne.n	80075e2 <_sbrk_r+0x1a>
 80075dc:	682b      	ldr	r3, [r5, #0]
 80075de:	b103      	cbz	r3, 80075e2 <_sbrk_r+0x1a>
 80075e0:	6023      	str	r3, [r4, #0]
 80075e2:	bd38      	pop	{r3, r4, r5, pc}
 80075e4:	20000c8c 	.word	0x20000c8c

080075e8 <__errno>:
 80075e8:	4b01      	ldr	r3, [pc, #4]	@ (80075f0 <__errno+0x8>)
 80075ea:	6818      	ldr	r0, [r3, #0]
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	2000007c 	.word	0x2000007c

080075f4 <__libc_init_array>:
 80075f4:	b570      	push	{r4, r5, r6, lr}
 80075f6:	4d0d      	ldr	r5, [pc, #52]	@ (800762c <__libc_init_array+0x38>)
 80075f8:	4c0d      	ldr	r4, [pc, #52]	@ (8007630 <__libc_init_array+0x3c>)
 80075fa:	1b64      	subs	r4, r4, r5
 80075fc:	10a4      	asrs	r4, r4, #2
 80075fe:	2600      	movs	r6, #0
 8007600:	42a6      	cmp	r6, r4
 8007602:	d109      	bne.n	8007618 <__libc_init_array+0x24>
 8007604:	4d0b      	ldr	r5, [pc, #44]	@ (8007634 <__libc_init_array+0x40>)
 8007606:	4c0c      	ldr	r4, [pc, #48]	@ (8007638 <__libc_init_array+0x44>)
 8007608:	f000 fba8 	bl	8007d5c <_init>
 800760c:	1b64      	subs	r4, r4, r5
 800760e:	10a4      	asrs	r4, r4, #2
 8007610:	2600      	movs	r6, #0
 8007612:	42a6      	cmp	r6, r4
 8007614:	d105      	bne.n	8007622 <__libc_init_array+0x2e>
 8007616:	bd70      	pop	{r4, r5, r6, pc}
 8007618:	f855 3b04 	ldr.w	r3, [r5], #4
 800761c:	4798      	blx	r3
 800761e:	3601      	adds	r6, #1
 8007620:	e7ee      	b.n	8007600 <__libc_init_array+0xc>
 8007622:	f855 3b04 	ldr.w	r3, [r5], #4
 8007626:	4798      	blx	r3
 8007628:	3601      	adds	r6, #1
 800762a:	e7f2      	b.n	8007612 <__libc_init_array+0x1e>
 800762c:	08007dec 	.word	0x08007dec
 8007630:	08007dec 	.word	0x08007dec
 8007634:	08007dec 	.word	0x08007dec
 8007638:	08007df0 	.word	0x08007df0

0800763c <__retarget_lock_acquire_recursive>:
 800763c:	4770      	bx	lr

0800763e <__retarget_lock_release_recursive>:
 800763e:	4770      	bx	lr

08007640 <memcpy>:
 8007640:	440a      	add	r2, r1
 8007642:	4291      	cmp	r1, r2
 8007644:	f100 33ff 	add.w	r3, r0, #4294967295
 8007648:	d100      	bne.n	800764c <memcpy+0xc>
 800764a:	4770      	bx	lr
 800764c:	b510      	push	{r4, lr}
 800764e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007652:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007656:	4291      	cmp	r1, r2
 8007658:	d1f9      	bne.n	800764e <memcpy+0xe>
 800765a:	bd10      	pop	{r4, pc}

0800765c <_free_r>:
 800765c:	b538      	push	{r3, r4, r5, lr}
 800765e:	4605      	mov	r5, r0
 8007660:	2900      	cmp	r1, #0
 8007662:	d041      	beq.n	80076e8 <_free_r+0x8c>
 8007664:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007668:	1f0c      	subs	r4, r1, #4
 800766a:	2b00      	cmp	r3, #0
 800766c:	bfb8      	it	lt
 800766e:	18e4      	addlt	r4, r4, r3
 8007670:	f7ff ff76 	bl	8007560 <__malloc_lock>
 8007674:	4a1d      	ldr	r2, [pc, #116]	@ (80076ec <_free_r+0x90>)
 8007676:	6813      	ldr	r3, [r2, #0]
 8007678:	b933      	cbnz	r3, 8007688 <_free_r+0x2c>
 800767a:	6063      	str	r3, [r4, #4]
 800767c:	6014      	str	r4, [r2, #0]
 800767e:	4628      	mov	r0, r5
 8007680:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007684:	f7ff bf72 	b.w	800756c <__malloc_unlock>
 8007688:	42a3      	cmp	r3, r4
 800768a:	d908      	bls.n	800769e <_free_r+0x42>
 800768c:	6820      	ldr	r0, [r4, #0]
 800768e:	1821      	adds	r1, r4, r0
 8007690:	428b      	cmp	r3, r1
 8007692:	bf01      	itttt	eq
 8007694:	6819      	ldreq	r1, [r3, #0]
 8007696:	685b      	ldreq	r3, [r3, #4]
 8007698:	1809      	addeq	r1, r1, r0
 800769a:	6021      	streq	r1, [r4, #0]
 800769c:	e7ed      	b.n	800767a <_free_r+0x1e>
 800769e:	461a      	mov	r2, r3
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	b10b      	cbz	r3, 80076a8 <_free_r+0x4c>
 80076a4:	42a3      	cmp	r3, r4
 80076a6:	d9fa      	bls.n	800769e <_free_r+0x42>
 80076a8:	6811      	ldr	r1, [r2, #0]
 80076aa:	1850      	adds	r0, r2, r1
 80076ac:	42a0      	cmp	r0, r4
 80076ae:	d10b      	bne.n	80076c8 <_free_r+0x6c>
 80076b0:	6820      	ldr	r0, [r4, #0]
 80076b2:	4401      	add	r1, r0
 80076b4:	1850      	adds	r0, r2, r1
 80076b6:	4283      	cmp	r3, r0
 80076b8:	6011      	str	r1, [r2, #0]
 80076ba:	d1e0      	bne.n	800767e <_free_r+0x22>
 80076bc:	6818      	ldr	r0, [r3, #0]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	6053      	str	r3, [r2, #4]
 80076c2:	4408      	add	r0, r1
 80076c4:	6010      	str	r0, [r2, #0]
 80076c6:	e7da      	b.n	800767e <_free_r+0x22>
 80076c8:	d902      	bls.n	80076d0 <_free_r+0x74>
 80076ca:	230c      	movs	r3, #12
 80076cc:	602b      	str	r3, [r5, #0]
 80076ce:	e7d6      	b.n	800767e <_free_r+0x22>
 80076d0:	6820      	ldr	r0, [r4, #0]
 80076d2:	1821      	adds	r1, r4, r0
 80076d4:	428b      	cmp	r3, r1
 80076d6:	bf04      	itt	eq
 80076d8:	6819      	ldreq	r1, [r3, #0]
 80076da:	685b      	ldreq	r3, [r3, #4]
 80076dc:	6063      	str	r3, [r4, #4]
 80076de:	bf04      	itt	eq
 80076e0:	1809      	addeq	r1, r1, r0
 80076e2:	6021      	streq	r1, [r4, #0]
 80076e4:	6054      	str	r4, [r2, #4]
 80076e6:	e7ca      	b.n	800767e <_free_r+0x22>
 80076e8:	bd38      	pop	{r3, r4, r5, pc}
 80076ea:	bf00      	nop
 80076ec:	20000b50 	.word	0x20000b50

080076f0 <__ssputs_r>:
 80076f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076f4:	688e      	ldr	r6, [r1, #8]
 80076f6:	461f      	mov	r7, r3
 80076f8:	42be      	cmp	r6, r7
 80076fa:	680b      	ldr	r3, [r1, #0]
 80076fc:	4682      	mov	sl, r0
 80076fe:	460c      	mov	r4, r1
 8007700:	4690      	mov	r8, r2
 8007702:	d82d      	bhi.n	8007760 <__ssputs_r+0x70>
 8007704:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007708:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800770c:	d026      	beq.n	800775c <__ssputs_r+0x6c>
 800770e:	6965      	ldr	r5, [r4, #20]
 8007710:	6909      	ldr	r1, [r1, #16]
 8007712:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007716:	eba3 0901 	sub.w	r9, r3, r1
 800771a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800771e:	1c7b      	adds	r3, r7, #1
 8007720:	444b      	add	r3, r9
 8007722:	106d      	asrs	r5, r5, #1
 8007724:	429d      	cmp	r5, r3
 8007726:	bf38      	it	cc
 8007728:	461d      	movcc	r5, r3
 800772a:	0553      	lsls	r3, r2, #21
 800772c:	d527      	bpl.n	800777e <__ssputs_r+0x8e>
 800772e:	4629      	mov	r1, r5
 8007730:	f7ff fe96 	bl	8007460 <_malloc_r>
 8007734:	4606      	mov	r6, r0
 8007736:	b360      	cbz	r0, 8007792 <__ssputs_r+0xa2>
 8007738:	6921      	ldr	r1, [r4, #16]
 800773a:	464a      	mov	r2, r9
 800773c:	f7ff ff80 	bl	8007640 <memcpy>
 8007740:	89a3      	ldrh	r3, [r4, #12]
 8007742:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007746:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800774a:	81a3      	strh	r3, [r4, #12]
 800774c:	6126      	str	r6, [r4, #16]
 800774e:	6165      	str	r5, [r4, #20]
 8007750:	444e      	add	r6, r9
 8007752:	eba5 0509 	sub.w	r5, r5, r9
 8007756:	6026      	str	r6, [r4, #0]
 8007758:	60a5      	str	r5, [r4, #8]
 800775a:	463e      	mov	r6, r7
 800775c:	42be      	cmp	r6, r7
 800775e:	d900      	bls.n	8007762 <__ssputs_r+0x72>
 8007760:	463e      	mov	r6, r7
 8007762:	6820      	ldr	r0, [r4, #0]
 8007764:	4632      	mov	r2, r6
 8007766:	4641      	mov	r1, r8
 8007768:	f000 faa8 	bl	8007cbc <memmove>
 800776c:	68a3      	ldr	r3, [r4, #8]
 800776e:	1b9b      	subs	r3, r3, r6
 8007770:	60a3      	str	r3, [r4, #8]
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	4433      	add	r3, r6
 8007776:	6023      	str	r3, [r4, #0]
 8007778:	2000      	movs	r0, #0
 800777a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800777e:	462a      	mov	r2, r5
 8007780:	f000 fab6 	bl	8007cf0 <_realloc_r>
 8007784:	4606      	mov	r6, r0
 8007786:	2800      	cmp	r0, #0
 8007788:	d1e0      	bne.n	800774c <__ssputs_r+0x5c>
 800778a:	6921      	ldr	r1, [r4, #16]
 800778c:	4650      	mov	r0, sl
 800778e:	f7ff ff65 	bl	800765c <_free_r>
 8007792:	230c      	movs	r3, #12
 8007794:	f8ca 3000 	str.w	r3, [sl]
 8007798:	89a3      	ldrh	r3, [r4, #12]
 800779a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800779e:	81a3      	strh	r3, [r4, #12]
 80077a0:	f04f 30ff 	mov.w	r0, #4294967295
 80077a4:	e7e9      	b.n	800777a <__ssputs_r+0x8a>
	...

080077a8 <_svfiprintf_r>:
 80077a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ac:	4698      	mov	r8, r3
 80077ae:	898b      	ldrh	r3, [r1, #12]
 80077b0:	061b      	lsls	r3, r3, #24
 80077b2:	b09d      	sub	sp, #116	@ 0x74
 80077b4:	4607      	mov	r7, r0
 80077b6:	460d      	mov	r5, r1
 80077b8:	4614      	mov	r4, r2
 80077ba:	d510      	bpl.n	80077de <_svfiprintf_r+0x36>
 80077bc:	690b      	ldr	r3, [r1, #16]
 80077be:	b973      	cbnz	r3, 80077de <_svfiprintf_r+0x36>
 80077c0:	2140      	movs	r1, #64	@ 0x40
 80077c2:	f7ff fe4d 	bl	8007460 <_malloc_r>
 80077c6:	6028      	str	r0, [r5, #0]
 80077c8:	6128      	str	r0, [r5, #16]
 80077ca:	b930      	cbnz	r0, 80077da <_svfiprintf_r+0x32>
 80077cc:	230c      	movs	r3, #12
 80077ce:	603b      	str	r3, [r7, #0]
 80077d0:	f04f 30ff 	mov.w	r0, #4294967295
 80077d4:	b01d      	add	sp, #116	@ 0x74
 80077d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077da:	2340      	movs	r3, #64	@ 0x40
 80077dc:	616b      	str	r3, [r5, #20]
 80077de:	2300      	movs	r3, #0
 80077e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80077e2:	2320      	movs	r3, #32
 80077e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80077e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80077ec:	2330      	movs	r3, #48	@ 0x30
 80077ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800798c <_svfiprintf_r+0x1e4>
 80077f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80077f6:	f04f 0901 	mov.w	r9, #1
 80077fa:	4623      	mov	r3, r4
 80077fc:	469a      	mov	sl, r3
 80077fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007802:	b10a      	cbz	r2, 8007808 <_svfiprintf_r+0x60>
 8007804:	2a25      	cmp	r2, #37	@ 0x25
 8007806:	d1f9      	bne.n	80077fc <_svfiprintf_r+0x54>
 8007808:	ebba 0b04 	subs.w	fp, sl, r4
 800780c:	d00b      	beq.n	8007826 <_svfiprintf_r+0x7e>
 800780e:	465b      	mov	r3, fp
 8007810:	4622      	mov	r2, r4
 8007812:	4629      	mov	r1, r5
 8007814:	4638      	mov	r0, r7
 8007816:	f7ff ff6b 	bl	80076f0 <__ssputs_r>
 800781a:	3001      	adds	r0, #1
 800781c:	f000 80a7 	beq.w	800796e <_svfiprintf_r+0x1c6>
 8007820:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007822:	445a      	add	r2, fp
 8007824:	9209      	str	r2, [sp, #36]	@ 0x24
 8007826:	f89a 3000 	ldrb.w	r3, [sl]
 800782a:	2b00      	cmp	r3, #0
 800782c:	f000 809f 	beq.w	800796e <_svfiprintf_r+0x1c6>
 8007830:	2300      	movs	r3, #0
 8007832:	f04f 32ff 	mov.w	r2, #4294967295
 8007836:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800783a:	f10a 0a01 	add.w	sl, sl, #1
 800783e:	9304      	str	r3, [sp, #16]
 8007840:	9307      	str	r3, [sp, #28]
 8007842:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007846:	931a      	str	r3, [sp, #104]	@ 0x68
 8007848:	4654      	mov	r4, sl
 800784a:	2205      	movs	r2, #5
 800784c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007850:	484e      	ldr	r0, [pc, #312]	@ (800798c <_svfiprintf_r+0x1e4>)
 8007852:	f7f8 fcbd 	bl	80001d0 <memchr>
 8007856:	9a04      	ldr	r2, [sp, #16]
 8007858:	b9d8      	cbnz	r0, 8007892 <_svfiprintf_r+0xea>
 800785a:	06d0      	lsls	r0, r2, #27
 800785c:	bf44      	itt	mi
 800785e:	2320      	movmi	r3, #32
 8007860:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007864:	0711      	lsls	r1, r2, #28
 8007866:	bf44      	itt	mi
 8007868:	232b      	movmi	r3, #43	@ 0x2b
 800786a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800786e:	f89a 3000 	ldrb.w	r3, [sl]
 8007872:	2b2a      	cmp	r3, #42	@ 0x2a
 8007874:	d015      	beq.n	80078a2 <_svfiprintf_r+0xfa>
 8007876:	9a07      	ldr	r2, [sp, #28]
 8007878:	4654      	mov	r4, sl
 800787a:	2000      	movs	r0, #0
 800787c:	f04f 0c0a 	mov.w	ip, #10
 8007880:	4621      	mov	r1, r4
 8007882:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007886:	3b30      	subs	r3, #48	@ 0x30
 8007888:	2b09      	cmp	r3, #9
 800788a:	d94b      	bls.n	8007924 <_svfiprintf_r+0x17c>
 800788c:	b1b0      	cbz	r0, 80078bc <_svfiprintf_r+0x114>
 800788e:	9207      	str	r2, [sp, #28]
 8007890:	e014      	b.n	80078bc <_svfiprintf_r+0x114>
 8007892:	eba0 0308 	sub.w	r3, r0, r8
 8007896:	fa09 f303 	lsl.w	r3, r9, r3
 800789a:	4313      	orrs	r3, r2
 800789c:	9304      	str	r3, [sp, #16]
 800789e:	46a2      	mov	sl, r4
 80078a0:	e7d2      	b.n	8007848 <_svfiprintf_r+0xa0>
 80078a2:	9b03      	ldr	r3, [sp, #12]
 80078a4:	1d19      	adds	r1, r3, #4
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	9103      	str	r1, [sp, #12]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	bfbb      	ittet	lt
 80078ae:	425b      	neglt	r3, r3
 80078b0:	f042 0202 	orrlt.w	r2, r2, #2
 80078b4:	9307      	strge	r3, [sp, #28]
 80078b6:	9307      	strlt	r3, [sp, #28]
 80078b8:	bfb8      	it	lt
 80078ba:	9204      	strlt	r2, [sp, #16]
 80078bc:	7823      	ldrb	r3, [r4, #0]
 80078be:	2b2e      	cmp	r3, #46	@ 0x2e
 80078c0:	d10a      	bne.n	80078d8 <_svfiprintf_r+0x130>
 80078c2:	7863      	ldrb	r3, [r4, #1]
 80078c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80078c6:	d132      	bne.n	800792e <_svfiprintf_r+0x186>
 80078c8:	9b03      	ldr	r3, [sp, #12]
 80078ca:	1d1a      	adds	r2, r3, #4
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	9203      	str	r2, [sp, #12]
 80078d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80078d4:	3402      	adds	r4, #2
 80078d6:	9305      	str	r3, [sp, #20]
 80078d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800799c <_svfiprintf_r+0x1f4>
 80078dc:	7821      	ldrb	r1, [r4, #0]
 80078de:	2203      	movs	r2, #3
 80078e0:	4650      	mov	r0, sl
 80078e2:	f7f8 fc75 	bl	80001d0 <memchr>
 80078e6:	b138      	cbz	r0, 80078f8 <_svfiprintf_r+0x150>
 80078e8:	9b04      	ldr	r3, [sp, #16]
 80078ea:	eba0 000a 	sub.w	r0, r0, sl
 80078ee:	2240      	movs	r2, #64	@ 0x40
 80078f0:	4082      	lsls	r2, r0
 80078f2:	4313      	orrs	r3, r2
 80078f4:	3401      	adds	r4, #1
 80078f6:	9304      	str	r3, [sp, #16]
 80078f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078fc:	4824      	ldr	r0, [pc, #144]	@ (8007990 <_svfiprintf_r+0x1e8>)
 80078fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007902:	2206      	movs	r2, #6
 8007904:	f7f8 fc64 	bl	80001d0 <memchr>
 8007908:	2800      	cmp	r0, #0
 800790a:	d036      	beq.n	800797a <_svfiprintf_r+0x1d2>
 800790c:	4b21      	ldr	r3, [pc, #132]	@ (8007994 <_svfiprintf_r+0x1ec>)
 800790e:	bb1b      	cbnz	r3, 8007958 <_svfiprintf_r+0x1b0>
 8007910:	9b03      	ldr	r3, [sp, #12]
 8007912:	3307      	adds	r3, #7
 8007914:	f023 0307 	bic.w	r3, r3, #7
 8007918:	3308      	adds	r3, #8
 800791a:	9303      	str	r3, [sp, #12]
 800791c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800791e:	4433      	add	r3, r6
 8007920:	9309      	str	r3, [sp, #36]	@ 0x24
 8007922:	e76a      	b.n	80077fa <_svfiprintf_r+0x52>
 8007924:	fb0c 3202 	mla	r2, ip, r2, r3
 8007928:	460c      	mov	r4, r1
 800792a:	2001      	movs	r0, #1
 800792c:	e7a8      	b.n	8007880 <_svfiprintf_r+0xd8>
 800792e:	2300      	movs	r3, #0
 8007930:	3401      	adds	r4, #1
 8007932:	9305      	str	r3, [sp, #20]
 8007934:	4619      	mov	r1, r3
 8007936:	f04f 0c0a 	mov.w	ip, #10
 800793a:	4620      	mov	r0, r4
 800793c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007940:	3a30      	subs	r2, #48	@ 0x30
 8007942:	2a09      	cmp	r2, #9
 8007944:	d903      	bls.n	800794e <_svfiprintf_r+0x1a6>
 8007946:	2b00      	cmp	r3, #0
 8007948:	d0c6      	beq.n	80078d8 <_svfiprintf_r+0x130>
 800794a:	9105      	str	r1, [sp, #20]
 800794c:	e7c4      	b.n	80078d8 <_svfiprintf_r+0x130>
 800794e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007952:	4604      	mov	r4, r0
 8007954:	2301      	movs	r3, #1
 8007956:	e7f0      	b.n	800793a <_svfiprintf_r+0x192>
 8007958:	ab03      	add	r3, sp, #12
 800795a:	9300      	str	r3, [sp, #0]
 800795c:	462a      	mov	r2, r5
 800795e:	4b0e      	ldr	r3, [pc, #56]	@ (8007998 <_svfiprintf_r+0x1f0>)
 8007960:	a904      	add	r1, sp, #16
 8007962:	4638      	mov	r0, r7
 8007964:	f3af 8000 	nop.w
 8007968:	1c42      	adds	r2, r0, #1
 800796a:	4606      	mov	r6, r0
 800796c:	d1d6      	bne.n	800791c <_svfiprintf_r+0x174>
 800796e:	89ab      	ldrh	r3, [r5, #12]
 8007970:	065b      	lsls	r3, r3, #25
 8007972:	f53f af2d 	bmi.w	80077d0 <_svfiprintf_r+0x28>
 8007976:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007978:	e72c      	b.n	80077d4 <_svfiprintf_r+0x2c>
 800797a:	ab03      	add	r3, sp, #12
 800797c:	9300      	str	r3, [sp, #0]
 800797e:	462a      	mov	r2, r5
 8007980:	4b05      	ldr	r3, [pc, #20]	@ (8007998 <_svfiprintf_r+0x1f0>)
 8007982:	a904      	add	r1, sp, #16
 8007984:	4638      	mov	r0, r7
 8007986:	f000 f879 	bl	8007a7c <_printf_i>
 800798a:	e7ed      	b.n	8007968 <_svfiprintf_r+0x1c0>
 800798c:	08007db0 	.word	0x08007db0
 8007990:	08007dba 	.word	0x08007dba
 8007994:	00000000 	.word	0x00000000
 8007998:	080076f1 	.word	0x080076f1
 800799c:	08007db6 	.word	0x08007db6

080079a0 <_printf_common>:
 80079a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079a4:	4616      	mov	r6, r2
 80079a6:	4698      	mov	r8, r3
 80079a8:	688a      	ldr	r2, [r1, #8]
 80079aa:	690b      	ldr	r3, [r1, #16]
 80079ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80079b0:	4293      	cmp	r3, r2
 80079b2:	bfb8      	it	lt
 80079b4:	4613      	movlt	r3, r2
 80079b6:	6033      	str	r3, [r6, #0]
 80079b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80079bc:	4607      	mov	r7, r0
 80079be:	460c      	mov	r4, r1
 80079c0:	b10a      	cbz	r2, 80079c6 <_printf_common+0x26>
 80079c2:	3301      	adds	r3, #1
 80079c4:	6033      	str	r3, [r6, #0]
 80079c6:	6823      	ldr	r3, [r4, #0]
 80079c8:	0699      	lsls	r1, r3, #26
 80079ca:	bf42      	ittt	mi
 80079cc:	6833      	ldrmi	r3, [r6, #0]
 80079ce:	3302      	addmi	r3, #2
 80079d0:	6033      	strmi	r3, [r6, #0]
 80079d2:	6825      	ldr	r5, [r4, #0]
 80079d4:	f015 0506 	ands.w	r5, r5, #6
 80079d8:	d106      	bne.n	80079e8 <_printf_common+0x48>
 80079da:	f104 0a19 	add.w	sl, r4, #25
 80079de:	68e3      	ldr	r3, [r4, #12]
 80079e0:	6832      	ldr	r2, [r6, #0]
 80079e2:	1a9b      	subs	r3, r3, r2
 80079e4:	42ab      	cmp	r3, r5
 80079e6:	dc26      	bgt.n	8007a36 <_printf_common+0x96>
 80079e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80079ec:	6822      	ldr	r2, [r4, #0]
 80079ee:	3b00      	subs	r3, #0
 80079f0:	bf18      	it	ne
 80079f2:	2301      	movne	r3, #1
 80079f4:	0692      	lsls	r2, r2, #26
 80079f6:	d42b      	bmi.n	8007a50 <_printf_common+0xb0>
 80079f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80079fc:	4641      	mov	r1, r8
 80079fe:	4638      	mov	r0, r7
 8007a00:	47c8      	blx	r9
 8007a02:	3001      	adds	r0, #1
 8007a04:	d01e      	beq.n	8007a44 <_printf_common+0xa4>
 8007a06:	6823      	ldr	r3, [r4, #0]
 8007a08:	6922      	ldr	r2, [r4, #16]
 8007a0a:	f003 0306 	and.w	r3, r3, #6
 8007a0e:	2b04      	cmp	r3, #4
 8007a10:	bf02      	ittt	eq
 8007a12:	68e5      	ldreq	r5, [r4, #12]
 8007a14:	6833      	ldreq	r3, [r6, #0]
 8007a16:	1aed      	subeq	r5, r5, r3
 8007a18:	68a3      	ldr	r3, [r4, #8]
 8007a1a:	bf0c      	ite	eq
 8007a1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a20:	2500      	movne	r5, #0
 8007a22:	4293      	cmp	r3, r2
 8007a24:	bfc4      	itt	gt
 8007a26:	1a9b      	subgt	r3, r3, r2
 8007a28:	18ed      	addgt	r5, r5, r3
 8007a2a:	2600      	movs	r6, #0
 8007a2c:	341a      	adds	r4, #26
 8007a2e:	42b5      	cmp	r5, r6
 8007a30:	d11a      	bne.n	8007a68 <_printf_common+0xc8>
 8007a32:	2000      	movs	r0, #0
 8007a34:	e008      	b.n	8007a48 <_printf_common+0xa8>
 8007a36:	2301      	movs	r3, #1
 8007a38:	4652      	mov	r2, sl
 8007a3a:	4641      	mov	r1, r8
 8007a3c:	4638      	mov	r0, r7
 8007a3e:	47c8      	blx	r9
 8007a40:	3001      	adds	r0, #1
 8007a42:	d103      	bne.n	8007a4c <_printf_common+0xac>
 8007a44:	f04f 30ff 	mov.w	r0, #4294967295
 8007a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a4c:	3501      	adds	r5, #1
 8007a4e:	e7c6      	b.n	80079de <_printf_common+0x3e>
 8007a50:	18e1      	adds	r1, r4, r3
 8007a52:	1c5a      	adds	r2, r3, #1
 8007a54:	2030      	movs	r0, #48	@ 0x30
 8007a56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007a5a:	4422      	add	r2, r4
 8007a5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007a60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007a64:	3302      	adds	r3, #2
 8007a66:	e7c7      	b.n	80079f8 <_printf_common+0x58>
 8007a68:	2301      	movs	r3, #1
 8007a6a:	4622      	mov	r2, r4
 8007a6c:	4641      	mov	r1, r8
 8007a6e:	4638      	mov	r0, r7
 8007a70:	47c8      	blx	r9
 8007a72:	3001      	adds	r0, #1
 8007a74:	d0e6      	beq.n	8007a44 <_printf_common+0xa4>
 8007a76:	3601      	adds	r6, #1
 8007a78:	e7d9      	b.n	8007a2e <_printf_common+0x8e>
	...

08007a7c <_printf_i>:
 8007a7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a80:	7e0f      	ldrb	r7, [r1, #24]
 8007a82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007a84:	2f78      	cmp	r7, #120	@ 0x78
 8007a86:	4691      	mov	r9, r2
 8007a88:	4680      	mov	r8, r0
 8007a8a:	460c      	mov	r4, r1
 8007a8c:	469a      	mov	sl, r3
 8007a8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007a92:	d807      	bhi.n	8007aa4 <_printf_i+0x28>
 8007a94:	2f62      	cmp	r7, #98	@ 0x62
 8007a96:	d80a      	bhi.n	8007aae <_printf_i+0x32>
 8007a98:	2f00      	cmp	r7, #0
 8007a9a:	f000 80d2 	beq.w	8007c42 <_printf_i+0x1c6>
 8007a9e:	2f58      	cmp	r7, #88	@ 0x58
 8007aa0:	f000 80b9 	beq.w	8007c16 <_printf_i+0x19a>
 8007aa4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007aa8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007aac:	e03a      	b.n	8007b24 <_printf_i+0xa8>
 8007aae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007ab2:	2b15      	cmp	r3, #21
 8007ab4:	d8f6      	bhi.n	8007aa4 <_printf_i+0x28>
 8007ab6:	a101      	add	r1, pc, #4	@ (adr r1, 8007abc <_printf_i+0x40>)
 8007ab8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007abc:	08007b15 	.word	0x08007b15
 8007ac0:	08007b29 	.word	0x08007b29
 8007ac4:	08007aa5 	.word	0x08007aa5
 8007ac8:	08007aa5 	.word	0x08007aa5
 8007acc:	08007aa5 	.word	0x08007aa5
 8007ad0:	08007aa5 	.word	0x08007aa5
 8007ad4:	08007b29 	.word	0x08007b29
 8007ad8:	08007aa5 	.word	0x08007aa5
 8007adc:	08007aa5 	.word	0x08007aa5
 8007ae0:	08007aa5 	.word	0x08007aa5
 8007ae4:	08007aa5 	.word	0x08007aa5
 8007ae8:	08007c29 	.word	0x08007c29
 8007aec:	08007b53 	.word	0x08007b53
 8007af0:	08007be3 	.word	0x08007be3
 8007af4:	08007aa5 	.word	0x08007aa5
 8007af8:	08007aa5 	.word	0x08007aa5
 8007afc:	08007c4b 	.word	0x08007c4b
 8007b00:	08007aa5 	.word	0x08007aa5
 8007b04:	08007b53 	.word	0x08007b53
 8007b08:	08007aa5 	.word	0x08007aa5
 8007b0c:	08007aa5 	.word	0x08007aa5
 8007b10:	08007beb 	.word	0x08007beb
 8007b14:	6833      	ldr	r3, [r6, #0]
 8007b16:	1d1a      	adds	r2, r3, #4
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	6032      	str	r2, [r6, #0]
 8007b1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007b24:	2301      	movs	r3, #1
 8007b26:	e09d      	b.n	8007c64 <_printf_i+0x1e8>
 8007b28:	6833      	ldr	r3, [r6, #0]
 8007b2a:	6820      	ldr	r0, [r4, #0]
 8007b2c:	1d19      	adds	r1, r3, #4
 8007b2e:	6031      	str	r1, [r6, #0]
 8007b30:	0606      	lsls	r6, r0, #24
 8007b32:	d501      	bpl.n	8007b38 <_printf_i+0xbc>
 8007b34:	681d      	ldr	r5, [r3, #0]
 8007b36:	e003      	b.n	8007b40 <_printf_i+0xc4>
 8007b38:	0645      	lsls	r5, r0, #25
 8007b3a:	d5fb      	bpl.n	8007b34 <_printf_i+0xb8>
 8007b3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007b40:	2d00      	cmp	r5, #0
 8007b42:	da03      	bge.n	8007b4c <_printf_i+0xd0>
 8007b44:	232d      	movs	r3, #45	@ 0x2d
 8007b46:	426d      	negs	r5, r5
 8007b48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b4c:	4859      	ldr	r0, [pc, #356]	@ (8007cb4 <_printf_i+0x238>)
 8007b4e:	230a      	movs	r3, #10
 8007b50:	e011      	b.n	8007b76 <_printf_i+0xfa>
 8007b52:	6821      	ldr	r1, [r4, #0]
 8007b54:	6833      	ldr	r3, [r6, #0]
 8007b56:	0608      	lsls	r0, r1, #24
 8007b58:	f853 5b04 	ldr.w	r5, [r3], #4
 8007b5c:	d402      	bmi.n	8007b64 <_printf_i+0xe8>
 8007b5e:	0649      	lsls	r1, r1, #25
 8007b60:	bf48      	it	mi
 8007b62:	b2ad      	uxthmi	r5, r5
 8007b64:	2f6f      	cmp	r7, #111	@ 0x6f
 8007b66:	4853      	ldr	r0, [pc, #332]	@ (8007cb4 <_printf_i+0x238>)
 8007b68:	6033      	str	r3, [r6, #0]
 8007b6a:	bf14      	ite	ne
 8007b6c:	230a      	movne	r3, #10
 8007b6e:	2308      	moveq	r3, #8
 8007b70:	2100      	movs	r1, #0
 8007b72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007b76:	6866      	ldr	r6, [r4, #4]
 8007b78:	60a6      	str	r6, [r4, #8]
 8007b7a:	2e00      	cmp	r6, #0
 8007b7c:	bfa2      	ittt	ge
 8007b7e:	6821      	ldrge	r1, [r4, #0]
 8007b80:	f021 0104 	bicge.w	r1, r1, #4
 8007b84:	6021      	strge	r1, [r4, #0]
 8007b86:	b90d      	cbnz	r5, 8007b8c <_printf_i+0x110>
 8007b88:	2e00      	cmp	r6, #0
 8007b8a:	d04b      	beq.n	8007c24 <_printf_i+0x1a8>
 8007b8c:	4616      	mov	r6, r2
 8007b8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b92:	fb03 5711 	mls	r7, r3, r1, r5
 8007b96:	5dc7      	ldrb	r7, [r0, r7]
 8007b98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b9c:	462f      	mov	r7, r5
 8007b9e:	42bb      	cmp	r3, r7
 8007ba0:	460d      	mov	r5, r1
 8007ba2:	d9f4      	bls.n	8007b8e <_printf_i+0x112>
 8007ba4:	2b08      	cmp	r3, #8
 8007ba6:	d10b      	bne.n	8007bc0 <_printf_i+0x144>
 8007ba8:	6823      	ldr	r3, [r4, #0]
 8007baa:	07df      	lsls	r7, r3, #31
 8007bac:	d508      	bpl.n	8007bc0 <_printf_i+0x144>
 8007bae:	6923      	ldr	r3, [r4, #16]
 8007bb0:	6861      	ldr	r1, [r4, #4]
 8007bb2:	4299      	cmp	r1, r3
 8007bb4:	bfde      	ittt	le
 8007bb6:	2330      	movle	r3, #48	@ 0x30
 8007bb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007bbc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007bc0:	1b92      	subs	r2, r2, r6
 8007bc2:	6122      	str	r2, [r4, #16]
 8007bc4:	f8cd a000 	str.w	sl, [sp]
 8007bc8:	464b      	mov	r3, r9
 8007bca:	aa03      	add	r2, sp, #12
 8007bcc:	4621      	mov	r1, r4
 8007bce:	4640      	mov	r0, r8
 8007bd0:	f7ff fee6 	bl	80079a0 <_printf_common>
 8007bd4:	3001      	adds	r0, #1
 8007bd6:	d14a      	bne.n	8007c6e <_printf_i+0x1f2>
 8007bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bdc:	b004      	add	sp, #16
 8007bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007be2:	6823      	ldr	r3, [r4, #0]
 8007be4:	f043 0320 	orr.w	r3, r3, #32
 8007be8:	6023      	str	r3, [r4, #0]
 8007bea:	4833      	ldr	r0, [pc, #204]	@ (8007cb8 <_printf_i+0x23c>)
 8007bec:	2778      	movs	r7, #120	@ 0x78
 8007bee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007bf2:	6823      	ldr	r3, [r4, #0]
 8007bf4:	6831      	ldr	r1, [r6, #0]
 8007bf6:	061f      	lsls	r7, r3, #24
 8007bf8:	f851 5b04 	ldr.w	r5, [r1], #4
 8007bfc:	d402      	bmi.n	8007c04 <_printf_i+0x188>
 8007bfe:	065f      	lsls	r7, r3, #25
 8007c00:	bf48      	it	mi
 8007c02:	b2ad      	uxthmi	r5, r5
 8007c04:	6031      	str	r1, [r6, #0]
 8007c06:	07d9      	lsls	r1, r3, #31
 8007c08:	bf44      	itt	mi
 8007c0a:	f043 0320 	orrmi.w	r3, r3, #32
 8007c0e:	6023      	strmi	r3, [r4, #0]
 8007c10:	b11d      	cbz	r5, 8007c1a <_printf_i+0x19e>
 8007c12:	2310      	movs	r3, #16
 8007c14:	e7ac      	b.n	8007b70 <_printf_i+0xf4>
 8007c16:	4827      	ldr	r0, [pc, #156]	@ (8007cb4 <_printf_i+0x238>)
 8007c18:	e7e9      	b.n	8007bee <_printf_i+0x172>
 8007c1a:	6823      	ldr	r3, [r4, #0]
 8007c1c:	f023 0320 	bic.w	r3, r3, #32
 8007c20:	6023      	str	r3, [r4, #0]
 8007c22:	e7f6      	b.n	8007c12 <_printf_i+0x196>
 8007c24:	4616      	mov	r6, r2
 8007c26:	e7bd      	b.n	8007ba4 <_printf_i+0x128>
 8007c28:	6833      	ldr	r3, [r6, #0]
 8007c2a:	6825      	ldr	r5, [r4, #0]
 8007c2c:	6961      	ldr	r1, [r4, #20]
 8007c2e:	1d18      	adds	r0, r3, #4
 8007c30:	6030      	str	r0, [r6, #0]
 8007c32:	062e      	lsls	r6, r5, #24
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	d501      	bpl.n	8007c3c <_printf_i+0x1c0>
 8007c38:	6019      	str	r1, [r3, #0]
 8007c3a:	e002      	b.n	8007c42 <_printf_i+0x1c6>
 8007c3c:	0668      	lsls	r0, r5, #25
 8007c3e:	d5fb      	bpl.n	8007c38 <_printf_i+0x1bc>
 8007c40:	8019      	strh	r1, [r3, #0]
 8007c42:	2300      	movs	r3, #0
 8007c44:	6123      	str	r3, [r4, #16]
 8007c46:	4616      	mov	r6, r2
 8007c48:	e7bc      	b.n	8007bc4 <_printf_i+0x148>
 8007c4a:	6833      	ldr	r3, [r6, #0]
 8007c4c:	1d1a      	adds	r2, r3, #4
 8007c4e:	6032      	str	r2, [r6, #0]
 8007c50:	681e      	ldr	r6, [r3, #0]
 8007c52:	6862      	ldr	r2, [r4, #4]
 8007c54:	2100      	movs	r1, #0
 8007c56:	4630      	mov	r0, r6
 8007c58:	f7f8 faba 	bl	80001d0 <memchr>
 8007c5c:	b108      	cbz	r0, 8007c62 <_printf_i+0x1e6>
 8007c5e:	1b80      	subs	r0, r0, r6
 8007c60:	6060      	str	r0, [r4, #4]
 8007c62:	6863      	ldr	r3, [r4, #4]
 8007c64:	6123      	str	r3, [r4, #16]
 8007c66:	2300      	movs	r3, #0
 8007c68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c6c:	e7aa      	b.n	8007bc4 <_printf_i+0x148>
 8007c6e:	6923      	ldr	r3, [r4, #16]
 8007c70:	4632      	mov	r2, r6
 8007c72:	4649      	mov	r1, r9
 8007c74:	4640      	mov	r0, r8
 8007c76:	47d0      	blx	sl
 8007c78:	3001      	adds	r0, #1
 8007c7a:	d0ad      	beq.n	8007bd8 <_printf_i+0x15c>
 8007c7c:	6823      	ldr	r3, [r4, #0]
 8007c7e:	079b      	lsls	r3, r3, #30
 8007c80:	d413      	bmi.n	8007caa <_printf_i+0x22e>
 8007c82:	68e0      	ldr	r0, [r4, #12]
 8007c84:	9b03      	ldr	r3, [sp, #12]
 8007c86:	4298      	cmp	r0, r3
 8007c88:	bfb8      	it	lt
 8007c8a:	4618      	movlt	r0, r3
 8007c8c:	e7a6      	b.n	8007bdc <_printf_i+0x160>
 8007c8e:	2301      	movs	r3, #1
 8007c90:	4632      	mov	r2, r6
 8007c92:	4649      	mov	r1, r9
 8007c94:	4640      	mov	r0, r8
 8007c96:	47d0      	blx	sl
 8007c98:	3001      	adds	r0, #1
 8007c9a:	d09d      	beq.n	8007bd8 <_printf_i+0x15c>
 8007c9c:	3501      	adds	r5, #1
 8007c9e:	68e3      	ldr	r3, [r4, #12]
 8007ca0:	9903      	ldr	r1, [sp, #12]
 8007ca2:	1a5b      	subs	r3, r3, r1
 8007ca4:	42ab      	cmp	r3, r5
 8007ca6:	dcf2      	bgt.n	8007c8e <_printf_i+0x212>
 8007ca8:	e7eb      	b.n	8007c82 <_printf_i+0x206>
 8007caa:	2500      	movs	r5, #0
 8007cac:	f104 0619 	add.w	r6, r4, #25
 8007cb0:	e7f5      	b.n	8007c9e <_printf_i+0x222>
 8007cb2:	bf00      	nop
 8007cb4:	08007dc1 	.word	0x08007dc1
 8007cb8:	08007dd2 	.word	0x08007dd2

08007cbc <memmove>:
 8007cbc:	4288      	cmp	r0, r1
 8007cbe:	b510      	push	{r4, lr}
 8007cc0:	eb01 0402 	add.w	r4, r1, r2
 8007cc4:	d902      	bls.n	8007ccc <memmove+0x10>
 8007cc6:	4284      	cmp	r4, r0
 8007cc8:	4623      	mov	r3, r4
 8007cca:	d807      	bhi.n	8007cdc <memmove+0x20>
 8007ccc:	1e43      	subs	r3, r0, #1
 8007cce:	42a1      	cmp	r1, r4
 8007cd0:	d008      	beq.n	8007ce4 <memmove+0x28>
 8007cd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007cda:	e7f8      	b.n	8007cce <memmove+0x12>
 8007cdc:	4402      	add	r2, r0
 8007cde:	4601      	mov	r1, r0
 8007ce0:	428a      	cmp	r2, r1
 8007ce2:	d100      	bne.n	8007ce6 <memmove+0x2a>
 8007ce4:	bd10      	pop	{r4, pc}
 8007ce6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007cee:	e7f7      	b.n	8007ce0 <memmove+0x24>

08007cf0 <_realloc_r>:
 8007cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cf4:	4680      	mov	r8, r0
 8007cf6:	4615      	mov	r5, r2
 8007cf8:	460c      	mov	r4, r1
 8007cfa:	b921      	cbnz	r1, 8007d06 <_realloc_r+0x16>
 8007cfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d00:	4611      	mov	r1, r2
 8007d02:	f7ff bbad 	b.w	8007460 <_malloc_r>
 8007d06:	b92a      	cbnz	r2, 8007d14 <_realloc_r+0x24>
 8007d08:	f7ff fca8 	bl	800765c <_free_r>
 8007d0c:	2400      	movs	r4, #0
 8007d0e:	4620      	mov	r0, r4
 8007d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d14:	f000 f81a 	bl	8007d4c <_malloc_usable_size_r>
 8007d18:	4285      	cmp	r5, r0
 8007d1a:	4606      	mov	r6, r0
 8007d1c:	d802      	bhi.n	8007d24 <_realloc_r+0x34>
 8007d1e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007d22:	d8f4      	bhi.n	8007d0e <_realloc_r+0x1e>
 8007d24:	4629      	mov	r1, r5
 8007d26:	4640      	mov	r0, r8
 8007d28:	f7ff fb9a 	bl	8007460 <_malloc_r>
 8007d2c:	4607      	mov	r7, r0
 8007d2e:	2800      	cmp	r0, #0
 8007d30:	d0ec      	beq.n	8007d0c <_realloc_r+0x1c>
 8007d32:	42b5      	cmp	r5, r6
 8007d34:	462a      	mov	r2, r5
 8007d36:	4621      	mov	r1, r4
 8007d38:	bf28      	it	cs
 8007d3a:	4632      	movcs	r2, r6
 8007d3c:	f7ff fc80 	bl	8007640 <memcpy>
 8007d40:	4621      	mov	r1, r4
 8007d42:	4640      	mov	r0, r8
 8007d44:	f7ff fc8a 	bl	800765c <_free_r>
 8007d48:	463c      	mov	r4, r7
 8007d4a:	e7e0      	b.n	8007d0e <_realloc_r+0x1e>

08007d4c <_malloc_usable_size_r>:
 8007d4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d50:	1f18      	subs	r0, r3, #4
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	bfbc      	itt	lt
 8007d56:	580b      	ldrlt	r3, [r1, r0]
 8007d58:	18c0      	addlt	r0, r0, r3
 8007d5a:	4770      	bx	lr

08007d5c <_init>:
 8007d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d5e:	bf00      	nop
 8007d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d62:	bc08      	pop	{r3}
 8007d64:	469e      	mov	lr, r3
 8007d66:	4770      	bx	lr

08007d68 <_fini>:
 8007d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d6a:	bf00      	nop
 8007d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d6e:	bc08      	pop	{r3}
 8007d70:	469e      	mov	lr, r3
 8007d72:	4770      	bx	lr
